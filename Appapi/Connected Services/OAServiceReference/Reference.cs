//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Appapi.OAServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ArrayOfString", Namespace="webservices.services.weaver.com.cn", ItemName="string")]
    [System.SerializableAttribute()]
    public class ArrayOfString : System.Collections.Generic.List<string> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowRequestLog", Namespace="http://webservices.workflow.weaver")]
    [System.SerializableAttribute()]
    public partial class WorkflowRequestLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string agentorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string agentorDeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string annexDocHtmlsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nodeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operateTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorDeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string operatorSignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string receivedPersonsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string remarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string remarkSignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signDocHtmlsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string signWorkFlowHtmlsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string agentor {
            get {
                return this.agentorField;
            }
            set {
                if ((object.ReferenceEquals(this.agentorField, value) != true)) {
                    this.agentorField = value;
                    this.RaisePropertyChanged("agentor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string agentorDept {
            get {
                return this.agentorDeptField;
            }
            set {
                if ((object.ReferenceEquals(this.agentorDeptField, value) != true)) {
                    this.agentorDeptField = value;
                    this.RaisePropertyChanged("agentorDept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string annexDocHtmls {
            get {
                return this.annexDocHtmlsField;
            }
            set {
                if ((object.ReferenceEquals(this.annexDocHtmlsField, value) != true)) {
                    this.annexDocHtmlsField = value;
                    this.RaisePropertyChanged("annexDocHtmls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nodeId {
            get {
                return this.nodeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.nodeIdField, value) != true)) {
                    this.nodeIdField = value;
                    this.RaisePropertyChanged("nodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.nodeNameField, value) != true)) {
                    this.nodeNameField = value;
                    this.RaisePropertyChanged("nodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operateDate {
            get {
                return this.operateDateField;
            }
            set {
                if ((object.ReferenceEquals(this.operateDateField, value) != true)) {
                    this.operateDateField = value;
                    this.RaisePropertyChanged("operateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operateTime {
            get {
                return this.operateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.operateTimeField, value) != true)) {
                    this.operateTimeField = value;
                    this.RaisePropertyChanged("operateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operateType {
            get {
                return this.operateTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.operateTypeField, value) != true)) {
                    this.operateTypeField = value;
                    this.RaisePropertyChanged("operateType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorDept {
            get {
                return this.operatorDeptField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorDeptField, value) != true)) {
                    this.operatorDeptField = value;
                    this.RaisePropertyChanged("operatorDept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorId {
            get {
                return this.operatorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorIdField, value) != true)) {
                    this.operatorIdField = value;
                    this.RaisePropertyChanged("operatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorName {
            get {
                return this.operatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorNameField, value) != true)) {
                    this.operatorNameField = value;
                    this.RaisePropertyChanged("operatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string operatorSign {
            get {
                return this.operatorSignField;
            }
            set {
                if ((object.ReferenceEquals(this.operatorSignField, value) != true)) {
                    this.operatorSignField = value;
                    this.RaisePropertyChanged("operatorSign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string receivedPersons {
            get {
                return this.receivedPersonsField;
            }
            set {
                if ((object.ReferenceEquals(this.receivedPersonsField, value) != true)) {
                    this.receivedPersonsField = value;
                    this.RaisePropertyChanged("receivedPersons");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remark {
            get {
                return this.remarkField;
            }
            set {
                if ((object.ReferenceEquals(this.remarkField, value) != true)) {
                    this.remarkField = value;
                    this.RaisePropertyChanged("remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remarkSign {
            get {
                return this.remarkSignField;
            }
            set {
                if ((object.ReferenceEquals(this.remarkSignField, value) != true)) {
                    this.remarkSignField = value;
                    this.RaisePropertyChanged("remarkSign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signDocHtmls {
            get {
                return this.signDocHtmlsField;
            }
            set {
                if ((object.ReferenceEquals(this.signDocHtmlsField, value) != true)) {
                    this.signDocHtmlsField = value;
                    this.RaisePropertyChanged("signDocHtmls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string signWorkFlowHtmls {
            get {
                return this.signWorkFlowHtmlsField;
            }
            set {
                if ((object.ReferenceEquals(this.signWorkFlowHtmlsField, value) != true)) {
                    this.signWorkFlowHtmlsField = value;
                    this.RaisePropertyChanged("signWorkFlowHtmls");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="webservices.services.weaver.com.cn", ConfigurationName="OAServiceReference.WorkflowServiceXmlPortType")]
    public interface WorkflowServiceXmlPortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string forward2WorkflowRequest(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> forward2WorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getAllWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getAllWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string getWorkflowRequest(int in0, int in1, int in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> getWorkflowRequestAsync(int in0, int in1, int in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getHendledWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getHendledWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getToDoWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getToDoWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string getWorkflowRequest4split(int in0, int in1, int in2, int in3);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> getWorkflowRequest4splitAsync(int in0, int in1, int in2, int in3);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string submitWorkflowRequest(string in0, int in1, int in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> submitWorkflowRequestAsync(string in0, int in1, int in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getHendledWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getHendledWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string getLeaveDays(string in0, string in1, string in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> getLeaveDaysAsync(string in0, string in1, string in2, string in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getCreateWorkflowList(int in0, int in1, int in2, int in3, int in4, Appapi.OAServiceReference.ArrayOfString in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getCreateWorkflowListAsync(int in0, int in1, int in2, int in3, int in4, Appapi.OAServiceReference.ArrayOfString in5);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getCreateWorkflowCount(int in0, int in1, Appapi.OAServiceReference.ArrayOfString in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getCreateWorkflowCountAsync(int in0, int in1, Appapi.OAServiceReference.ArrayOfString in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getProcessedWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getProcessedWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string forwardWorkflowRequest(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> forwardWorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string doCreateWorkflowRequest(string in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> doCreateWorkflowRequestAsync(string in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string doForceOver(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> doForceOverAsync(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getCCWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getCCWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getProcessedWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getProcessedWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getAllWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getAllWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string getCreateWorkflowRequestInfo(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> getCreateWorkflowRequestInfoAsync(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getMyWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getMyWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getCreateWorkflowTypeList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getCreateWorkflowTypeListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getMyWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getMyWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getWorkflowNewFlag(Appapi.OAServiceReference.ArrayOfString in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getWorkflowNewFlagAsync(Appapi.OAServiceReference.ArrayOfString in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        void writeWorkflowReadFlag(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        System.Threading.Tasks.Task writeWorkflowReadFlagAsync(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getToDoWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getToDoWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string givingOpinions(int in0, int in1, string in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> givingOpinionsAsync(int in0, int in1, string in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        int getCreateWorkflowTypeCount(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<int> getCreateWorkflowTypeCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.WorkflowRequestLog[] getWorkflowRequestLogs(string in0, string in1, int in2, int in3, int in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.WorkflowRequestLog[]> getWorkflowRequestLogsAsync(string in0, string in1, int in2, int in3, int in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        bool deleteRequest(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<bool> deleteRequestAsync(int in0, int in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        Appapi.OAServiceReference.ArrayOfString getCCWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getCCWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string getUserId(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> getUserIdAsync(string in0, string in1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WorkflowServiceXmlPortTypeChannel : Appapi.OAServiceReference.WorkflowServiceXmlPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkflowServiceXmlPortTypeClient : System.ServiceModel.ClientBase<Appapi.OAServiceReference.WorkflowServiceXmlPortType>, Appapi.OAServiceReference.WorkflowServiceXmlPortType {
        
        public WorkflowServiceXmlPortTypeClient() {
        }
        
        public WorkflowServiceXmlPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkflowServiceXmlPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServiceXmlPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServiceXmlPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string forward2WorkflowRequest(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forward2WorkflowRequest(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> forward2WorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forward2WorkflowRequestAsync(in0, in1, in2, in3, in4);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getAllWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getAllWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getAllWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getAllWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public string getWorkflowRequest(int in0, int in1, int in2) {
            return base.Channel.getWorkflowRequest(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<string> getWorkflowRequestAsync(int in0, int in1, int in2) {
            return base.Channel.getWorkflowRequestAsync(in0, in1, in2);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getHendledWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getHendledWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getHendledWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getHendledWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getToDoWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getToDoWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getToDoWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getToDoWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public string getWorkflowRequest4split(int in0, int in1, int in2, int in3) {
            return base.Channel.getWorkflowRequest4split(in0, in1, in2, in3);
        }
        
        public System.Threading.Tasks.Task<string> getWorkflowRequest4splitAsync(int in0, int in1, int in2, int in3) {
            return base.Channel.getWorkflowRequest4splitAsync(in0, in1, in2, in3);
        }
        
        public string submitWorkflowRequest(string in0, int in1, int in2, string in3, string in4) {
            return base.Channel.submitWorkflowRequest(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> submitWorkflowRequestAsync(string in0, int in1, int in2, string in3, string in4) {
            return base.Channel.submitWorkflowRequestAsync(in0, in1, in2, in3, in4);
        }
        
        public int getHendledWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getHendledWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getHendledWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getHendledWorkflowRequestCountAsync(in0, in1);
        }
        
        public string getLeaveDays(string in0, string in1, string in2, string in3, string in4) {
            return base.Channel.getLeaveDays(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> getLeaveDaysAsync(string in0, string in1, string in2, string in3, string in4) {
            return base.Channel.getLeaveDaysAsync(in0, in1, in2, in3, in4);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getCreateWorkflowList(int in0, int in1, int in2, int in3, int in4, Appapi.OAServiceReference.ArrayOfString in5) {
            return base.Channel.getCreateWorkflowList(in0, in1, in2, in3, in4, in5);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getCreateWorkflowListAsync(int in0, int in1, int in2, int in3, int in4, Appapi.OAServiceReference.ArrayOfString in5) {
            return base.Channel.getCreateWorkflowListAsync(in0, in1, in2, in3, in4, in5);
        }
        
        public int getCreateWorkflowCount(int in0, int in1, Appapi.OAServiceReference.ArrayOfString in2) {
            return base.Channel.getCreateWorkflowCount(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<int> getCreateWorkflowCountAsync(int in0, int in1, Appapi.OAServiceReference.ArrayOfString in2) {
            return base.Channel.getCreateWorkflowCountAsync(in0, in1, in2);
        }
        
        public int getProcessedWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getProcessedWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getProcessedWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getProcessedWorkflowRequestCountAsync(in0, in1);
        }
        
        public string forwardWorkflowRequest(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forwardWorkflowRequest(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<string> forwardWorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4) {
            return base.Channel.forwardWorkflowRequestAsync(in0, in1, in2, in3, in4);
        }
        
        public string doCreateWorkflowRequest(string in0, int in1) {
            return base.Channel.doCreateWorkflowRequest(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> doCreateWorkflowRequestAsync(string in0, int in1) {
            return base.Channel.doCreateWorkflowRequestAsync(in0, in1);
        }
        
        public string doForceOver(int in0, int in1) {
            return base.Channel.doForceOver(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> doForceOverAsync(int in0, int in1) {
            return base.Channel.doForceOverAsync(in0, in1);
        }
        
        public int getCCWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getCCWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getCCWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getCCWorkflowRequestCountAsync(in0, in1);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getProcessedWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getProcessedWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getProcessedWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getProcessedWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public int getAllWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getAllWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getAllWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getAllWorkflowRequestCountAsync(in0, in1);
        }
        
        public string getCreateWorkflowRequestInfo(int in0, int in1) {
            return base.Channel.getCreateWorkflowRequestInfo(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> getCreateWorkflowRequestInfoAsync(int in0, int in1) {
            return base.Channel.getCreateWorkflowRequestInfoAsync(in0, in1);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getMyWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getMyWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getMyWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getMyWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getCreateWorkflowTypeList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getCreateWorkflowTypeList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getCreateWorkflowTypeListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getCreateWorkflowTypeListAsync(in0, in1, in2, in3, in4);
        }
        
        public int getMyWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getMyWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getMyWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getMyWorkflowRequestCountAsync(in0, in1);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getWorkflowNewFlag(Appapi.OAServiceReference.ArrayOfString in0, string in1) {
            return base.Channel.getWorkflowNewFlag(in0, in1);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getWorkflowNewFlagAsync(Appapi.OAServiceReference.ArrayOfString in0, string in1) {
            return base.Channel.getWorkflowNewFlagAsync(in0, in1);
        }
        
        public void writeWorkflowReadFlag(string in0, string in1) {
            base.Channel.writeWorkflowReadFlag(in0, in1);
        }
        
        public System.Threading.Tasks.Task writeWorkflowReadFlagAsync(string in0, string in1) {
            return base.Channel.writeWorkflowReadFlagAsync(in0, in1);
        }
        
        public int getToDoWorkflowRequestCount(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getToDoWorkflowRequestCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getToDoWorkflowRequestCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getToDoWorkflowRequestCountAsync(in0, in1);
        }
        
        public string givingOpinions(int in0, int in1, string in2) {
            return base.Channel.givingOpinions(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<string> givingOpinionsAsync(int in0, int in1, string in2) {
            return base.Channel.givingOpinionsAsync(in0, in1, in2);
        }
        
        public int getCreateWorkflowTypeCount(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getCreateWorkflowTypeCount(in0, in1);
        }
        
        public System.Threading.Tasks.Task<int> getCreateWorkflowTypeCountAsync(int in0, Appapi.OAServiceReference.ArrayOfString in1) {
            return base.Channel.getCreateWorkflowTypeCountAsync(in0, in1);
        }
        
        public Appapi.OAServiceReference.WorkflowRequestLog[] getWorkflowRequestLogs(string in0, string in1, int in2, int in3, int in4) {
            return base.Channel.getWorkflowRequestLogs(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.WorkflowRequestLog[]> getWorkflowRequestLogsAsync(string in0, string in1, int in2, int in3, int in4) {
            return base.Channel.getWorkflowRequestLogsAsync(in0, in1, in2, in3, in4);
        }
        
        public bool deleteRequest(int in0, int in1) {
            return base.Channel.deleteRequest(in0, in1);
        }
        
        public System.Threading.Tasks.Task<bool> deleteRequestAsync(int in0, int in1) {
            return base.Channel.deleteRequestAsync(in0, in1);
        }
        
        public Appapi.OAServiceReference.ArrayOfString getCCWorkflowRequestList(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getCCWorkflowRequestList(in0, in1, in2, in3, in4);
        }
        
        public System.Threading.Tasks.Task<Appapi.OAServiceReference.ArrayOfString> getCCWorkflowRequestListAsync(int in0, int in1, int in2, int in3, Appapi.OAServiceReference.ArrayOfString in4) {
            return base.Channel.getCCWorkflowRequestListAsync(in0, in1, in2, in3, in4);
        }
        
        public string getUserId(string in0, string in1) {
            return base.Channel.getUserId(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> getUserIdAsync(string in0, string in1) {
            return base.Channel.getUserIdAsync(in0, in1);
        }
    }
}
