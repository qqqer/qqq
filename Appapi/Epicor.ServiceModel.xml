<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.ServiceModel</name>
    </assembly>
    <members>
        <member name="T:Ice.Bpm.Context.ContextDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.BpmDataDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.CallStackDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.CallStateDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.ClientDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.ClientHandlerDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.InfoMessageDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.BpmDataRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.CallStackRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.CallStateRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.ClientRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.ClientHandlerRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.InfoMessageRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.BpmDataRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.CallStackRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.CallStateRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.ClientRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.ClientHandlerRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Ice.Bpm.Context.ContextDataSet.InfoMessageRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Ice.Bpm.InfoMessage">
            <summary>
            The structure describes an informational message (or grouped set of messages) sent from service to client
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.MessageItem.Text">
            <summary>
            Gets or sets the Message Text
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.MessageItem.MessageType">
            <summary>
            Gets the MessageSeverity enum 
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.BO">
            <summary>
            Gets or sets the BO Name
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.Method">
            <summary>
            Gets or sets the BO Method name
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.User">
            <summary>
            Gets or sets the User name
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.Company">
            <summary>
            Gets or sets the Company name
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.Plant">
            <summary>
            Gets or sets the Plant name
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.Version">
            <summary>
            Gets or sets the version of the Message
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.ItemsDisplayMode">
            <summary>
            Gets the MessageDisplayMode enum 
            </summary>
        </member>
        <member name="P:Ice.Bpm.InfoMessage.MessageItems">
            <summary>
            Gets or sets the instance of the Message object
            </summary>
        </member>
        <member name="M:Ice.Bpm.InfoMessage.GetMessageTable">
            <summary>
            Get the DataTable representing the collection of Messages
            </summary>
        </member>
        <member name="M:Ice.Bpm.InfoMessage.ToString">
            <summary>
            Gets the Info Message text
            </summary>
            <returns>The Info Message text</returns>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ButtonValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character11">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character12">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character13">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character14">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character15">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character16">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character17">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character18">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character19">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Character20">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number11">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number12">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number13">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number14">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number15">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number16">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number17">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number18">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number19">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Number20">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Date10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.Checkbox10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.ShortChar10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.SysRowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.RowMod">
            <summary>
            RowMod
            </summary>
        </member>
        <member name="P:Ice.Tablesets.BpmDataRow.SpecifiedProperties">
            <summary>
            SpecifiedProperties
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStackRow.FullMethodName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStackRow.LevelType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStackRow.SysRowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStackRow.RowMod">
            <summary>
            RowMod
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStackRow.SpecifiedProperties">
            <summary>
            SpecifiedProperties
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStateRow.StateId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStateRow.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStateRow.SysRowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStateRow.RowMod">
            <summary>
            RowMod
            </summary>
        </member>
        <member name="P:Ice.Tablesets.CallStateRow.SpecifiedProperties">
            <summary>
            SpecifiedProperties
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.ClientType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.ProcessId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.AssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.CustomizationId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.CurrentUserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.CurrentCompany">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.CurrentPlant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.CGCCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.SysRowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.RowMod">
            <summary>
            RowMod
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientRow.SpecifiedProperties">
            <summary>
            SpecifiedProperties
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientHandlerRow.HandlerId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientHandlerRow.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientHandlerRow.ClientFeedback">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientHandlerRow.SysRowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientHandlerRow.RowMod">
            <summary>
            RowMod
            </summary>
        </member>
        <member name="P:Ice.Tablesets.ClientHandlerRow.SpecifiedProperties">
            <summary>
            SpecifiedProperties
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.BO">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.UserIdent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.Company">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.Plant">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.DisplayMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.Severity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.MessageText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.SysRowID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.RowMod">
            <summary>
            RowMod
            </summary>
        </member>
        <member name="P:Ice.Tablesets.InfoMessageRow.SpecifiedProperties">
            <summary>
            SpecifiedProperties
            </summary>
        </member>
        <member name="T:Ice.Lib.ScopedEncryptionProvider">
            <summary>
            Encrypt data for a given scope (user or machine).
            </summary>
        </member>
        <member name="T:Ice.Lib.Deployment.CompositeAssemblyRetriever">
            <summary>
            Retrieves assemblies trying any number of <see cref="T:Ice.Lib.Deployment.IAssemblyRetriever"/>s until one works.
            </summary>
            <remarks>
            The <see cref="T:Ice.Lib.Deployment.IAssemblyRetriever"/>s are registered in the constructor.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeAssemblyRetriever.#ctor(Ice.Lib.Deployment.IAssemblyRetriever[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.CompositeAssemblyRetriever"/> class.
            </summary>
            <param name="assemblyRetrievers">The assembly retrievers.</param>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeAssemblyRetriever.#ctor(System.Collections.Generic.IEnumerable{Ice.Lib.Deployment.IAssemblyRetriever})">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.CompositeAssemblyRetriever"/> class.
            </summary>
            <param name="assemblyRetrievers">The assembly retrievers.</param>
        </member>
        <member name="P:Ice.Lib.Deployment.CompositeAssemblyRetriever.AssemblyRetrievers">
            <summary>
            Gets the assembly retrievers.
            </summary>
            <value>The assembly retrievers.</value>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeAssemblyRetriever.BuildSimpleOrCompositeAssemblyRetriever(System.Collections.Generic.IEnumerable{Ice.Lib.Deployment.IAssemblyRetriever})">
            <summary>
            Builds the simple or <see cref="T:Ice.Lib.Deployment.CompositeAssemblyRetriever"/>.
            </summary>
            <param name="retrievers">The retrievers.</param>
            <returns>The retriever.</returns>
            <remarks>
            Different kinds of retrievers are returned based on the number of retrievers passed in. If none are passed in
            then <c>null</c> is returned. If one is passed in then that retriever is returned. If more than one is passed
            in then a new <see cref="T:Ice.Lib.Deployment.CompositeAssemblyRetriever"/> is returned.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeAssemblyRetriever.RetrieveAssembly(System.String)">
            <summary>
            Retrieves the assembly.
            </summary>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns>
            The assembly if found, <c>null</c> otherwise.
            </returns>
            <remarks>
            Tries each registered <see cref="T:Ice.Lib.Deployment.IAssemblyRetriever"/> until the assembly is retrieved, an exception is thrown,
            or there are no more IAssemblyRetriever's.
            </remarks>
        </member>
        <member name="T:Ice.Lib.Deployment.FileNameBasedAssemblyRetriever">
            <summary>
            Retrieves an assembly from the file system.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.FileNameBasedAssemblyRetriever.AssemblyReflectorTag">
            <summary>
            The name of the trace and the default category.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.FileNameBasedAssemblyRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.FileNameBasedAssemblyRetriever"/> class.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.FileNameBasedAssemblyRetriever.FileNamesToTry(System.String)">
            <summary>
            Enumerates the file names to try when the specified name is ambigous.
            </summary>
            <param name="assemblyFileName">The name of the assembly file. Possibly without the extension.</param>
            <returns>The file names to try.</returns>
            <remarks>
            If the <paramref name="assemblyFileName"/> doesn't have the a .dll or .exe extension then the file name with
            each of those extensions is returned. If it does have a valid extension then the specified file name is returned.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.FileNameBasedAssemblyRetriever.HasAssemblyExtension(System.String)">
            <summary>
            Determines whether file name has a .dll or .exe extension.
            </summary>
            <param name="assemblyFileName">The name of the assembly file.</param>
            <returns><c>true</c> if the file name has a .dll or .exe extension.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.FileNameBasedAssemblyRetriever.RetrieveAssembly(System.String)">
            <summary>
            Retrieves the assembly.
            </summary>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns>
            The assembly if found, <c>null</c> otherwise.
            </returns>
            <remarks>
            The <paramref name="assemblyIdentifier"/> should be a file name. The extension and path are optional. If the
            extention is not .dll or .exe then .dll and .exe are tried.
            </remarks>
        </member>
        <member name="T:Ice.Lib.Deployment.IAssemblyRetriever">
            <summary>
            Provides a mechanism for finding and loading an <see cref="T:System.Reflection.Assembly"/> by an identifier.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.IAssemblyRetriever.RetrieveAssembly(System.String)">
            <summary>
            Retrieves the assembly.
            </summary>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns>The assembly if found, <c>null</c> otherwise.</returns>
            <remarks>
            The identifier depends on how the assembly is being retrieved. Usually it will be a file name or a menu identifier.
            </remarks>
        </member>
        <member name="T:Ice.Lib.Deployment.LocalDirectoryAssemblyRetriever">
            <summary>
            Scans the local directory and loads the assembly if it is found.
            </summary>
            <remarks>
            If the assembly identifier has a path then no processing is done.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.LocalDirectoryAssemblyRetriever.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.LocalDirectoryAssemblyRetriever"/> class.
            </summary>
            <param name="searchDirectory">The search directory.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="searchDirectory"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="searchDirectory"/> is an empty string.</exception>
        </member>
        <member name="P:Ice.Lib.Deployment.LocalDirectoryAssemblyRetriever.SearchDirectory">
            <summary>
            Gets the search directory.
            </summary>
            <value>The search directory.</value>
        </member>
        <member name="M:Ice.Lib.Deployment.LocalDirectoryAssemblyRetriever.RetrieveAssembly(System.String)">
            <summary>
            Retrieves the assembly.
            </summary>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns>The assembly if found, <c>null</c> otherwise.</returns>
            <remarks>
            The identifier should be the file name without the path. If there isn't a .dll or .exe, both are tried.
            </remarks>
        </member>
        <member name="T:Ice.Lib.Plugins.IPluginBase">
            <summary>
            Represents the IPluginBase
            </summary>
        </member>
        <member name="P:Ice.Lib.Plugins.IPluginBase.ProductCode">
            <summary>
            Gets or sets the product code for the Plugin
            </summary>
        </member>
        <member name="T:Ice.Lib.Plugins.IPluginData">
            <summary>
            Represents the IPluginData
            </summary>
        </member>
        <member name="P:Ice.Lib.Plugins.IPluginData.PropertyName">
            <summary>
            Gets the Property Name for the Plugin
            </summary>
        </member>
        <member name="T:Ice.Lib.Plugins.PluginBase">
            <summary>
            Represents the PluginBase class
            </summary>
        </member>
        <member name="P:Ice.Lib.Plugins.PluginBase.ProductCode">
            <summary>
            Gets the ProductCode for the instance of the <see cref="T:Ice.Lib.Plugins.PluginBase"/>.
            </summary>
        </member>
        <member name="M:Ice.Lib.Plugins.PluginBase.OnPluginStarted">
            <summary>
            Occurs when the Plugin is started
            </summary>
        </member>
        <member name="T:Ice.Common.BusinessObjectException">
            <summary>
            Represents a business object exception.
            </summary>
        </member>
        <member name="P:Ice.Common.BusinessObjectException.Title">
            <summary>
            For Title display in exception box
            </summary>
        </member>
        <member name="P:Ice.Common.BusinessObjectException.Header">
            <summary>
            For Header display in exception box
            </summary>
        </member>
        <member name="T:Ice.Common.BusinessObjectMessage">
            <summary>
            Summary description for BOMessage.
            </summary>
        </member>
        <member name="T:Ice.Common.BusinessObjectMessageType">
            <summary>
            The BusinessObjectMessageType enum maps to Progress message type
            </summary>
        </member>
        <member name="T:Ice.Common.ConversionsPendingException">
            <summary>
            Represents a server exception.
            </summary>
        </member>
        <member name="T:Ice.Common.ConversionsPendingException.UserState">
            <summary>
            The login user state
            </summary>
        </member>
        <member name="M:Ice.Common.ConversionsPendingException.#ctor(Ice.Common.ConversionsPendingException.UserState)">
            <summary>
            Creates a new instance of ConversionsPendingException
            </summary>
            <param name="userState">login user state</param>
        </member>
        <member name="M:Ice.Common.ConversionsPendingException.#ctor(System.String)">
            <summary>
            Creates a new instance of ConversionsPendingException
            </summary>
            <param name="message">The Exception message</param>
        </member>
        <member name="M:Ice.Common.ConversionsPendingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of ConversionsPendingException
            </summary>
            <param name="message">The Exception message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="P:Ice.Common.ConversionsPendingException.CurrentUserState">
            <summary>
            Gets the current user state
            </summary>
        </member>
        <member name="M:Ice.Common.ConversionsPendingException.init(Ice.Common.ConversionsPendingException.UserState,System.String,System.Exception,System.Boolean)">
            <summary>
            initialize the ConversionsPendingException
            </summary>
            <param name="userState"></param>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="createMessage"></param>
        </member>
        <member name="M:Ice.Common.ConversionsPendingException.GetState(System.String)">
            <summary>
            get the current user state from the exception message
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Ice.Common.ConversionsPendingExceptionSM">
            <summary>
            Represents a server exception.
            </summary>
        </member>
        <member name="M:Ice.Common.ConversionsPendingExceptionSM.#ctor">
            <summary>
            Creates a new instance of ConversionsPendingExceptionSM
            </summary>
        </member>
        <member name="M:Ice.Common.ConversionsPendingExceptionSM.#ctor(System.String)">
            <summary>
            Creates a new instance of ConversionsPendingExceptionSM
            </summary>
            <param name="message">The Exception message</param>
        </member>
        <member name="M:Ice.Common.ConversionsPendingExceptionSM.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of ConversionsPendingExceptionSM
            </summary>
            <param name="message">The Exception message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ice.Common.ConversionsPendingExceptionSM.init(System.String,System.Exception,System.Boolean)">
            <summary>
            initialize the ConversionsPendingExceptionSM
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="createMessage"></param>
        </member>
        <member name="T:Ice.Common.DBMismatchException">
            <summary>
            Represents a DBMismatch exception.
            </summary>
        </member>
        <member name="M:Ice.Common.DBMismatchException.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of DBMismatchException
            </summary>
        </member>
        <member name="T:Ice.Common.DBMismatchMessage">
            <summary>
            Summary description for DBMismatchMessage.
            </summary>
        </member>
        <member name="T:Ice.Common.DBMismatchException2">
            <summary>
            Represents a DBMismatch exception.
            </summary>
        </member>
        <member name="M:Ice.Common.DBMismatchException2.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of DBMismatchException
            </summary>
        </member>
        <member name="T:Ice.Common.DBMismatchMessage2">
            <summary>
            Summary description for DBMismatchMessage.
            </summary>
        </member>
        <member name="T:Ice.Common.DBMismatchExceptionUser">
            <summary>
            Represents a DBMismatch exception.
            </summary>
        </member>
        <member name="M:Ice.Common.DBMismatchExceptionUser.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of DBMismatchException
            </summary>
        </member>
        <member name="T:Ice.Common.DBMismatchMessageUser">
            <summary>
            Summary description for DBMismatchMessage.
            </summary>
        </member>
        <member name="T:Ice.Common.DuplicateRecordException">
            <summary>
            Represents a Duplicate Record Business object exception.
            </summary>
        </member>
        <member name="P:Ice.Common.DuplicateRecordException.Title">
            <summary>
            For title display in exception box
            </summary>
        </member>
        <member name="T:Ice.Common.EpicorExceptionData">
            <summary>
            The standard data class passes in an exception message
            </summary>
        </member>
        <member name="T:Ice.Common.EpicorFaultDetail">
            <summary>
            This class is by Server to pass Exception information to the client. Contains detail data and exception Type
            </summary>
        </member>
        <member name="P:Ice.Common.EpicorFaultDetail.DataList">
            <summary>
            The list of EpicorExceptionData entries
            </summary>
        </member>
        <member name="P:Ice.Common.EpicorFaultDetail.ExceptionKindValue">
            <summary>
            Exception Kind Value
            </summary>
        </member>
        <member name="P:Ice.Common.EpicorFaultDetail.Message">
            <summary>
            Exception Message
            </summary>
        </member>
        <member name="M:Ice.Common.EpicorFaultDetail.GetExceptionType">
            <summary>
            Get exception type
            </summary>
            <returns>Exception type</returns>
        </member>
        <member name="M:Ice.Common.EpicorFaultDetail.GetExceptionInstance">
            <summary>
            Get exception instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ice.Common.EpicorFaultDetail.SetExceptionKind``1(``0)">
            <summary>
            Sets the kind of the exception - must be from some enumeration
            </summary>
            <typeparam name="T">Enumeration Type</typeparam>
            <param name="val">Enamuration value</param>
        </member>
        <member name="M:Ice.Common.EpicorFaultDetail.GetExceptionKind``1">
            <summary>
            Get Typed Exception Kind
            </summary>
            <typeparam name="T">Type of enumeration</typeparam>
            <returns>Typed enumeration value</returns>
        </member>
        <member name="M:Ice.Common.EpicorFaultDetail.GetExceptionKind">
            <summary>
            Get Exception Kind
            </summary>
            <returns>Exception kind (must be enumeration)</returns>
        </member>
        <member name="M:Ice.Common.EpicorFaultDetail.FixStackTrace(System.Exception)">
            <summary>
            Restore stack lost in GetExceptionInstance
            </summary>
            <param name="ex">Exception created in GetExceptionInstance</param>
        </member>
        <member name="T:Ice.Common.EpicorServerException">
            <summary>
            Represents a server exception.
            </summary>
        </member>
        <member name="T:Ice.Common.EpicorServerFault">
            <summary>
            A FaultException holding EpicorFaultDetail which will be delivered to the client contract
            This is FaultException to be used from server side only at global error handler to communicate
            the error details.
            </summary>
        </member>
        <member name="T:Ice.Common.EpicorServerMessage">
            <summary>
            Server Message held in EpicorServerException
            </summary>
        </member>
        <member name="T:Ice.Common.IEpicorException">
            <summary>
            Public interface for EpicorException
            </summary>
        </member>
        <member name="T:Ice.Common.EpicorTemplateExceptionBase">
            <summary>
            Base abstract class for EpicorTemplateException
            </summary>
        </member>
        <member name="M:Ice.Common.EpicorTemplateExceptionBase.ToString">
            <summary>
            Returns Full Text implemented by Server Exception types
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ice.Common.EpicorTemplateException`3">
            <summary>
            Represents a server exception template. Based on three templates: Message class, Exception Enumeration, Exception Data class
            </summary>
        </member>
        <member name="P:Ice.Common.EpicorTemplateException`3.ExceptionType">
            <summary>
            Exception Type (Kind). Enumeration
            </summary>
        </member>
        <member name="P:Ice.Common.EpicorTemplateException`3.ExceptionMessageList">
            <summary>
            Exception Message class List
            </summary>
        </member>
        <member name="M:Ice.Common.EpicorTemplateException`3.GetMessageDataList">
            <summary>
            Returns collection of objects representing message data. Used internally for ExceptionBox
            </summary>
            <returns>List of data objects</returns>
        </member>
        <member name="P:Ice.Common.EpicorTemplateException`3.Title">
            <summary>
            Title for ExceptionBox
            </summary>
        </member>
        <member name="P:Ice.Common.EpicorTemplateException`3.Header">
            <summary>
            Header for ExceptionBox
            </summary>
        </member>
        <member name="M:Ice.Common.EpicorTemplateException`3.CopyFromData(Ice.Common.EpicorFaultDetail)">
            <summary>
            Copies FaultDetail into this exception. These need not be implemented in Exceptions that hold 
            Messages with EpicorExceptionData
            </summary>
            <param name="faultDetail">FaultDetail from which data is copied</param>
        </member>
        <member name="M:Ice.Common.EpicorTemplateException`3.CopyToData(Ice.Common.EpicorFaultDetail@)">
            <summary>
            Copies exception info to FaultDetail. These need not be implemented in Exceptions that hold 
            Messages with EpicorExceptionData
            </summary>
            <param name="faultDetail">FaultDetail to which data is copied</param>
        </member>
        <member name="M:Ice.Common.EpicorTemplateException`3.GetFullText">
            <summary>
            Returns Full Exception Text containing Title, Header and each message full text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ice.Common.EpicorTemplateException`3.GetMessageText">
            <summary>
            Returns Summary Exception Text message text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ice.Common.EpicorTemplateException`3.StartCopyFromData(Ice.Common.EpicorFaultDetail)">
            <summary>
            Internal use only. Launches the CopyFromData()
            </summary>
            <param name="faultDetail">EpicorFaultDetail</param>
        </member>
        <member name="M:Ice.Common.EpicorTemplateException`3.StartCopyToData(System.Exception,Ice.Common.EpicorFaultDetail@)">
            <summary>
            Internal use only. Launches the CopyToData()
            </summary>
        </member>
        <member name="T:Ice.Common.EpicorTemplateMessage`2">
            <summary>
            Most generic exception message where Message and Data being templates
            </summary>
            <typeparam name="TExceptionMessage"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Ice.Common.EpicorTemplateMessage`2.Data">
            <summary>
            The Message Data
            </summary>
        </member>
        <member name="M:Ice.Common.EpicorTemplateMessage`2.GetData">
            <summary>
            Internal use - returns data as object. Otherwise use Data property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ice.Common.EpicorTemplateMessage`2.SetData(System.Object)">
            <summary>
            Internal use - sets data from object. Otherwise use Data property
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="T:Ice.Common.EpicorTemplateMessage`1">
            <summary>
            This is standard template for exception message with EpicorExceptionData used as TData
            </summary>
            <typeparam name="TExceptionMessage">TemplateMessage</typeparam>
        </member>
        <member name="M:Ice.Common.EpicorTemplateMessage`1.GetFullText">
            <summary>
            Provide full text of this message details
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ice.Common.EpicorTemplateMessage`1.SetData(System.Object)">
            <summary>
            Internal use - sets data from object. Otherwise use Data property
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="T:Ice.Common.ExceptionExcludeTraceAttribute">
            <summary>
            This attribute is placed on class if the method of this class throwing BusinessObjectException
            should not be listed as source method in BusinessObjectMessage
            </summary>
        </member>
        <member name="M:Ice.Common.ExceptionFunctions.GetExceptionFromFault(System.ServiceModel.FaultException{Ice.Common.EpicorFaultDetail})">
            <summary>
            Create an application exception based on Fault. Copies data from EpicorFaultDetail
            </summary>
            <param name="faultEx">FaultException</param>
            <returns>Exception</returns>
        </member>
        <member name="M:Ice.Common.ExceptionFunctions.GetExceptionFromFault(System.ServiceModel.FaultException{Ice.Common.EpicorFaultDetail},System.Data.DataSet[])">
            <summary>
            Create an application exception based on Fault. Copies data from EpicorFaultDetail. Set error state to Dataset
            </summary>
            <param name="ex"></param>
            <param name="dataSets">datasets</param>
            <returns>Exception</returns>
        </member>
        <member name="M:Ice.Common.ExceptionFunctions.GetFaultFromException(System.Exception)">
            <summary>
            Create EpicorServerFault from Exception
            </summary>
            <param name="ex">Exception</param>
            <returns>EpicorServerFault</returns>
        </member>
        <member name="M:Ice.Common.ExceptionFunctions.GetTraceInfo(System.Exception)">
            <summary>
            Collect Trace Information into EpicorExceptionData structure
            </summary>
            <param name="ex">Exception - can be null, then current trace is used</param>
            <returns></returns>
        </member>
        <member name="M:Ice.Common.ExceptionFunctions.SetErrorsToDataset(System.Exception,System.Data.DataSet)">
            <summary>
            Sets row/column errors to dataset based on existing exception data
            </summary>
            <param name="ex">Exception</param>
            <param name="ds">Dataset</param>
        </member>
        <member name="M:Ice.Common.ExceptionFunctions.AddItemToText(System.Text.StringBuilder@,System.String,System.String)">
            <summary>
            Used to build up cummulitive FullText of exception details
            </summary>
            <param name="text">current text</param>
            <param name="caption">caption</param>
            <param name="value">value</param>
        </member>
        <member name="T:Ice.Common.RecordNotFoundException">
            <summary>
            Represents a Record Not Found business object exception.
            </summary>
        </member>
        <member name="P:Ice.Common.RecordNotFoundException.Title">
            <summary>
            For title display in exception box
            </summary>
        </member>
        <member name="T:Ice.Common.ServerExceptionType">
            <summary>
            Classifies Exceptions in EpicorServerMessage
            </summary>
        </member>
        <member name="T:Ice.Common.VersionMismatchException">
            <summary>
            Represents a VersionMismatch exception.
            </summary>
        </member>
        <member name="M:Ice.Common.VersionMismatchException.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of VersionMismatchException
            </summary>
        </member>
        <member name="T:Ice.Common.VersionMismatchMessage">
            <summary>
            Summary description for VersionMismatchMessage.
            </summary>
        </member>
        <member name="T:Ice.ExtendedData.ExtendedColumn">
            <summary>
            Serializable Column Passed between client/server
            </summary>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.ExtendedIceColumns(Ice.IIceTable)">
            <summary>
            Return IceColumn Collection of extended columns
            </summary>
            <param name="iceTable">IceTable</param>
            <returns>IceColumnCollection</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.HasExtendedTable(Ice.IIceTable)">
            <summary>
            Do we have an extended table for this table
            </summary>
            <param name="table">Table</param>
            <returns>True if we have extended table</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.HasExtendedTable(Epicor.Data.ILinqRow)">
            <summary>
            Do we have an extended table for this row
            </summary>
            <param name="row">row</param>
            <returns>True if we have extended table</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.HasExtendedTable(Ice.IceRow)">
            <summary>
            Do we have an extended table for this row
            </summary>
            <param name="row">row</param>
            <returns>True if we have extended table</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.SerializeExtendedTable(Ice.IIceTable,System.IO.Stream)">
            <summary>
            Serialize Extended Table columns. First Serialize number of columns. If less than 1 columns
            then do not serialize array of columns at all.
            </summary>
            <returns>Number of columns</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.DynamicColumnValues(Ice.IDynamicColumnValues)">
            <summary>
            Get Dynamic Column Values from IceRow/LinqRow
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.IsSpecifiedExtended(Ice.IDynamicColumnValues,System.String)">
            <summary>
            Return if column is specified in extended data row
            </summary>
            <param name="row">row with extended data (IceRow/LinqRow)</param>
            <param name="columnName">Column Name</param>
            <returns>True if specified</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.GetIceColumnsWithExtended(Ice.IIceTable)">
            <summary>
            Get standard columns and also extended columns
            </summary>
            <param name="iceTable">IceTable</param>
            <returns>IceColumnCollection</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataExtensions.ExtendedRevisionEqual(Epicor.Data.IRow,Epicor.Data.ILinqRow)">
            <summary>
            Compare Extended data revision (UD_SysRevID) between input row (IceRow/LinqRow) and database row
            </summary>
            <param name="tempRow">input row</param>
            <param name="databaseRow">database row</param>
            <returns>true if matched</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataManager.HasExtendedTable(Ice.IIceTable)">
            <summary>
            Do we have an extended table for this table
            </summary>
            <param name="table">IceTable</param>
            <returns>True if extended table exists</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedDataManager.AddExtendedDataColumns(Ice.ExtendedData.IIceExtendedTable,System.Data.DataTable)">
            <summary>
            Add DataColumns in destination DataTable for ExtendedColumns passed in IceTable
            </summary>
            <param name="iceExtendedTable">The ICE extended table.</param>
            <param name="destinationTable">The destination table.</param>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedTable.GetExtendedTableNameFromBase(System.String)">
            <summary>
            Returns the user defined table name for the specified base table name.
            </summary>
            <param name="baseTableName">The base table name, such as Tip.</param>
            <returns>The user defined table name, such as "Tip_UD".</returns>
        </member>
        <member name="M:Ice.ExtendedData.ExtendedTable.GetBaseTableName(System.String)">
            <summary>
            Returns the base table name for the specified user defined table name.
            </summary>
            <param name="userTableName">The user defined table name, such as Tip_UD.</param>
            <returns>The base table name, such as "Tip".</returns>
        </member>
        <member name="T:Ice.ExtendedData.UserDefinedColumnList">
            <summary>
            This collection is used to expose extended data in Services
            </summary>
        </member>
        <member name="T:Ice.License.LicenseType">
            <summary>
            The valid license types.
            </summary>
        </member>
        <member name="F:Ice.License.LicenseType.Default">
            <summary>A default license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.WebService">
            <summary>A web service license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.WebServiceShared">
            <summary>A shared web service license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.EnterpriseProcessing">
            <summary>An enterprise processing license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.DataAdministration">
            <summary>A data administration license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.MobileFramework">
            <summary>A Mobile Framework license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.GlobalUser">
            <summary>A global user license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.DataCollection">
            <summary>A data collection license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.SupplierConnect">
            <summary>A Supplier Connect license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.CustomerConnect">
            <summary>A Customer Connect license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.CRM">
            <summary>A CRM license.</summary>
        </member>
        <member name="F:Ice.License.LicenseType.TimeExpense">
            <summary>A Time and Expense license.</summary>
        </member>
        <member name="T:Ice.License.Edition">
            <summary>
            The editions of the product.
            </summary>
        </member>
        <member name="F:Ice.License.Edition.IceExtend">
            <summary>The extend edition of the product.</summary>
        </member>
        <member name="F:Ice.License.Edition.Express">
            <summary>The express version of the product.</summary>
        </member>
        <member name="F:Ice.License.Edition.Standard">
            <summary>The standard version of the product.</summary>
        </member>
        <member name="F:Ice.License.Edition.Enterprise">
            <summary>The enterprise version of the product.</summary>
        </member>
        <member name="T:Ice.License.LicensableModules">
            <summary>
            Licensable Modules are flags to describe if a feature is licensed or enabled
            </summary>
        </member>
        <member name="F:Ice.License.LicensableModules.Productization">
            <summary>
            Allows internal Epicor developer to set records with a System Flag
            </summary>
        </member>
        <member name="F:Ice.License.LicensableModules.AdvancePrinting">
            <summary>
            Licensed module for Advance Printing (Routing and Breaking)
            </summary>
        </member>
        <member name="F:Ice.License.LicensableModules.AdvancePrintArchiving">
            <summary>
            Licensed module for Attachments support in Advance Printing (Routing and Breaking)
            </summary>
        </member>
        <member name="F:Ice.License.LicensableModules.ElectronicCompliance">
            <summary>
             Licensed module for the electronic compliance reporting
            </summary>
        </member>
        <member name="T:Ice.License.LicensableUserCounts">
            <summary>
            Licensable User Counts are types of sessions that are restricted in some way.
            </summary>
        </member>
        <member name="T:Ice.License.SessionTypes">
            <summary>
            The 'free' (Max Limit) session types that are not counted against the license limits???
            </summary>
        </member>
        <member name="T:Ice.BOUpdErrorDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Ice.BOUpdErrorDataSet.BOUpdErrorDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Ice.BOUpdErrorDataSet.BOUpdErrorRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Ice.BOUpdErrorDataSet.BOUpdErrorRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Ice.DataRowIceColumn">
            <summary>
            An <see cref="T:Ice.IceColumn" /> for a <see cref="T:System.Data.DataColumn"/>.
            </summary>
        </member>
        <member name="M:Ice.DataRowIceColumn.#ctor(System.Data.DataColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.DataRowIceColumn" /> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="P:Ice.DataRowIceColumn.HasGetter">
            <summary>
            Gets a value indicating whether this column's value can be retrieved.
            </summary>
            <value>
              <c>true</c> if this column's value can be retrieved.
            </value>
            <remarks>
            <see cref="T:System.Data.DataColumn"/>s can always be set so this is always <c>true</c>.
            </remarks>
        </member>
        <member name="P:Ice.DataRowIceColumn.HasSetter">
            <summary>
            Gets a value indicating whether this column's value can be set.
            </summary>
            <value>
              <c>true</c> if this this column's value can be set.
            </value>
        </member>
        <member name="P:Ice.DataRowIceColumn.IsMangledColumnName">
            <summary>
            Gets a value indicating whether this column name is mangled.
            </summary>
            <value>
            Always <c>false</c>.
            </value>
            <remarks>
            Column names never have to be mangled for <see cref="T:System.Data.DataColumn"/>s so this is always <c>false</c>.
            </remarks>
        </member>
        <member name="M:Ice.DataRowIceColumn.GetValue(System.Object)">
            <summary>
            Gets the column's value.
            </summary>
            <param name="row">The row.</param>
            <returns>
            The column's value.
            </returns>
        </member>
        <member name="M:Ice.DataRowIceColumn.SetValue``1(System.Object,``0)">
            <summary>
            Sets the column's value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ice.DataRowIceColumn.BuildGetterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which gets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <returns>
            An expression which gets the column value from the specified row.
            </returns>
        </member>
        <member name="M:Ice.DataRowIceColumn.BuildSetterExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which sets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>
            An expression which sets the column value for the specified row.
            </returns>
        </member>
        <member name="T:Ice.DynamicColumnValues">
            <summary>
            Holds values for columns that can be dynamically added to a row.
            </summary>
            <remarks>
            Values are stored as <see cref="T:System.Object"/>s. Column names are case insensitive. Any number of values can be added
            but no performance tuning was done against large numbers of columns.
            </remarks>
        </member>
        <member name="M:Ice.DynamicColumnValues.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.DynamicColumnValues" /> class.
            </summary>
        </member>
        <member name="P:Ice.DynamicColumnValues.IsModified">
            <summary>
            Have the values been modified
            </summary>
        </member>
        <member name="M:Ice.DynamicColumnValues.IsSpecified(System.String)">
            <summary>
            Returns true if the column value has been set. This nethod can be used to distinguish between null returned by column
            accessor when column is missing or a null that has been set
            </summary>
            <param name="columnName">Column Name</param>
            <returns>True if specified</returns>
        </member>
        <member name="M:Ice.DynamicColumnValues.SetUnspecified(System.String)">
            <summary>
            Clear the IsSpecifid flag
            </summary>
            <param name="columnName">Column Name</param>
        </member>
        <member name="M:Ice.DynamicColumnValues.IsDefined(System.String)">
            <summary>
            Has the column been defined
            </summary>
            <param name="columnName">Column Name</param>
            <returns></returns>
        </member>
        <member name="P:Ice.DynamicColumnValues.Item(System.String)">
            <summary>
            Gets or sets the column value.
            </summary>
            <value>
            The column value.
            </value>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="P:Ice.DynamicColumnValues.ColumnValuesList">
            <summary>
            Return List of Dynamic Column Values
            </summary>
        </member>
        <member name="P:Ice.DynamicColumnValues.ColumnAttributeList">
            <summary>
            Return List of Dynamic Column Attributes
            </summary>
        </member>
        <member name="M:Ice.DynamicColumnValues.GetDynamicValueOrIceColumnValue(Ice.IDynamicColumnValues,System.String)">
            <summary>
            Internal use only. Gets the dynamic column value or IceColumn value.
            </summary>
            <param name="row">The row.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The column value.</returns>
        </member>
        <member name="M:Ice.DynamicColumnValues.GetValue(Ice.IDynamicColumnValues,System.String)">
            <summary>
            Gets the column value.
            </summary>
            <param name="row">The row.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The column value.</returns>
        </member>
        <member name="M:Ice.DynamicColumnValues.SetValue``1(Ice.IDynamicColumnValues,System.String,``0)">
            <summary>
            Sets the column value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="row">The row.</param>
            <param name="columnName">Name of the column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ice.DynamicColumnValues.SetIceColumnValueOrDynamicValue(Ice.IDynamicColumnValues,System.String,System.Object)">
            <summary>
            Internal use only. Sets the IceColumn value or dynamic column value.
            </summary>
            <param name="row">The row.</param>
            <param name="columnName">Name of the column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ice.DynamicColumnValues.TryGetValue(Ice.IDynamicColumnValues,System.String,System.Object@)">
            <summary>
            Tries to get the column value.
            </summary>
            <param name="row">The row.</param>
            <param name="columnName">Name of the column.</param>
            <param name="value">The column value.</param>
            <returns><c>true</c> if the column exists.</returns>
        </member>
        <member name="M:Ice.DynamicColumnValues.CopyOriginalColumnValues(Ice.IDynamicColumnValues)">
            <summary>
            This method will be used by BufferCopy to copy dynamic values from one row to another
            </summary>
        </member>
        <member name="M:Ice.DynamicColumnValues.Copy(System.Object,System.Object)">
            <summary>
            This method will be used by BufferCopy to copy dynamic values from one row to another
            </summary>
            <param name="sourceRow">Source Row Object</param>
            <param name="targetRow">Target Row Object</param>
        </member>
        <member name="M:Ice.DynamicColumnValues.CopyExceptForList(System.Object,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            This method will be used by BufferCopy to copy dynamic values from one row to another
            </summary>
            <param name="sourceRow">Source Row Object</param>
            <param name="targetRow">Target Row Object</param>
            <param name="listExceptFor">List of excluded columns</param>
        </member>
        <member name="M:Ice.DynamicColumnValues.CopyExceptFor(System.Object,System.Object,System.Func{System.String,System.Boolean})">
            <summary>
            This method will be used by BufferCopy to copy dynamic values from one row to another
            </summary>
            <param name="sourceRow">Source Row Object</param>
            <param name="targetRow">Target Row Object</param>
            <param name="filter">Filtering Function</param>
        </member>
        <member name="T:Ice.DynamicIceColumn">
            <summary>
            An <see cref="T:Ice.IceColumn"/> for a dynamic column.
            </summary>
        </member>
        <member name="M:Ice.DynamicIceColumn.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.DynamicIceColumn" /> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data.</param>
            <remarks>
            This column will be a "dynamic" column that can be used in <see cref="T:Epicor.Data.TempRowBase" /> and <c>LinqRow</c>s.
            </remarks>
        </member>
        <member name="P:Ice.DynamicIceColumn.HasGetter">
            <summary>
            Gets a value indicating whether this column's value can be retrieved.
            </summary>
            <value>
            <c>true</c> if this column's value can be retrieved.
            </value>
        </member>
        <member name="P:Ice.DynamicIceColumn.HasSetter">
            <summary>
            Gets a value indicating whether this column's value can be set.
            </summary>
            <value>
            <c>true</c> if this this column's value can be set.
            </value>
        </member>
        <member name="P:Ice.DynamicIceColumn.IsMangledColumnName">
            <summary>
            Gets a value indicating whether this column name is mangled.
            </summary>
            <value>Always <c>false</c>.</value>
            <remarks>
            Dynamic column names don't need to be mangled so this is always <c>false</c>.
            </remarks>
        </member>
        <member name="P:Ice.DynamicIceColumn.IsDynamic">
            <summary>
            Is the column Dynamic. Always true for this class.
            </summary>
        </member>
        <member name="M:Ice.DynamicIceColumn.GetValue(System.Object)">
            <summary>
            Gets the column's value.
            </summary>
            <param name="row">The row.</param>
            <returns>The column's value.</returns>
        </member>
        <member name="M:Ice.DynamicIceColumn.SetValue``1(System.Object,``0)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ice.DynamicIceColumn.BuildGetterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which gets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <returns>An expression which gets the column value from the specified row.</returns>
        </member>
        <member name="M:Ice.DynamicIceColumn.BuildSetterExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which sets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>An expression which sets the column value for the specified row.</returns>
        </member>
        <member name="T:Ice.IAttachRow`1">
            <summary>
            Attach a typed row to a Tableset.
            </summary>
            <typeparam name="TRow">The table row type.</typeparam>
        </member>
        <member name="M:Ice.IAttachRow`1.Attach(`0)">
            <summary>
            Adds the row to the table.
            </summary>
            <param name="row">The row to be added.</param>
        </member>
        <member name="T:Ice.IceColumn">
            <summary>
            A column in an <see cref="T:Ice.IIceTable" />.
            </summary>
        </member>
        <member name="M:Ice.IceColumn.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.IceColumn" /> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data.</param>
        </member>
        <member name="P:Ice.IceColumn.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="P:Ice.IceColumn.DataType">
            <summary>
            Gets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:Ice.IceColumn.HasGetter">
            <summary>
            Gets a value indicating whether this column's value can be retrieved.
            </summary>
            <value>
            <c>true</c> if this column's value can be retrieved.
            </value>
        </member>
        <member name="P:Ice.IceColumn.HasSetter">
            <summary>
            Gets a value indicating whether this column's value can be set.
            </summary>
            <value>
            <c>true</c> if this this column's value can be set.
            </value>
        </member>
        <member name="P:Ice.IceColumn.IsDynamic">
            <summary>
            Is the column Dynamic. By default it is not dynamic.
            </summary>
        </member>
        <member name="P:Ice.IceColumn.IsMangledColumnName">
            <summary>
            Gets a value indicating whether this column name is mangled.
            </summary>
            <value><c>true</c> if this column name is mangled.</value>
            <remarks>
            Property names can't be the same as class names so when row classes are generated, the property names that
            are identical to the class names have a "1" appended to them.
            </remarks>
        </member>
        <member name="M:Ice.IceColumn.Create(System.Reflection.PropertyInfo)">
            <summary>
            Creates an <see cref="T:Ice.IceColumn"/> for the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns>An <see cref="T:Ice.IceColumn"/> for the specified property.</returns>
        </member>
        <member name="M:Ice.IceColumn.Create(System.String,System.Type)">
            <summary>
            Creates a dynamic <see cref="T:Ice.IceColumn"/> with the specified name and type.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data.</param>
            <returns>A dynamic <see cref="T:Ice.IceColumn"/> with the specified name and type.</returns>
        </member>
        <member name="M:Ice.IceColumn.Create(System.Data.DataColumn)">
            <summary>
            Creates an <see cref="T:Ice.IceColumn"/> from the <see cref="T:System.Data.DataColumn"/>.
            </summary>
            <param name="column">The <see cref="T:System.Data.DataColumn"/>.</param>
            <returns>The <see cref="T:Ice.IceColumn"/>.</returns>
        </member>
        <member name="M:Ice.IceColumn.GetMangledColumnName">
            <summary>
            Gets the mangled column name if not already mangled.
            </summary>
            <returns>The mangled name.</returns>
            <remarks><see cref="P:Ice.IceColumn.IsMangledColumnName"/> for more information.</remarks>
        </member>
        <member name="M:Ice.IceColumn.GetUnmangledColumnName">
            <summary>
            Gets the unmangled column name.
            </summary>
            <returns>The unmangled column name.</returns>
            <remarks><see cref="P:Ice.IceColumn.IsMangledColumnName"/> for more information.</remarks>
        </member>
        <member name="M:Ice.IceColumn.GetValue(System.Object)">
            <summary>
            Gets the column's value.
            </summary>
            <param name="row">The row.</param>
            <returns>The column's value.</returns>
        </member>
        <member name="M:Ice.IceColumn.SetValue``1(System.Object,``0)">
            <summary>
            Sets the column's value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ice.IceColumn.IsThisName(System.String)">
            <summary>
            Is the column identical to this column by name
            </summary>
            <param name="columnName">column name</param>
            <returns>true if column name is asscoiated with this column</returns>
        </member>
        <member name="M:Ice.IceColumn.IsThisName(Ice.IceColumn)">
            <summary>
            Is the column identical to this column by name
            </summary>
            <param name="column">column</param>
            <returns>true if column name is asscoiated with this column</returns>
        </member>
        <member name="M:Ice.IceColumn.BuildGetterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which gets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <returns>An expression which gets the column value from the specified row.</returns>
        </member>
        <member name="M:Ice.IceColumn.BuildSetterExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which sets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>An expression which sets the column value for the specified row.</returns>
        </member>
        <member name="T:Ice.IceColumnCollection">
            <summary>
            Holds the collection of <see cref="T:Ice.IceColumn"/>s.
            </summary>
            <remarks>
            <para><c>IceColumnCollection</c> are obtained through the <see cref="M:Ice.IceColumnCollection.GetColumns(System.Data.DataTable)"/> or
            <see cref="M:Ice.IceColumnCollection.GetColumns(System.Type)"/> methods.</para>
            <para>There are two kinds of columns. The most common are the columns that are defined as properties in the
            row class. By default these are the only kinds of columns in the collection when it is created. The other
            kind of columns are dynamic columns. These can be added to the column collection and can be accessed through
            the <see cref="T:Ice.IceColumn"/> or through the row's indexers. Dynamic columns are supported on any row class
            that implements <see cref="T:Ice.IDynamicColumnValues"/>.</para>
            <para>The <c>IceColumnCollection</c> is very efficient at getting column information and reusing the data
            between instances. Since the "property" columns are static, these are only collected once for each type
            of row and the information is cached.</para>
            </remarks>
        </member>
        <member name="M:Ice.IceColumnCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.IceColumnCollection" /> class.
            </summary>
            <param name="rowType">Type of the row.</param>
        </member>
        <member name="M:Ice.IceColumnCollection.#ctor(System.Data.DataTable)">
            <summary>
            Prevents a default instance of the <see cref="T:Ice.IceColumnCollection" /> class from being created.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="P:Ice.IceColumnCollection.Count">
            <summary>
            Gets the number of data columns.
            </summary>
            <value>
            The number of data columns.
            </value>
        </member>
        <member name="P:Ice.IceColumnCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Ice.IceColumn" /> with the specified column index.
            </summary>
            <value>
            The <see cref="T:Ice.IceColumn" />.
            </value>
            <param name="columnIndex">Index of the column.</param>
            <returns>The <see cref="T:Ice.IceColumn" />.</returns>
        </member>
        <member name="P:Ice.IceColumnCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Ice.IceColumn" /> with the specified column name.
            </summary>
            <value>
            The <see cref="T:Ice.IceColumn" />.
            </value>
            <param name="columnName">Name of the column.</param>
            <returns>The <see cref="T:Ice.IceColumn" />.</returns>
        </member>
        <member name="P:Ice.IceColumnCollection.Item(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:Ice.IceColumn" /> with the specified column name.
            </summary>
            <value>
            The <see cref="T:Ice.IceColumn" />.
            </value>
            <param name="columnName">Name of the column.</param>
            <param name="searchForMangledNames">If set to <c>true</c> mangled names are tried.</param>
            <returns>
            The <see cref="T:Ice.IceColumn" />.
            </returns>
        </member>
        <member name="M:Ice.IceColumnCollection.GetColumns(System.Type)">
            <summary>
            Gets the inherently defined columns for the row type.
            </summary>
            <param name="rowType">Type of the row.</param>
            <returns>The inherently defined columns for the row type.</returns>
        </member>
        <member name="M:Ice.IceColumnCollection.GetColumns(System.Data.DataTable)">
            <summary>
            Gets the columns.
            </summary>
            <param name="table">The table.</param>
            <returns>The <see cref="T:Ice.IceColumn"/>s derived from the <see cref="T:System.Data.DataColumn"/>s are returned.</returns>
        </member>
        <member name="M:Ice.IceColumnCollection.Add(Ice.IceColumn)">
            <summary>
            Adds the specified column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Ice.IceColumnCollection.AddRange(System.Collections.Generic.IEnumerable{Ice.IceColumn})">
            <summary>
            Adds the columns.
            </summary>
            <param name="columns">The columns to add.</param>
        </member>
        <member name="M:Ice.IceColumnCollection.AddRangeWithCheck(System.Collections.Generic.IEnumerable{Ice.IceColumn})">
            <summary>
            Adds the columns. If duplicate is encountered it will be ignored
            </summary>
            <param name="columns">The columns to add.</param>
        </member>
        <member name="M:Ice.IceColumnCollection.Contains(System.String)">
            <summary>
            Checks whether the collection contains a column with the specified name.
            </summary>
            <param name="columnName">The ColumnName of the column to look for.</param>
            <returns>
            <c>true</c> if a column exists with this name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ice.IceColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the column collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ice.IceColumnCollection.GetMatchingColumn(Ice.IceColumn)">
            <summary>
            Gets the matching column.
            </summary>
            <param name="searchColumn">The column to find a match for.</param>
            <returns>The matching column.</returns>
            <remarks>
            Column names can be mangled if the column name and the table name are the same. This is caused by .Net not
            allowing a property name to be the same as the class name. This method takes a column from another column
            collection and tries to find the matching column in this collection. If an exact match of the column name
            can't be found then mangled names are tried.
            </remarks>
        </member>
        <member name="M:Ice.IceColumnCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the column with the specific name (the name is not case sensitive).
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>The zero-based index of the column with the specified name, or -1 if the column does not exist in the collection.</returns>
        </member>
        <member name="M:Ice.IceColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Ice.IceColumnListBuilder">
            <summary>
            Builds a list of <see cref="T:Ice.IceColumn"/>s for a data row.
            </summary>
            <remarks>
            There are two ways of determining the list of columns in a specific row type. For rows that derive
            off of <see cref="T:Ice.IceRow"/> we use all public properties that have a <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/>.
            For non <see cref="T:Ice.IceRow"/> rows, we use all public properties except the indexer. For <c>LinqRow</c>
            we remove the extra properties that are not data "column" properties.
            </remarks>
        </member>
        <member name="M:Ice.IceColumnListBuilder.GetColumns(System.Type)">
            <summary>
            Gets the columns for the row.
            </summary>
            <param name="rowType">Type of the row.</param>
            <returns>The columns for the row.</returns>
        </member>
        <member name="M:Ice.IceColumnListBuilder.GetColumns(System.Data.DataTable)">
            <summary>
            Gets the <see cref="T:Ice.IceColumn"/>s for the specified <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="table">The table.</param>
            <returns>The <see cref="T:Ice.IceColumn"/>s.</returns>
            <remarks>This list is not cached.</remarks>
        </member>
        <member name="T:Ice.IceRow">
            <summary>
            Abstract class for data rows for Tableset objects
            </summary>
        </member>
        <member name="M:Ice.IceRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.IceRow" /> class.
            </summary>
        </member>
        <member name="M:Ice.IceRow.#ctor(Ice.IIceTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.IceRow" /> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="P:Ice.IceRow.Item(System.Int32)">
            <summary>
            Gets or sets the value of the column with the specified index.
            </summary>
            <value>
            The value.
            </value>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="P:Ice.IceRow.Item(Ice.IceColumn)">
            <summary>
            Gets or sets the value of the specified column.
            </summary>
            <value>
            The value.
            </value>
            <param name="column">The column.</param>
        </member>
        <member name="M:Ice.IceRow.SetSpecifiedProperty(System.Int32,System.Boolean)">
            <summary>
            Sets the state of the SpecifiedProperty entry
            </summary>
        </member>
        <member name="M:Ice.IceRow.IsSpecified(System.Int32)">
            <summary>
            Indicates if the column at this position has been set
            </summary>
            <param name="index">The position in SpecifiedProperties</param>
            <returns>true if the property has been set</returns>
        </member>
        <member name="M:Ice.IceRow.IsSpecified(System.String)">
            <summary>
            Indicates if the column by this name has been set
            </summary>
            <param name="columnName">The name of the column</param>
            <returns>true if the property has been set</returns>
        </member>
        <member name="P:Ice.IceRow.KeyValuesDelegate">
            <summary>
            Gets a delegate that selects an object array containing the key-field values.
            </summary>
        </member>
        <member name="P:Ice.IceRow.KeyNamesDelegate">
            <summary>
            Gets a delegate that selects a string array containing the key field names.
            </summary>
        </member>
        <member name="P:Ice.IceRow.KeysNameValuePairsDelegate">
            <summary>
            Gets a delegate that selects a KeyValuePair array containing primary key names and their values
            </summary>
        </member>
        <member name="P:Ice.IceRow.Table">
            <summary>
            Gets the table this row is in.
            </summary>
            <value>
            The table this row is in.
            </value>
        </member>
        <member name="M:Ice.IceRow.GetSchemaName">
            <summary>
            Gets the name of the Schema.
            </summary>
        </member>
        <member name="M:Ice.IceRow.GetDatabaseTableName">
            <summary>
            Gets the name of the database table.
            </summary>
        </member>
        <member name="P:Ice.IceRow.UserDefinedColumns">
            <summary>
            User Defined Columns with data
            </summary>
        </member>
        <member name="T:Ice.UnboundFieldAttribute">
            <summary>
            Signifies an unbound field.
            </summary>
        </member>
        <member name="T:Ice.BoundFieldAttribute">
            <summary>
            Signifies a bound field.
            </summary>
        </member>
        <member name="P:Ice.BoundFieldAttribute.DBMapping">
            <summary>
            Gets or sets the database mapping.
            </summary>
            <value>The database mapping.</value>
        </member>
        <member name="T:Ice.LookupFieldAttribute">
            <summary>
            Signifies a lookup field.
            </summary>
        </member>
        <member name="P:Ice.LookupFieldAttribute.DBMapping">
            <summary>
            Gets or sets the database mapping.
            </summary>
            <value>The database mapping.</value>
        </member>
        <member name="T:Ice.IceRowState">
            <summary>
            Gets the edit state of the <see cref="T:Ice.IceRow"/>.
            </summary>
        </member>
        <member name="F:Ice.IceRowState.Unchanged">
            <summary>
            The row has not been changed.
            </summary>
            <remarks>The is the default value.</remarks>
        </member>
        <member name="F:Ice.IceRowState.Added">
            <summary>
            The row has been added.
            </summary>
            <remarks>The RowMod == "A".</remarks>
        </member>
        <member name="F:Ice.IceRowState.Deleted">
            <summary>
            The row has been deleted.
            </summary>
            <remarks>The RowMod == "D".</remarks>
        </member>
        <member name="F:Ice.IceRowState.Updated">
            <summary>
            The row has been updated.
            </summary>
            <remarks>The RowMod == "U".</remarks>
        </member>
        <member name="T:Ice.IceRowExtensions">
            <summary>
            Extension methods for the <see cref="T:Ice.IceRow"/> class.
            </summary>
        </member>
        <member name="M:Ice.IceRowExtensions.GetRowState(Ice.IRowWithRowMod)">
            <summary>
            Gets the state of the row.
            </summary>
            <param name="row">The row.</param>
            <returns>The row state.</returns>
        </member>
        <member name="M:Ice.IceRowExtensions.SetRowState(Ice.IRowWithRowMod,Ice.IceRowState)">
            <summary>
            Sets the state of the row.
            </summary>
            <param name="row">The row.</param>
            <param name="rowState">State of the row.</param>
        </member>
        <member name="M:Ice.IceRowExtensions.Added(Ice.IRowWithRowMod)">
            <summary>
            Check whatever specified row is ADDED
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Ice.IceRowExtensions.Deleted(Ice.IRowWithRowMod)">
            <summary>
            Check whatever specified row is DELETED
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Ice.IceRowExtensions.Updated(Ice.IRowWithRowMod)">
            <summary>
            Check whatever specified row is UPDATED
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:Ice.IceRowExtensions.Unchanged(Ice.IRowWithRowMod)">
            <summary>
            Check whatever specified row is UNCHANGED
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="T:Ice.IceTable`1">
            <summary>
            Base class for all Tableset tables.
            </summary>
            <typeparam name="TRow">The type of row contained in the table.</typeparam>
        </member>
        <member name="F:Ice.IceTable`1.PHashCode">
            <summary>
            Used to detect type mismatches for serialization.
            </summary>
        </member>
        <member name="P:Ice.IceTable`1.Columns">
            <summary>
            Gets the columns for the table.
            </summary>
            <value>
            The columns for the table.
            </value>
        </member>
        <member name="P:Ice.IceTable`1.DatabaseTableName">
            <summary>
            Gets the name of the database table.
            </summary>
            <value>
            The name of the database table.
            </value>
        </member>
        <member name="P:Ice.IceTable`1.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:Ice.IceTable`1.Tableset">
            <summary>
            Gets the containing <see cref="T:Ice.IceTableset"/>.
            </summary>
            <value>
            The containing <see cref="T:Ice.IceTableset"/>.
            </value>
        </member>
        <member name="M:Ice.IceTable`1.Create">
            <summary>
            Creates a new instance of the <see cref="T:Ice.IIceTable"/>.
            </summary>
            <returns>The new table</returns>
        </member>
        <member name="M:Ice.IceTable`1.Sort(System.String)">
            <summary>
            Sorts the collection based on the sort specification provided
            </summary>
            <param name="orderBy">The sort specification</param>
        </member>
        <member name="M:Ice.IceTable`1.GetRowType">
            <summary>
            Returns the concrete type for the IceRow
            </summary>
            <returns>The row type</returns>
        </member>
        <member name="P:Ice.IceTable`1.DataRowExistsInTable">
            <summary>
            Delegate used to find a row in the table using primary key values as parameters
            </summary>
        </member>
        <member name="M:Ice.IceTable`1.GetPropertyHash">
            <summary>
            Used to check that the properties and types match between sender and receiver during deserialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ice.IceTable`1.GetPropertyHashCode">
            <summary>
            Calculates an Int64 hash code for this table based on the property names and types.
            </summary>
            <returns>The property hash code.</returns>
        </member>
        <member name="M:Ice.IceTable`1.DeserializeInt32(System.IO.Stream)">
            <summary>
            Used by the deserialization process to retrieve the row count for the current table
            </summary>
            <param name="stream">The input stream</param>
            <returns>The row count</returns>
        </member>
        <member name="M:Ice.IceTable`1.Serialize(System.Int32,System.IO.Stream)">
            <summary>
            Used by the serialization process to serialize the row count
            </summary>
            <param name="value">The row count</param>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Ice.IceTable`1.Ice#IAttachRow{TRow}#Attach(`0)">
            <summary>
            Adds the row to the Tableset.
            </summary>
            <param name="row">The row to add.</param>
        </member>
        <member name="M:Ice.IceTable`1.Ice#ICreateRow{TRow}#CreateRow">
            <summary>
            Creates a new row for this table.
            </summary>
            <returns>The new row.</returns>
        </member>
        <member name="T:Ice.FindByPKDelegate">
            <summary>
            Delegate that finds a Tableset row using the primary key values from a <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="T:Ice.GetKeyValuesDelegate">
            <summary>
            Delegate that returns an object array containing primary key values.
            </summary>
        </member>
        <member name="T:Ice.GetKeyNamesDelegate">
            <summary>
            Delegate that returns a string array containing primary key names
            </summary>
        </member>
        <member name="T:Ice.GetKeysNameValuePairsDelegate">
            <summary>
            Delegate that returns a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> array containing primary key names and their values
            </summary>
        </member>
        <member name="T:Ice.IceTableset">
            <summary>
            A container for a set of tables (IIceTable)
            </summary>
        </member>
        <member name="M:Ice.IceTableset.Serialize(System.IO.Stream)">
            <summary>
            Serializes the entire Tableset to a stream
            </summary>
            <param name="stm">The output stream</param>
        </member>
        <member name="M:Ice.IceTableset.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the tableset from the stream
            </summary>
            <param name="stm">The input stream</param>
        </member>
        <member name="M:Ice.IceTableset.GetTable(System.String)">
            <summary>
            Get IceTable by table name
            </summary>
            <param name="tableName">table name</param>
            <returns>IceTable or null (if not found)</returns>
        </member>
        <member name="T:Ice.IceTablesetSurrogate">
            <summary>
            Used by WCF to serialize and deserialize data contracts.
            </summary>
        </member>
        <member name="M:Ice.IceTablesetSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.IceTablesetSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Ice.IceTablesetSurrogate.GetCustomDataToExport(System.Type,System.Type)">
            <summary>
            Inherited from IDataContractSurrogate
            </summary>
            <param name="clrType"></param>
            <param name="dataContractType"></param>
            <returns></returns>
        </member>
        <member name="T:Ice.ICreateRow`1">
            <summary>
            Creates a typed rows with default values.
            </summary>
            <typeparam name="TRow">The table row type.</typeparam>
        </member>
        <member name="M:Ice.ICreateRow`1.CreateRow">
            <summary>
            Creates a new row of type <typeparamref name="TRow"/> with default values.
            </summary>
            <returns>The new row.</returns>
        </member>
        <member name="T:Ice.IDCSerializer">
            <summary>
            Used by the data contract serializer in WCF
            </summary>
        </member>
        <member name="T:Ice.IDynamicColumnValues">
            <summary>
            Allows dynamic values to be used by arbitrary classes.
            </summary>
        </member>
        <member name="P:Ice.IDynamicColumnValues.DynamicColumnValues">
            <summary>
            Gets or sets the collection of dynamic column values.
            </summary>
            <value>
            The dynamic column values collection.
            </value>
            <remarks>
            This is for internal use only.
            </remarks>
        </member>
        <member name="T:Ice.IIceTable">
            <summary>
            Non-generic functions common across all Tableset table entries
            </summary>
        </member>
        <member name="T:Ice.PropertyIceColumn">
            <summary>
            An <see cref="T:Ice.IceColumn" /> for a standard property.
            </summary>
        </member>
        <member name="M:Ice.PropertyIceColumn.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.PropertyIceColumn" /> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="P:Ice.PropertyIceColumn.HasGetter">
            <summary>
            Gets a value indicating whether this column's value can be retrieved.
            </summary>
            <value>
            <c>true</c> if this column's value can be retrieved.
            </value>
        </member>
        <member name="P:Ice.PropertyIceColumn.HasSetter">
            <summary>
            Gets a value indicating whether this column's value can be set.
            </summary>
            <value>
            <c>true</c> if this this column's value can be set.
            </value>
        </member>
        <member name="P:Ice.PropertyIceColumn.IsMangledColumnName">
            <summary>
            Gets a value indicating whether this column name is mangled.
            </summary>
            <value><c>true</c> if this column name is mangled.</value>
            <remarks>
            Property names can't be the same as class names so when row classes are generated, the property names that
            are identical to the class names have a "1" appended to them.
            </remarks>
        </member>
        <member name="M:Ice.PropertyIceColumn.GetValue(System.Object)">
            <summary>
            Gets the column's value.
            </summary>
            <param name="row">The row.</param>
            <returns>The column's value.</returns>
        </member>
        <member name="M:Ice.PropertyIceColumn.SetValue``1(System.Object,``0)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="row">The row.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ice.PropertyIceColumn.BuildGetterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which gets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <returns>An expression which gets the column value from the specified row.</returns>
        </member>
        <member name="M:Ice.PropertyIceColumn.BuildSetterExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression which sets the column value for the specified row.
            </summary>
            <param name="rowExpression">The row expression.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>An expression which sets the column value for the specified row.</returns>
        </member>
        <member name="T:Ice.PropertyIceColumn.Accessors">
            <summary>
            Storing the two boolean values in a single enum to save memory.
            We will have a LOT of instances of this class.
            </summary>
        </member>
        <member name="T:Ice.SerializedIceTableset">
            <summary>
            Used to pass serialized Tableset objects in WCF messages for NetTCP bindings
            </summary>
        </member>
        <member name="T:Ice.UseIceSurrogateAttribute">
            <summary>
            Specifies the custom data contract serializer for Ice.
            </summary>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Configures any binding elements to support the contract behavior.
            </summary>
            <param name="description">The contract description to modify.</param>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="parameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across a contract.
            </summary>
            <param name="description">The contract description for which the extension is intended.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="proxy">The client runtime.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            Implements a modification or extension of the client across a contract.
            </summary>
            <param name="description">The contract description to be modified.</param>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="dispatch">The dispatch runtime that controls service execution.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the contract and endpoint can support the contract behavior.
            </summary>
            <param name="description">The contract to validate.</param>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
            <summary>
            Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for a contract.
            </summary>
            <param name="exporter">The <see cref="T:System.ServiceModel.Description.WsdlExporter"/> that exports the contract information.</param>
            <param name="context">Provides mappings from exported WSDL elements to the contract description.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
            <summary>
            Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for an endpoint.
            </summary>
            <param name="exporter">The <see cref="T:System.ServiceModel.Description.WsdlExporter"/> that exports the endpoint information.</param>
            <param name="context">Provides mappings from exported WSDL elements to the endpoint description.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Adds the binding parameters.
            </summary>
            <param name="description">The description.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Applies the client behavior.
            </summary>
            <param name="description">The description.</param>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Applies the dispatch behavior.
            </summary>
            <param name="description">The description.</param>
            <param name="dispatch">The dispatch.</param>
        </member>
        <member name="M:Ice.UseIceSurrogateAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Validates the specified description.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:Ice.Utility.IceRowConvert.ToXDocument(Ice.IceRow,System.Boolean)">
            <summary>
            Convert IceRow to XDocument
            </summary>
            <param name="row">IceRow</param>
            <param name="removeEmptyNodes">Remove empty nodes</param>
            <returns>XDocument</returns>
        </member>
        <member name="M:Ice.Utility.IceRowConvert.ToXDocument(Ice.IIceTable,System.Boolean)">
            <summary>
            Convert IceTable to XDocument
            </summary>
            <param name="iceTable">IceTable</param>
            <param name="removeEmptyNodes">Remove empty nodes</param>
            <returns>XDocument</returns>
        </member>
        <member name="M:Ice.Utility.IceRowConvert.ToIceRow``1(System.Xml.Linq.XDocument)">
            <summary>
            Convert XDocument to IceRow
            </summary>
            <typeparam name="TRow">Type of IceRow</typeparam>
            <param name="xDoc">XDocument</param>
            <returns>IceRow</returns>
        </member>
        <member name="M:Ice.Utility.IceRowConvert.ToIceTable``1(System.Xml.Linq.XDocument,Ice.IIceTable)">
            <summary>
            Convert XDocument to IceTable
            </summary>
            <typeparam name="TRow">Type of IceRow</typeparam>
            <param name="xDoc">XDocument</param>
            <param name="iceTable">IceTable to be loaded</param>
        </member>
        <member name="T:Ice.Utility.Serializer">
            <summary>
            Serializes and deserializes data to a stream.
            </summary>
            <remarks>
            This is primarily used to serialize Tablesets.
            </remarks>
        </member>
        <member name="P:Ice.Resources.StringsBase`1.ResourcesStringsManager">
            <summary>
            Returns current ResourceStringsManager. It is possible to override default ResourceStringManager and set a different one
            </summary>
        </member>
        <member name="P:Ice.Resources.StringsBase`1.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ice.Resources.StringsBase`1.Culture">
             <summary>
             Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
             </summary>
        </member>
        <member name="T:Ice.Resources.IceResourceStringManagerLoader">
            <summary>
            Provides a default ICE IResourceStringManager
            </summary>
        </member>
        <member name="T:Ice.Resources.SatelliteResourceManagerLoader`1">
            <summary>
            Provides a default client side resource manager access
            
            </summary>
        </member>
        <member name="T:Ice.BOReaderTableProfile">
            <summary>
            Used to cache the properties and mappings used to convert a Tableset to a matching generic dataset.
            </summary>
        </member>
        <member name="T:Ice.DatasetAdapter">
            <summary>
            A utility class for converting Tablesets to datasets.
            </summary>
        </member>
        <member name="M:Ice.DatasetAdapter.CopyDataTableToTSTable``1(System.Data.DataTable,Ice.IceTable{``0},System.Boolean)">
            <summary>
            Copies data from a <see cref="T:System.Data.DataTable"/> to a <see cref="N:Ice.Tableset"/> table.
            </summary>
            <typeparam name="TIceRow">The row type for the target <see cref="N:Ice.Tableset"/> table.</typeparam>
            <param name="clientDataTable">The source <see cref="T:System.Data.DataTable"/>.</param>
            <param name="targetTSTable">The target <see cref="N:Ice.Tableset"/> table.</param>
            <param name="onlyChanges">Set to <c>true</c> to skip unchanged rows.</param>
            <remarks>
            The target row's <see cref="T:Ice.IceRowState"/> is set to the appropriate value based on the <see cref="T:System.Data.DataRowState"/>
            of the source <see cref="T:System.Data.DataRow"/>. For modified rows, there are two rows created. The row holding the original
            values will have an <see cref="T:Ice.IceRowState"/> of Unchanged and the row holding the updated values will have an
            <see cref="T:Ice.IceRowState"/> of Updated.
            </remarks>
        </member>
        <member name="M:Ice.DatasetAdapter.CopyDataTableToTSTable``2(System.Data.DataTable,Ice.IceTable{``0},System.Boolean)">
            <summary>
            Copies data from a <see cref="T:System.Data.DataTable"/> to a <see cref="N:Ice.Tableset"/> table.
            </summary>
            <typeparam name="TIceRow">The row type for the target <see cref="N:Ice.Tableset"/> table.</typeparam>
            <typeparam name="TDataRow">The DataRow type of the source typed <see cref="T:System.Data.DataTable"/>.</typeparam>
            <param name="clientDataTable">The source <see cref="T:System.Data.DataTable"/>.</param>
            <param name="targetTSTable">The target <see cref="N:Ice.Tableset"/> table.</param>
            <param name="onlyChanges">Set to <c>true</c> to skip unchanged rows.</param>
            <remarks>
            The target row's <see cref="T:Ice.IceRowState"/> is set to the appropriate value based on the <see cref="T:System.Data.DataRowState"/>
            of the source <see cref="T:System.Data.DataRow"/>. For modified rows, there are two rows created. The row holding the original
            values will have an <see cref="T:Ice.IceRowState"/> of Unchanged and the row holding the updated values will have an
            <see cref="T:Ice.IceRowState"/> of Updated.
            </remarks>
        </member>
        <member name="M:Ice.DatasetAdapter.GetCopyToColumnsDelegate(System.Data.DataTable,System.Type,System.String[])">
            <summary>
            Gets a delegate that will copy values from an <see cref="T:Ice.IceRow" /> to a <see cref="T:System.Data.DataRow" />.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable" /> to copy to.</param>
            <param name="iceRowType">The type of the ice row to copy from.</param>
            <param name="extendedColumnNames">The names of the extended columns.</param>
            <returns>
            A delegate that will copy values from an <see cref="T:Ice.IceRow" /> to a <see cref="T:System.Data.DataRow" />.
            </returns>
            <remarks>
            This is intended to be used to bulk load data into a <see cref="T:System.Data.DataTable" />. It creates an object[] from the
            values in the <see cref="T:Ice.IceRow" /> that is used to update the <see cref="T:System.Data.DataRow" /> using the
            <see cref="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)" /> method. Note that <c>null</c> in the object[] implies that the data in the
            <see cref="T:System.Data.DataRow" /> should not be overwritten. <see cref="F:System.DBNull.Value" /> is used in the object[] to signify
            that the column should be set to <c>null</c>.
            </remarks>
        </member>
        <member name="M:Ice.DatasetAdapter.ClearCache">
            <summary>
            Clears the cache. Used by unit testing.
            </summary>
        </member>
        <member name="M:Ice.DatasetAdapter.ConvertToGenericDataset(Ice.IceTableset,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an untyped DataSet object and copies data from the primary table in a TableSet
            </summary>
            <param name="tableset">The source TableSet</param>
            <param name="serviceNamespace">A namespace name to help disambiguate Tablesets</param>
            <param name="columnList">A list of columns</param>
            <returns>An untyped DataSet object and copies data from the primary table in a TableSet.</returns>
        </member>
        <member name="M:Ice.DatasetAdapter.GetProfileHash(System.String,Ice.IceTableset,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Builds a hash to uniquely identify a Tableset and column list.
            </summary>
            <param name="serviceNamespace">A namespace name to help disambiguate Tablesets.</param>
            <param name="tableset">The Tableset to hash.</param>
            <param name="columnNameList">The list of column names to include in the profile.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Ice.DatasetAdapter.CopyTSTableToDataTable``2(Ice.IceTable{``0},``1)">
            <summary>
            Copies data from a Tableset table to a DataTable
            </summary>
            <typeparam name="TIceRow">The row type of the source Tableset table</typeparam>
            <typeparam name="TDataTable">The DataRow type from the types DataTable</typeparam>
            <param name="sourceTSTable">The source Tableset table</param>
            <param name="destinationTable">The target DataTable</param>
            <remarks>
            SIDE EFFECT: Any extended columns are added to the <paramref name="destinationTable"/> if they are not already
            part of the table.
            </remarks>
        </member>
        <member name="M:Ice.DatasetAdapter.IsNullableType(System.Type)">
            <summary>
            Determine of specified type is nullable
            </summary>
        </member>
        <member name="M:Ice.DatasetAdapter.GetUnderlyingType(System.Type)">
            <summary>
            Return underlying type if type is nullable otherwise return the type
            </summary>
        </member>
        <member name="M:Ice.DatasetAdapter.RemoveDeletedAndAcceptModifiedRows(System.Data.DataTable)">
            <summary>
            Removes the deleted rows and accepts pending changes.
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> to process.</param>
        </member>
        <member name="M:Ice.NewRowHandler.InferKeyValuesForSingleAddedRow``2(Ice.IceTable{``0},``1)">
            <summary>
            Infers the key values for the single added row.
            </summary>
            <param name="serverTable">The server table.</param>
            <param name="clientTable">The client table.</param>
            <remarks>
            SIDE EFFECT: All added rows in the client table have <see cref="M:System.Data.DataRow.EndEdit"/> called on them.
            SIDE EFFECT: All new client table rows have <see cref="M:System.Data.DataRow.RejectChanges"/> called on them if
            the client table doesn't have a primary key, more than one row was added, or more than one server
            row was potentially the new client row.
            </remarks>
        </member>
        <member name="T:Ice.Diagnostics.DataTracer">
            <summary>
            Writes to the application trace log.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceCallContextDataSetSwitch">
            <summary>
            Gets the trace call context data set switch.
            </summary>
            <value>The trace call context data set switch.</value>
            <remarks>
            If <see cref="F:System.Diagnostics.TraceLevel.Info"/> then only current <see cref="T:System.Data.DataSet"/> data is traced. If
            <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> then data changes are tracked as well.
            </remarks>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceDataSetsSwitch">
            <summary>
            Gets the trace data sets switch.
            </summary>
            <value>The trace data sets switch.</value>
            <remarks>
            If <see cref="F:System.Diagnostics.TraceLevel.Info"/> then only current <see cref="T:System.Data.DataSet"/> data is traced. If
            <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> then data changes are tracked as well.
            </remarks>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceEnabledSwitch">
            <summary>
            Gets the trace enabled switch.
            </summary>
            <value>The trace enabled switch.</value>
            <remarks>
            Set to <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> to trace packets.
            </remarks>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceReturnDataSwitch">
            <summary>
            Gets the trace return data switch.
            </summary>
            <value>The trace return data switch.</value>
            <remarks>
            If <see cref="F:System.Diagnostics.TraceLevel.Info"/> then only current <see cref="T:System.Data.DataSet"/> data is traced. If
            <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> then data changes are tracked as well.
            </remarks>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceIncludeServer">
            <summary>
            Gets the include server trace switch.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.IncludeServerTrace">
            <summary>
            Gets or sets a value indicating whether server tracing is enabled.
            </summary>
            <value>
              <c>true</c> if server tracing is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.DataSetsInfo">
            <summary>
            Gets or sets a value indicating whether <c>DataSet</c> tracking is enabled.
            </summary>
            <value><c>true</c> if <c>DataSet</c> tracking is enabled.</value>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.DataSetsVerbose">
            <summary>
            Gets or sets a value indicating whether verbose <c>DataSet</c> tracing is enabled.
            </summary>
            <value><c>true</c> if verbose <c>DataSet</c> tracing is enabled.</value>
            <remarks>
            If tracing is set to Verbose we will also track the changes to datasets that are parameters to method calls.
            </remarks>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.LogFileName">
            <summary>
            Gets the current log file name.
            </summary>
            <value>The name of the log file.</value>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.ReturnDataVerbose">
            <summary>
            Gets or sets a value indicating whether verbose <c>DataSet</c> return data is enabled.
            </summary>
            <value><c>true</c> if verbose <c>DataSet</c> return data is enabled.</value>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceCallContextDataSet">
            <summary>
            Gets or sets a value indicating whether CallContext <c>DataSet</c> tracing is enabled.
            </summary>
            <value><c>true</c> if CallContext <c>DataSet</c> tracing is enabled.</value>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceError">
            <summary>
            Does nothing.
            </summary>
            <value><c>true</c> if active.</value>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceInfo">
            <summary>
            Does nothing
            </summary>
            <value><c>true</c> if active.</value>
        </member>
        <member name="P:Ice.Diagnostics.DataTracer.TraceVerbose">
            <summary>
            Gets or sets a value indicating whether verbose tracing is active.
            </summary>
            <value><c>true</c> if active.</value>
        </member>
        <member name="M:Ice.Diagnostics.DataTracer.ClearLog">
            <summary>
            Clears the log file.
            </summary>
        </member>
        <member name="M:Ice.Diagnostics.DataTracer.CloseLog">
            <summary>
            Closes the log file.
            </summary>
        </member>
        <member name="M:Ice.Diagnostics.DataTracer.CreateXMLFile(System.String)">
            <summary>
            Create an XML file from the current log file.
            </summary>
            <param name="xmlFileName">name of the xml file to create</param>
        </member>
        <member name="M:Ice.Diagnostics.DataTracer.WriteMark(System.String)">
            <summary>
            method used to write a mark into the trace log.
            </summary>
            <param name="markName">text to write to log file</param>
        </member>
        <member name="M:Ice.Diagnostics.DataTracer.WriteException(System.Exception)">
            <summary>
            Write an exception to the trace log. Only works if the trace switch is set to Verbose.
            </summary>
            <param name="ex">Exception to write.</param>
        </member>
        <member name="M:Ice.Diagnostics.DataTracer.WritePacket(Ice.Diagnostics.TracePacket)">
            <summary>
            Use to serialize a TracePacket struct to the trace file. Only works if the trace switch is set to Verbose.
            </summary>
            <param name="packet">The packet to write.</param>
        </member>
        <member name="M:Ice.Diagnostics.DataTracer.RemoveInvalidXmlCharacters(System.String)">
            <summary>
            removes any unusual unicode characters that can't be encoded into XML
            </summary>
        </member>
        <member name="T:Ice.Diagnostics.ResultPacket">
            <summary>
            A struct used for tracing method calls.
            </summary>
        </member>
        <member name="M:Ice.Diagnostics.ResultPacket.#ctor(System.String,System.String,System.Collections.ArrayList,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Diagnostics.ResultPacket"/> struct.
            </summary>
            <param name="businessObject">The business object full name, for example Erp.Services.BO.ABCCodeSvc</param>
            <param name="methodName">The method name.</param>
            <param name="parameters">List of <see cref="T:Ice.Diagnostics.TracePacketElement"/>s representing the method parameters and their values.</param>
            <param name="returnObjType">Type of object returned by business object Method.</param>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.BusinessObject">
            <summary>
            Full name of business object - as in Epicor.Mfg.BO.AbcCode
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.ContinueOnError">
            <summary>
            If not successful, should the player continue to the next packet?
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.DataSetUpdated">
            <summary>
            If successful, which data set (if any) was updated
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.Error">
            <summary>
            Contains any errors that may have occurred during processing.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.ExceptionText">
            <summary>
            Exception text if an exception was thrown
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.ExceptionThrown">
            <summary>
            Indicates is an exception was thrown
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.LocalTime">
            <summary>
            Date/time call occurred.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.LogException">
            <summary>
            Did the exception get logged or just bypassed
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.MethodName">
            <summary>
            Method name.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.PacketNo">
            <summary>
            Last Packet Played when a trace group was played
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.Parameters">
            <summary>
            ArrayList of TracePacketElements representing the parameter values for method call.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.PreProcessingTime">
            <summary>
            Length of time (in milliseconds) call took.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.Result">
            <summary>
            Return value of method call.  Can be null.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.ReturnType">
            <summary>
            Return Type of business object
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.ServerExecutionTime">
            <summary>
            Time spent on the Server
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.ResultPacket.Success">
            <summary>
            Was the command successful?
            </summary>
        </member>
        <member name="T:Ice.Diagnostics.TracePacket">
            <summary>
            A struct used for tracing method calls.
            </summary>
        </member>
        <member name="M:Ice.Diagnostics.TracePacket.#ctor(System.String,System.String,System.DateTime,System.Double,System.Collections.Generic.List{Ice.Diagnostics.TracePacketElement},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Diagnostics.TracePacket"/> struct.
            </summary>
            <param name="blFullName">The business object full name, for example Erp.Services.BO.ABCCodeSvc</param>
            <param name="methodName">The method name.</param>
            <param name="initialCallTime">Date/time call occurred.</param>
            <param name="methodExecutionTime">Length of time call took.</param>
            <param name="parameterValues">List of <see cref="T:Ice.Diagnostics.TracePacketElement"/>s representing the method parameters and their values.</param>
            <param name="returnObjType">The type of object return by method call.</param>
        </member>
        <member name="M:Ice.Diagnostics.TracePacket.#ctor(System.String,System.String,System.DateTime,System.Double,System.Collections.Generic.List{Ice.Diagnostics.TracePacketElement},System.Collections.Generic.List{Ice.Diagnostics.TracePacketElement},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Diagnostics.TracePacket"/> struct.
            </summary>
            <param name="blFullName">BO Full name, as in Epicor.Mfg.BO.AbcCode</param>
            <param name="methodName">Method name.</param>
            <param name="initialCallTime">Date/time call occurred.</param>
            <param name="methodExecutionTime">Length of time call took.</param>
            <param name="parameterValues">List of <see cref="T:Ice.Diagnostics.TracePacketElement"/>s representing the method parameters and their values.</param>
            <param name="returnValues">The return values.</param>
            <param name="returnObjType">The type of object return by method call.</param>
        </member>
        <member name="M:Ice.Diagnostics.TracePacket.#ctor(System.String,System.String,System.DateTime,System.Double,System.Collections.Generic.List{Ice.Diagnostics.TracePacketElement},System.Collections.Generic.List{Ice.Diagnostics.TracePacketElement},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Diagnostics.TracePacket"/> struct.
            </summary>
            <param name="blFullName">BO Full name, as in Epicor.Mfg.BO.AbcCode</param>
            <param name="methodName">Method name.</param>
            <param name="initialCallTime">Date/time call occurred.</param>
            <param name="methodExecutionTime">Length of time call took.</param>
            <param name="parameterValues">List of <see cref="T:Ice.Diagnostics.TracePacketElement"/>s representing the method parameters and their values.</param>
            <param name="returnValues">The return values.</param>
            <param name="returnObjType">The type of object return by method call.</param>
            <param name="serverTrace">A server side trace.</param>
            <param name="appServerUri">AppServer used</param>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.BlFullName">
            <summary>
            Full name of business object - as in Epicor.Mfg.BO.AbcCode
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.ReturnType">
            <summary>
            Type of object returned by  business object method
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.MethodName">
            <summary>
            Method name.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.InitialCallTime">
            <summary>
            Date/time call occurred.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.ParameterValues">
            <summary>
            List of parameter values for method call.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.ReturnValues">
            <summary>
            List of return values for method call.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.MethodExecutionTime">
            <summary>
            Length of time (in milliseconds) call took.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.ServerTrace">
            <summary>
            Gets the server trace.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.AppServerUri">
            <summary>
            AppServer used for call
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacket.DiagnosticPacket">
            <summary>
            Additional diagnostic information.
            </summary>
        </member>
        <member name="M:Ice.Diagnostics.TracePacket.ParseParameterValue(System.String,System.String)">
            <summary>
            Parse Parameter Value based on Data Type
            </summary>
        </member>
        <member name="T:Ice.Diagnostics.TracePacketElement">
            <summary>
            Structure used to records details of a single method parameter.
            </summary>
        </member>
        <member name="M:Ice.Diagnostics.TracePacketElement.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a TracePacketElement for a method parameter.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="dataType">Parameter data type.</param>
            <param name="ioType">Method parameter keyword applied to this parameter (i.e. 'out' or 'ref').</param>
            <param name="initialValue">Value as passed into from client.</param>
        </member>
        <member name="P:Ice.Diagnostics.TracePacketElement.ParamDataType">
            <summary>
            Data type of parameter represented by this TracePacketElement.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacketElement.ParamIoType">
            <summary>
            Method parameter keyword applied to this parameter (i.e. 'out' or 'ref').
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacketElement.ParamName">
            <summary>
            Parameter name represented by this TracePacketElement.
            </summary>
        </member>
        <member name="P:Ice.Diagnostics.TracePacketElement.ParamValue">
            <summary>
            Value of the parameter represented by this TracePacketElement.
            </summary>
        </member>
        <member name="T:Ice.Diagnostics.TracePacketWriter">
            <summary>
            Writes a <see cref="T:Ice.Diagnostics.TracePacket"/> to the log file.
            </summary>
        </member>
        <member name="M:Ice.Diagnostics.TracePacketWriter.#ctor(System.Xml.XmlWriter,Ice.Diagnostics.TracePacket)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Diagnostics.TracePacketWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Ice.Diagnostics.TracePacketWriter.WritePacket(System.Xml.XmlWriter,Ice.Diagnostics.TracePacket)">
            <summary>
            Writes the packet.
            </summary>
            <param name="writer">The writer.</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Ice.Diagnostics.TracePacketWriter.WriteServerTrace">
            <summary>
            Writes the server trace.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ChannelEntry.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.ServiceModel.Description.ClientCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ChannelEntry"/> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="endpointAddress">The endpoint address.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ChannelEntryCache.#cctor">
            <summary>
            Initializes the <see cref="T:Epicor.ServiceModel.Channels.ChannelEntryCache" /> class.
            </summary>
        </member>
        <member name="T:Epicor.ServiceModel.Channels.Client`1">
            <summary>
            Implements ClientBase for Epicor services"/>
            </summary>
            <typeparam name="T">The service contract class type</typeparam>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.Client`1.SetHeaders">
            <summary>
            Converts header objects into WCF message headers in the current operation context.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.Client`1.#ctor(System.ServiceModel.Channels.Binding,System.Uri)">
            <summary>
            Create a client object
            </summary>
            <param name="binding">The client binding</param>
            <param name="uri">The target service Uri</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.Client`1.#ctor(System.ServiceModel.Channels.Binding,System.Uri,System.ServiceModel.EndpointIdentity)">
            <summary>
            Creates a client object
            </summary>
            <param name="binding">The client binding object</param>
            <param name="uri">The target service Uri</param>
            <param name="identity">The endpoint identity for the connection</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.Client`1.OnFaulted(System.Object,System.EventArgs)">
            <summary>
            Re-creates the client channel when a fault is detected
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.Client`1.Dispose">
            <summary>
            Disposes the client object
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.Client`1.GetUriPath(System.Type)">
            <summary>
            Returns the standard (relative) service path for this service.
            </summary>
            <param name="theType">The contract type</param>
            <returns>The relative path for the service</returns>
        </member>
        <member name="T:Epicor.ServiceModel.Channels.ClientCredentialsChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:Epicor.ServiceModel.Channels.ClientCredentialsChangeNotifier.CredentialsChanged"/> event.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ClientCredentialsChangeEventArgs.#ctor(System.ServiceModel.Description.ClientCredentials,System.ServiceModel.Description.ClientCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ClientCredentialsChangeEventArgs" /> class.
            </summary>
            <param name="oldCredentials">The old credentials.</param>
            <param name="newCredentials">The new credentials.</param>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ClientCredentialsChangeEventArgs.NewCredentials">
            <summary>
            Gets the new credentials.
            </summary>
            <value>
            The new credentials.
            </value>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ClientCredentialsChangeEventArgs.OldCredentials">
            <summary>
            Gets the old credentials.
            </summary>
            <value>
            The old credentials.
            </value>
        </member>
        <member name="T:Epicor.ServiceModel.Channels.ClientCredentialsChangeNotifier">
            <summary>
            Notifies event subscribers when <see cref="T:System.ServiceModel.Description.ClientCredentials"/> change.
            </summary>
            <remarks>
            This should only happen when the user changes their password.
            </remarks>
        </member>
        <member name="E:Epicor.ServiceModel.Channels.ClientCredentialsChangeNotifier.CredentialsChanged">
            <summary>
            Occurs when the <see cref="T:System.ServiceModel.Description.ClientCredentials"/> change.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ClientCredentialsChangeNotifier.OnCredentialsChanged(Epicor.ServiceModel.Channels.ClientCredentialsChangeEventArgs)">
            <summary>
            Raises the <see cref="E:CredentialsChanged" /> event.
            </summary>
            <param name="args">The <see cref="T:Epicor.ServiceModel.Channels.ClientCredentialsChangeEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ClientCredentialsChangeNotifier.DoWithNoSubscribers(System.Action)">
            <summary>
            Does the action with an empty subscriber list. The original subscriber list is put back when done.
            </summary>
            <remarks>
            Used by unit testing.
            </remarks>
        </member>
        <member name="T:Epicor.ServiceModel.Channels.CompressionBindingElement">
            <summary>
            Implements the compression encoder binding element setting up WCF bindings
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.CompressionBindingElement"/> class.
            </summary>
        </member>
        <member name="T:Epicor.ServiceModel.Channels.CompressionEncoder">
            <summary>
            Implements a binary compression encoder for WCF services
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionEncoder.#ctor(System.ServiceModel.Channels.MessageEncoder)">
            <summary>
            Creates the compression encoder with the supplied encoder as an inner encoder
            </summary>
            <param name="innerEncoder">The inner encoder</param>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.CompressionEncoder.ContentType">
            <summary>
            Returns the content type for messages
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.CompressionEncoder.MediaType">
            <summary>
            Returns the inner encoder's media type
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.CompressionEncoder.MessageVersion">
            <summary>
            Returns the inner encoders message version
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
            <summary>
            Decodes a message from compressed bytes held in a memory buffer
            </summary>
            <param name="buffer">The memory buffer containing the message bytes</param>
            <param name="bufferManager">The buffer manager for the memory buffer</param>
            <param name="contentType">The content type received from the sender</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
            <summary>
            Reads a message passed as a chunked stream.  Not yet supported in Ice 3.
            </summary>
            <param name="stream">The stream containing the received message</param>
            <param name="maxSizeOfHeaders">The maximum size of the message headers</param>
            <param name="contentType">The content type received from the sender</param>
            <returns>The received message</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>
            Encodes an outbound message
            </summary>
            <param name="message">The message to be transmitted</param>
            <param name="maxMessageSize">The maximum message size allowed by the writer quotas</param>
            <param name="bufferManager">The buffer manager for the message buffer</param>
            <param name="messageOffset">The offset for the message stream</param>
            <returns>A byte array containing the encoded message</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
            <summary>
            Write the message in streaming mode.  Not yet supported for Ice 3.
            </summary>
            <param name="message">The message to be transmitted</param>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionEncoder.CompressBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>
            Compresses a byte array into a new byte array
            </summary>
            <param name="buffer">The input byte array</param>
            <param name="bufferManager">The buffer manager for the message</param>
            <param name="messageOffset">The message offset</param>
            <returns>A byte array containing the compressed buffer</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.CompressionEncoder.DecompressBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
            <summary>
            Decompresses a byte array and returns the result in a new buffer
            </summary>
            <param name="inBuffer">The buffer containing the compressed bytes</param>
            <param name="bufferManager">The buffer manager</param>
            <returns>A new byte array containing the decompressed bytes</returns>
        </member>
        <member name="T:Epicor.ServiceModel.Channels.CompressionFactory">
            <summary>
            Used internally by WCF to create the compression encoder
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ImplBase"/> class.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ImplBase.CallSettings">
            <summary>
            Gets or sets the CallSettings Header info
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ImplBase.LicenseType">
            <summary>
            Gets or sets the requested License Type for a Session
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ImplBase.BpmContext">
            <summary>
            BPM Context dataset
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ImplBase.BpmContextHeader">
            <summary>
            Gets or sets the ContextHeader that represents the BpmContext dataset
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase.GetUriPath(System.Type)">
            <summary>
            Returns the standard (relative) service path for this service.
            </summary>
            <param name="contractType">The contract type</param>
            <returns>The relative path for the service</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase.SetAuthToken(System.String)">
            <summary>
            Add authentication token to ServiceImpl.
            </summary>
            <param name="authToken"></param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase.CopySparselyDataTableToIceRow``2(``0,System.Collections.Generic.List{``1})">
            <summary>
            Copies all specified columns from a DataTable to an IceRow.
            </summary>
            <typeparam name="TDataTable"></typeparam>
            <typeparam name="TIceRow"></typeparam>
            <param name="sourceTable"></param>
            <param name="destinationIceRowList"></param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase.CopySparselyIceRowsToDataTable``2(System.Collections.Generic.List{``0},``1,System.Func{``0,System.String[]})">
            <summary>
            Copies all specified columns from an IceRow to a DataTable.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.ServiceModel.Description.ClientCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ImplBase`1"/> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="endpointAddress">The endpoint address.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.#ctor(System.ServiceModel.Channels.Binding,System.Uri,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.EndpointIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ImplBase`1"/> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="targetUri">The target <see cref="T:System.Uri"/>.</param>
            <param name="credentials">The credentials.</param>
            <param name="identity">The identity.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.#ctor(System.ServiceModel.Channels.Binding,System.Uri,System.ServiceModel.EndpointIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ImplBase`1"/> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="targetUri">The target <see cref="T:System.Uri"/>.</param>
            <param name="identity">The identity.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.#ctor(System.ServiceModel.Channels.Binding,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ImplBase`1"/> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="targetUri">The target <see cref="T:System.Uri"/>.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.#ctor(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Channels.ImplBase`1"/> class.
            </summary>
            <param name="address">The endpoint address.</param>
            <param name="binding">The binding.</param>
            <param name="credentials">The credentials.</param>
            <param name="useCachedChannel">Reuse a channel to improve performance but ties a channel to a specific app server.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.SetOperationTimeout(System.TimeSpan)">
            <summary>
            Sets the operation timeout.
            </summary>
            <param name="operationTimeout">The operation timeout.</param>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.SetAuthToken(System.String)">
            <summary>
            Add authentication token to Service Impl.
            </summary>
            <param name="authToken"></param>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ImplBase`1.AppServerUri">
            <summary>
            AppServer for trace packets
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplBase`1.SetHeaders">
            <summary>
            Converts header objects into WCF message headers in the current operation context.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Channels.ImplBase`1.ChannelEntry">
            <summary>
            For testing
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplFactory.CreateImpl``1(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.Boolean,System.String,System.Guid,System.Guid,System.Int32)">
            <summary>
            The base Impl creator overload. Creates the Impl based on address + binding + credentials + useCache and sets up generated Impl based on additional settings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="endpointAddress"></param>
            <param name="binding"></param>
            <param name="credentials"></param>
            <param name="useCachedEntry"></param>
            <param name="submitUser"></param>
            <param name="sessionId"></param>
            <param name="licenseTypeId"></param>
            <param name="operationTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplFactory.CreateImpl``1(Epicor.ServiceModel.Channels.ImplBase,System.String)">
            <summary>
            Creates a new instance of a service based on the connection information of another service instance.
            </summary>
            <typeparam name="T">The type of service to instantiate.</typeparam>
            <param name="service">The service whose connection information you wish to use.</param>
            <param name="uriPath">URI of the service to instantiate relative to the AppServer URI.</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplFactory.GetImplUri(System.String,System.String)">
            <summary>
            Creates a Uri based upon the AppServer URL and the Impl Uri path.
            </summary>
            <param name="appServerUrl">The appserver URL.</param>
            <param name="implUriPath">The Impl Uri path.</param>
            <returns>A <see cref="T:System.Uri">Uri</see> for the service.</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplFactory.GetCustomBinding(System.Uri,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns a <see cref="T:System.ServiceModel.Channels.CustomBinding"/> based upon the supplied information.
            </summary>
            <param name="serverUri">The URI of the AppServer.</param>
            <param name="customBindingType">Custom binding type.</param>
            <param name="closeTimeout">Timeout for closing WCF channels (milliseconds). Null if you don't want to set it.</param>
            <returns>System.ServiceModel.Channels.CustomBinding</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplFactory.CreateCustomBinding(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates the standard set of NetTcp Bindings used ICE/ERP services.
            </summary>
            <param name="appServerUrl">The URL of the AppServer</param>
            <param name="customBindingType">The CustomBinding type for the AppServer</param>
            <param name="closeTimeout">The time the binding stays open until closed</param>
            <returns>System.ServiceModel.Channels.CustomBinding</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Channels.ImplFactory.SetUpImpl(Epicor.ServiceModel.Channels.ImplBase,System.String,System.Guid,System.Guid,System.Int32)">
            <summary>
            Sets up the common properties of the Impl based upon the supplied information.
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Channels.ImplFactory.ResolveCustomBindingFunc">
            <summary>
            Function to be called when predefined binding with specified name is not found. Implementation should return CustomBinding instance or null
            </summary>
            <returns>System.ServiceModel.Channels.CustomBinding to use in service calls or null, if no CustomBinding configuration found</returns>
        </member>
        <member name="T:Epicor.ServiceModel.Configuration.CompressionEncodingElement">
            <summary>
            Validates that compression encoding is properly configured for WCF
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Configuration.CompressionEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Called by WCF when the compression encoder is initialized
            </summary>
            <param name="bindingElement">The binding element containing the compression encoder</param>
        </member>
        <member name="T:Epicor.ServiceModel.Headers.ICallHeader">
            <summary>
            General interface to identify a call header type.
            </summary>
        </member>
        <member name="T:Epicor.ServiceModel.LicenseMapping.Module">
            <summary>
            List of Module Codes
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AP">
            <summary>Accounts Payable</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AM">
            <summary>Advanced Material Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AR">
            <summary>Accounts Receivable</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AV">
            <summary>Document Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.BM">
            <summary>Engineering</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.CM">
            <summary>Multi-Currency Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.CR">
            <summary>Customer Relationship Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.CC">
            <summary>Customer Connect - Store Front</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AIM">
            <summary>Advanced Inventory Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.FA">
            <summary>Asset Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.DE">
            <summary>MES Data Collection</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EQ">
            <summary>Estimate/Quote Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.ES">
            <summary>Scheduling</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.ED">
            <summary>EDI</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.FS">
            <summary>Field Service Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.GL">
            <summary>General Ledger</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.IM">
            <summary>Inventory Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.JC">
            <summary>Job Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MS">
            <summary>Multi-Site Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MR">
            <summary>Material Requirement Planning</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.OM">
            <summary>Order Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PC">
            <summary>Configurator</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PM">
            <summary>Purchasing Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PR">
            <summary>Payroll</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.QA">
            <summary>Quality Assurance</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.RQ">
            <summary>Supplier Relationship Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SR">
            <summary>Shipping/Receiving</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SV">
            <summary>Executive Dashboard</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EB">
            <summary>Business Intelligence</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AS">
            <summary>Pack Out Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.XS">
            <summary>ExpressShip</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PJ">
            <summary>Project Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PS">
            <summary>Advanced Planning and Scheduling</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AC">
            <summary>Advanced Cost Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MW">
            <summary>Multiple Warehouse</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PU">
            <summary>Advanced Purchasing Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MD">
            <summary>Multiple Division</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.CP">
            <summary>Consolidated Purchasing</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MP">
            <summary>Multi-Site Publish</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.HD">
            <summary>Case Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MJ">
            <summary>Multi-Level Job</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PD">
            <summary>Advanced Production</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MQ">
            <summary>Multi-Level Quote</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SE">
            <summary>Single-Level Engineering</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.ME">
            <summary>Multi-Level Engineering</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PZ">
            <summary>Productization</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.VZ">
            <summary>Verticalization Creator</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.HH">
            <summary>Handheld</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SS">
            <summary>Demand Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PH">
            <summary>Purchase Contracts</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.LP">
            <summary>Auto/Label Print Control</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.BP">
            <summary>Business Process Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PY">
            <summary>Consolidated Payment</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.GJ">
            <summary>Multi-Site G/L Journals</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.CD">
            <summary>Credit Card Processing</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.RP">
            <summary>Rebates Promotions and Royalties</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.WB">
            <summary>Epicor Everywhere™ Framework</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SP">
            <summary>Attachments for SharePoint®</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.RS">
            <summary>Replication Server</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.IC">
            <summary>Isolated Company (SaaS)</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MB">
            <summary>Multiple Books</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SI">
            <summary>Supplier Managed Inventory</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.CI">
            <summary>Customer Managed Inventory</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.LC">
            <summary>Landed Cost/Container Tracking</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.WE">
            <summary>RoHS/WEEE Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.TC">
            <summary>Tax Connect</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EES">
            <summary>Enterprise Search</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MM">
            <summary>Maintenance Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EQA">
            <summary>Enhanced Quality Assurance</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PB">
            <summary>Project Billing</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.TM">
            <summary>Time Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EM">
            <summary>Expense Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AA">
            <summary>Advanced Allocations</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PI">
            <summary>Payment Instruments</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SY">
            <summary>Surveys</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SRM">
            <summary>SLS - Residential Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SCS">
            <summary>SLS - Community Services</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SOC">
            <summary>SLS - Online Claiming for Residential Management</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SCI">
            <summary>SLS - iCare Integration</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SCC">
            <summary>SLS - Clinical Care</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SAF">
            <summary>SLS - Forms Designer</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SOE">
            <summary>SLS - Outbound EDI Interface</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.SDK">
            <summary>ICE SDK</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.TCS">
            <summary>Epicor Tax Connect ST</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.TCU">
            <summary>Epicor Tax Connect UT</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.MFS">
            <summary>Mobile Field Service</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.DRV">
            <summary>Deferred Revenue</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.CRL">
            <summary>Contract Renewal</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PYC">
            <summary>Petty Cash</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.GU">
            <summary>Global Users</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EDU">
            <summary>Education Module</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AEP">
            <summary>Advanced Estimating &amp; Printing</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EPI">
            <summary>External Payroll Integration</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.PKG">
            <summary>Package Control</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.EC">
            <summary>Electronic Compliance</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.ARL">
            <summary>AR Lockbox</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.APP">
            <summary>AP Positive Pay</summary>
        </member>
        <member name="F:Epicor.ServiceModel.LicenseMapping.Module.AMC">
            <summary>AP MICR Checks</summary>
        </member>
        <member name="T:Epicor.ServiceModel.Resources.Strings">
             <summary>
             A strongly-typed resource class for looking up localized (formatted) strings.
            This is a Server Side Strings Resource File. It may contain only string entries.
             </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.CanNotAssignColumnValueInBufferCopy(System.Object,System.Object)">
             <summary>
             String: 'Can&apos;t assign value to column &apos;{0}&apos;.
            {1}'.
             </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.ConversionsPendingNotSecurityManager">
            <summary>
            String: 'This system requires Data Conversion processing to be completed by System Administrator prior to allowing login.  Please contact your System Administrator for more information.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.ConversionsPendingSecurityManager">
            <summary>
            String: 'This system requires Data Conversion processing to be completed before use.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.DataReaderLoadErr">
            <summary>
            String: 'Exception thrown while loading from data reader'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.DataRowMustContainColumn(System.Object)">
            <summary>
            String: 'The DataRow must contain the &apos;{0}&apos; column.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.DBMismatchException">
            <summary>
            String: 'Database mismatch Exception'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.IceColumnAlreadyExists(System.Object)">
            <summary>
            String: 'The IceColumn &apos;{0}&apos; already exists in the collection.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.IceRowCanNotBeAddedToAnotherTable">
            <summary>
            String: 'The row cannot be added to another table.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.InsufficientMemoryToRead(System.Object)">
            <summary>
            String: 'Unable to read the message due to insufficient memory. Size of message = {0}'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.InsufficientMemoryToWrite">
            <summary>
            String: 'Unable to write message due to insufficient memory.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.InvalidOrderByStatement(System.Object)">
            <summary>
            String: 'Invalid OrderBy statement: {0}'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.InvalidRowTypeForIceColumn">
            <summary>
            String: 'The row is not the correct type.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.OrderStatementsMustStartWithBy(System.Object)">
            <summary>
            String: 'Order statements must begin with &apos;by&apos; : {0}'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.RowBelongsToAnotherTable">
            <summary>
            String: 'Row already belongs to another Table'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.RowDoesNotSupportDynamicColumns">
            <summary>
            String: 'The row does not support dynamic column values.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.RowMustBeDataRow">
            <summary>
            String: 'The row must be a DataRow.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.RowPropertyHasNoGetter">
            <summary>
            String: 'The row property does not have a getter.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.RowPropertyHasNoSetter">
            <summary>
            String: 'The row property does not have a setter.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.SysRowIDCanNotBeCopiedToLinqRow">
            <summary>
            String: 'The SysRowID cannot be copied to a LinqRow. Remove SysRowID from the usingList parameter.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.TypeMayNotBeUsed(System.Object)">
            <summary>
            String: 'Type &apos;{0}&apos; may not be used as a source or target. Only class or struct objects are allowed.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.UDFieldContainsNull(System.Object,System.Object)">
            <summary>
            String: '&apos;{0}&apos; UD field of &apos;{1}&apos; table either is not loaded or is not defined.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.UnknownUserCountID(System.Object)">
            <summary>
            String: 'Unrecognized License for UserCountID: {0}'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.UnknownUserCountName(System.Object)">
            <summary>
            String: 'Unrecognized License for UserCount named: {0}'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.UsingListAndExceptForListCannotBeSpecifiedAtSameTime">
            <summary>
            String: 'The usingList and exceptForList cannot be specified at the same time.'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.VersionMismatchException">
            <summary>
            String: 'Version mismatch Exception'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.SessionTimedOut">
            <summary>
            String: 'Session is invalid. Session has either timed out or has been deleted. You must login again to continue.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.EpicorAppConfigPathNotFound(System.Object,System.Object)">
            <summary>
            String: 'Path {0} was not found, using default path {1}'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.BusinessLayerException">
            <summary>
            String: 'Business Layer Exception'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.BusinessLogicError">
            <summary>
            String: 'Business Logic Error'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.ServerSideError">
            <summary>
            String: 'Server Side Error'.
            </summary>
        </member>
        <member name="P:Epicor.ServiceModel.Resources.Strings.ServerSideException">
            <summary>
            String: 'Server Side Exception'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.UnexpectedSchemeFmt(System.Object,System.Object,System.Object)">
            <summary>
            String: 'Unexpected scheme is specified in the AppServer URL &apos;{0}&apos;. Scheme &apos;{1}&apos; should be used for the binding &apos;{2}&apos;.'.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Resources.Strings.SessionTimedOutWithID(System.Object)">
            <summary>
            String: 'Session with SessionID = {0} is invalid. Session has either timed out or has been deleted. You must login again to continue.'.
            </summary>
        </member>
        <member name="T:Epicor.ServiceModel.StandardBindings.InternalBinaryHttp">
            <summary>
            Creates some standard WCF binding configurations for NetTcp bindings
            </summary>
        </member>
        <member name="T:Epicor.ServiceModel.StandardBindings.NetTcp">
            <summary>
            Creates some standard WCF binding configurations for NetTcp bindings
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.NetTcp.UsernameSslChannel(System.Boolean)">
            <summary>
            Creates a netTcp binding secured by username/password transport protection
            </summary>
            <param name="compressed">Set to true to enable the compression encoder</param>
            <returns>A netTcp binding</returns>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.NetTcp.Windows(System.Boolean)">
            <summary>
            Creates a netTcp binding secured by windows transport protection
            </summary>
            <param name="compressed">Set to true to enable the compression encoder</param>
            <returns>A netTcp binding</returns>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.NetTcp.Sts(System.Uri,System.Boolean)">
            <summary>
            Create a netTcp binding secured using WS-SecureConversation
            </summary>
            <param name="issuerAddress">The URI of the security token issuer</param>
            <param name="compressed">Set to TRUE to enable the compression encoder</param>
            <returns>The netTcp binding</returns>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.NetTcp.UsernameWindowsChannel(System.Boolean)">
            <summary>
            Creates a netTcp binding secured by username/password and windows for transport protection
            </summary>
            <param name="compressed">Set to true to enable the compression encoder</param>
            <returns>A netTcp binding</returns>
        </member>
        <member name="T:Epicor.ServiceModel.StandardBindings.WsHttp">
            <summary>
            Provides some common WCF bindings for HTTP
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.WsHttp.UsernameCredential(System.Boolean)">
            <summary>
            Creates an HTTP/S binding secured using a username/password 
            </summary>
            <param name="compressed">Set to true to enable the compression encoder</param>
            <returns>A WCF binding object</returns>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.WsHttp.Windows(System.Boolean)">
            <summary>
            Creates an HTTP channel secured using Windows authentication (SSO)
            </summary>
            <param name="compressed">Set to true to enable the compression encoder</param>
            <returns>A WCF binding</returns>
        </member>
        <member name="T:Epicor.ServiceModel.StandardBindings.WsHttps">
            <summary>
            Provides some common WCF bindings for HTTP
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.WsHttps.UsernameSslChannel(System.Boolean)">
            <summary>
            Creates an HTTP/S binding secured using a username/password 
            </summary>
            <param name="compressed">Set to true to enable the compression encoder</param>
            <returns>A WCF binding object</returns>
        </member>
        <member name="M:Epicor.ServiceModel.StandardBindings.WsHttps.Windows(System.Boolean)">
            <summary>
            Creates an HTTP channel secured using Windows authentication (SSO)
            </summary>
            <param name="compressed">Set to true to enable the compression encoder</param>
            <returns>A WCF binding</returns>
        </member>
        <member name="T:Epicor.ServiceModel.Bindings.BindingName">
            <summary>
            Built-in Epicor Bindings
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.UsernameSslChannel">
            <summary>
            Legacy NET.TCP binding - Authentication: Epicor Username - Channel encrypted via SSL. Custom compression.
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.Windows">
            <summary>
            Legacy NET.TCP binding - Authentication: Windows Credentials - Channel encrypted via Windows Trusted Domain between Client and Server. Custom compression.
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.UsernameWindowsChannel">
            <summary>
            Legacy NET.TCP binding - Authentication: Epicor Username - Channel encrypted via Windows Trusted Domain between Client and Server. Custom compression.
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.TcpBinaryUsernameSslChannel">
            <summary>
             NET.TCP - Authentication: Epicor Username - Channel encrypted via SSL
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.TcpBinaryWindowsChannel">
            <summary>
            NET.TCP - Authentication: Windows Credentials - Channel encrypted via Windows Trusted Domain between Client and Server
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.TcpBinaryUsernameWindowsChannel">
            <summary>
            NET.TCP - Authentication: Epicor Username - Channel encrypted via Windows Trusted Domain between Client and Server
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.HttpBinaryUsernameSslChannel">
            <summary>
             HTTP - Authentication: Epicor Username - Channel not encypted - SOAP SSL message security is used-
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.HttpsBinaryWindowsChannel">
            <summary>
            HTTPS - Authentication: Windows credentials - Channel encrypted via https
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.HttpsBinaryUsernameChannel">
            <summary>
            HTTPS - Authentication: Epicor Username - Channel encrypted via https
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Bindings.BindingName.HttpsOffloadBinaryUserNameChannel">
            <summary>
            HTTPS - Authentication: Epicor Username - Channel encrypted via https - SSL Offloading is done on proxy
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Bindings.BindingName.IsSingleSignOn(System.String)">
            <summary>
            Returns true if binding supports SSO
            </summary>
            <param name="bindingName">binding name</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Bindings.BindingName.IsSslUsed(System.ServiceModel.Channels.CustomBinding)">
            <summary>
             Returns true if Soap SSL is used in binding
            </summary>
            <param name="customBinding"></param>
            <returns></returns>
        </member>
        <member name="T:Epicor.ServiceModel.Bindings.ConfigFileBinding">
            <summary>
            Helper functions to retrieve binding configuration from config file
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Bindings.ConfigFileBinding.GetServiceModelBindingsSection(System.String)">
            <summary>
            Gets the bindings section inside the system.serviceModel
            </summary>
            <param name="configFilePath">The path to the config file with system.serviceModel/Bindings section</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Bindings.ConfigFileBinding.GetBindingFromBindingsSection(System.String,System.ServiceModel.Configuration.BindingsSection)">
            <summary>
            Resolves the binding using specified config file
            </summary>
            <param name="name">The name of binding to retrive</param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Bindings.ConfigFileBinding.GetBindingFromConfigFile(System.String,System.String)">
            <summary>
            Resolves the binding using specified config file
            </summary>
            <param name="name">The name of binding to retrieve</param>
            <param name="configFilePath">path to config file with system.serviceModel section</param>
            <returns></returns>
        </member>
        <member name="P:Epicor.ServiceModel.Trace.ClientTracing.UserTracer.UITraceFileLocation">
            <summary>
            Gets or sets the UI trace file directory location you can set the value to a full path
            however the filename will be removed and the default will be used The UI trace file will
            use this location as long as the appdomain that called it is alive otherwise the database
            one will be used If there is no database set location the one from the epicor.exe.config
            file (UITraceFileDefaultDirectory appsetting) will be used, if that is invalid or non
            existent the default %appdata%\epicor\log will be used
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Trace.ClientTracing.UserTracer.ReloadSettings(System.Boolean,System.Data.DataSet)">
            <summary>
            Used to reload the settings file when needed
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Trace.ClientTracing.UserTracer.GetUserConfigurationDs">
            <summary>
            Returns a UserFileDataSet to be used to save the user configurations into the database or
            for review
            </summary>
            <returns>UserFileDataSet as DataSet</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Trace.ClientTracing.UserTracer.SaveSettings">
            <summary>
            Saves all changes of the trace switches
            </summary>
            <returns>true if saved correctly</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Trace.ClientTracing.UserTracer.GetTraceSwitch(System.String,System.String)">
            <summary>
            Returns a TraceSwitch
            </summary>
            <param name="switchName">The name of the switch</param>
            <param name="switchDescription">
            Optional description, if none used the <paramref name="switchName"/> value is used as description
            </param>
            <returns>A System.Diagnostics.TraceSwitch that has been cached and can be written</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Trace.ClientTracing.UserTracer.GetBooleanSwitch(System.String,System.String)">
            <summary>
            Returns a BooleanSwitch
            </summary>
            <param name="switchName">The name of the switch</param>
            <param name="switchDescription">
            Optional description, if none used the <paramref name="switchName"/> value is used as description
            </param>
            <returns>A System.Diagnostics.BooleanSwitch that has been cached and can be written</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Trace.TraceManager.#cctor">
            <summary>
            Initializes the <see cref="T:Epicor.ServiceModel.Trace.TraceManager"/> class.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Trace.TraceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Trace.TraceManager"/> class.
            </summary>
        </member>
        <member name="T:Epicor.ServiceModel.Utilities.CommonFunctions">
            <summary>
            Common functions
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.CommonFunctions.SetIsServerProcess(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.CommonFunctions.DetermineIfServerProcess">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.CommonFunctions.IsServerProcess">
            <summary>
            Checks if the process we are running is hosted, i.e. running on the server.
            </summary>
            <returns>true if running on the server</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.CommonFunctions.IsHostedEnvironment">
            <summary>
            Checks the IsHosted property in System.Web
            </summary>
            <returns></returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.CommonFunctions.GetHostedBaseDirectory">
            <summary>
            Return the root of hosted services. If running on the client returns empty string.
            </summary>
            <returns>Base Path</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.IceEnvironment.GetBinDirectory">
            <summary>
            Returns path to the Bin (hosted base) directory
            </summary>
            <returns>Path to the Bin folder</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.IceEnvironment.GetBaseDirectory">
            <summary>
            Returns path to the hosted base directory
            </summary>
            <returns>Path to the server folder</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.IceEnvironment.ParseServerPathList(System.String,System.Boolean,System.Boolean)">
            <summary>
            Parse server path list as defined in config files. Directory Path can be absolute or relative to the server. The resulting list
            contains always an absolute directory path. The list must be separated by semi-colon (;)
            </summary>
            <param name="pathList">List of relative or absolute directories</param>
            <param name="verifyPath">If true, the directory must exist. Otherwise it is not included in returned list</param>
            <param name="appendEndSlash">Option to append slash at the end</param>
            <returns>List of server directories</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.IceEnvironment.TryParseServerPath(System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Parse server path as defined in config files. Directory Path can be absolute or relative to the server. The result
            is always an absolute directory path.
            </summary>
            <param name="path">Absolute or relative directory path</param>
            <param name="verifyPath">If true, the directory must exist. Otherwise returns False and empty path</param>
            <param name="appendEndSlash">Option to append slash at the end</param>
            <param name="serverPath">The resulting absolute server directory path</param>
            <returns>True if passed verification or if valid and verification not required, False if invalid or did not pass verification</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.IceEnvironment.TryParseServerFile(System.String,System.Boolean,System.String@)">
            <summary>
            Parse server file path as defined in config files. File Path can be absolute or relative to the server. The result
            is always an absolute directory path.
            </summary>
            <param name="filePath">File Path</param>
            <param name="validateFile">Validate the file exists if <c>true</c>.</param>
            <param name="serverFilePath">Returned absolute path</param>
            <returns>
            <c>true</c> if the file exists.
            </returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.IceEnvironment.GetAssemblyFileDirectoryList">
            <summary>
            Return list of assembly file directories as defined in web.config by "AssemblyFileSystem"
            </summary>
            <returns></returns>
        </member>
        <member name="T:Epicor.ServiceModel.Utilities.Int64KeyedCache">
            <summary>
            The base class for <see cref="T:Epicor.ServiceModel.Utilities.Int64KeyedCache`1"/>.
            </summary>
            <remarks>
            Holds the non-generic members.
            </remarks>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Utilities.Int64KeyedCache" /> class.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Type,System.Type)">
            <summary>
            Builds the key.
            </summary>
            <param name="type1">The type1.</param>
            <param name="type2">The type2.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Collections.Generic.IList{System.String})">
            <summary>
            Builds the key.
            </summary>
            <param name="strings">The strings.</param>
            <returns>The key.</returns>
            <remarks>
            The hash code from each string is used to build an MD5 hash. The hash is used to build the key.
            </remarks>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.StringComparer,System.Collections.Generic.IList{System.String})">
            <summary>
            Builds the key.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="strings">The strings.</param>
            <returns>The key.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="strings"/> is <c>null</c>.</exception>
            <remarks>
            The hash code from each string is used to build an MD5 hash. The hash is used to build the key.
            </remarks>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Type,System.Type,System.Collections.Generic.IList{System.String})">
            <summary>
            Builds the key.
            </summary>
            <param name="type1">The type1.</param>
            <param name="type2">The type2.</param>
            <param name="strings">The strings.</param>
            <returns>The key.</returns>
            <remarks>
            This simply adds the results of the <see cref="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Type,System.Type)"/> and <see cref="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Collections.Generic.IList{System.String})"/>
            methods.
            </remarks>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Type,System.Type,System.StringComparer,System.Collections.Generic.IList{System.String})">
            <summary>
            Builds the key.
            </summary>
            <param name="type1">The type1.</param>
            <param name="type2">The type2.</param>
            <param name="comparer">The string comparer.</param>
            <param name="strings">The strings.</param>
            <returns>
            The key.
            </returns>
            <remarks>
            This simply adds the results of the <see cref="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Type,System.Type)" /> and <see cref="M:Epicor.ServiceModel.Utilities.Int64KeyedCache.BuildKey(System.Collections.Generic.IList{System.String})" />
            methods.
            </remarks>
        </member>
        <member name="T:Epicor.ServiceModel.Utilities.Int64KeyedCache`1">
            <summary>
            A concurrent cache using a <see cref="T:System.Int64"/> for a key.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <remarks>
            Use the static <c>BuildKey</c> methods to build common types of hashed keys.
            </remarks>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.ServiceModel.Utilities.Int64KeyedCache`1"/> class.
            </summary>
        </member>
        <member name="M:Epicor.ServiceModel.Utilities.Int64KeyedCache`1.GetOrAddItem(System.Int64,System.Func{`0})">
            <summary>
            Gets the cache item.
            </summary>
            <param name="key">The key.</param>
            <param name="itemFactory">The item factory. This is called if the item does not already exist.</param>
            <returns>The cache item.</returns>
            <remarks>
            You can use the static <c>BuildKey</c> methods to build common types of keys.
            </remarks>
        </member>
        <member name="T:Epicor.ServiceModel.Utilities.SpecialFolder">
            <summary>
            Pre-defined server folders
            </summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.Report">
            <summary>Reports folder</summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.WebDeployment">
            <summary>Web deployment folder</summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.ReportDefinition">
            <summary>Report definition folder</summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.CustomReportDefinition">
            <summary>Custom report definition folder</summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.UserData">
            <summary>User data folder</summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.CompanyData">
            <summary>Company data folder</summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.EWADeployment">
            <summary>Epicor Web Access virtual folder</summary>
        </member>
        <member name="F:Epicor.ServiceModel.Utilities.SpecialFolder.Attachment">
            <summary>Attachment folder</summary>
        </member>
        <member name="T:Epicor.Concurrency.ReadLock">
            <summary>
            Disposable wrapper for acquiring a read lock from a <see cref="T:System.Threading.ReaderWriterLockSlim"/> object.
            </summary>
        </member>
        <member name="M:Epicor.Concurrency.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Attempts to acquire a non-upgradeable read lock. Waits indefinitely.
            </summary>
            <param name="theLock">The lock object.</param>
        </member>
        <member name="M:Epicor.Concurrency.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
            Attempts to acquire a non-upgradeable read lock.
            </summary>
            <param name="theLock">The lock object.</param>
            <param name="msWait">Timeout in milliseconds.</param>
        </member>
        <member name="M:Epicor.Concurrency.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim,System.TimeSpan)">
            <summary>
            Attempts to acquire a non-upgradeable read lock.
            </summary>
            <param name="theLock">The lock object.</param>
            <param name="tsWait">A TimeSpan representing the how long to wait for the lock to be acquired.</param>
        </member>
        <member name="M:Epicor.Concurrency.ReadLock.Dispose(System.Boolean)">
            <summary>
            Releases any locks held on the <see cref="T:System.Threading.ReaderWriterLockSlim"/> object.
            </summary>
        </member>
        <member name="T:Epicor.Concurrency.RWLockSlimWrapper">
            <summary>
            Base class for managing <see cref="T:System.Threading.ReaderWriterLockSlim"/> objects.
            </summary>
        </member>
        <member name="M:Epicor.Concurrency.RWLockSlimWrapper.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Assigns the lock object
            </summary>
            <param name="locks">The lock object</param>
        </member>
        <member name="M:Epicor.Concurrency.RWLockSlimWrapper.ReleaseReadLock">
            <summary>
            Releases the ReadLock is necessary
            </summary>
        </member>
        <member name="M:Epicor.Concurrency.RWLockSlimWrapper.ReleaseUpgradeableReadLock">
            <summary>
            Releases the upgradeable read lock is necessary
            </summary>
        </member>
        <member name="M:Epicor.Concurrency.RWLockSlimWrapper.ReleaseWriteLock">
            <summary>
            Releases the upgradeable write lock is necessary
            </summary>
        </member>
        <member name="M:Epicor.Concurrency.RWLockSlimWrapper.ReleaseLock">
            <summary>
            Releases all locks currently held
            </summary>
        </member>
        <member name="T:Epicor.Concurrency.UpgradableReadLock">
            <summary>
            Disposable wrapper for acquiring an upgradeable read lock from a <see cref="T:System.Threading.ReaderWriterLockSlim"/> object.
            </summary>
        </member>
        <member name="M:Epicor.Concurrency.UpgradableReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Attempts to acquire an upgradeable read lock. Waits indefinitely.
            </summary>
            <param name="theLock">The lock object.</param>
        </member>
        <member name="M:Epicor.Concurrency.UpgradableReadLock.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
            Attempts to acquire an upgradeable read lock.
            </summary>
            <param name="theLock">The lock object.</param>
            <param name="msWait">Timeout in milliseconds.</param>
        </member>
        <member name="M:Epicor.Concurrency.UpgradableReadLock.#ctor(System.Threading.ReaderWriterLockSlim,System.TimeSpan)">
            <summary>
            Attempts to acquire an upgradeable read lock.
            </summary>
            <param name="theLock">The lock object.</param>
            <param name="tsWait">A TimeSpan representing the how long to wait for the lock to be acquired.</param>
        </member>
        <member name="M:Epicor.Concurrency.UpgradableReadLock.Dispose(System.Boolean)">
            <summary>
            Releases any locks held on the ReaderWriterLockSlim object
            </summary>
        </member>
        <member name="T:Epicor.Concurrency.WriteLock">
            <summary>
            Disposable wrapper for acquiring an write lock from a <see cref="T:System.Threading.ReaderWriterLockSlim"/> object.
            </summary>
        </member>
        <member name="M:Epicor.Concurrency.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Attempts to acquire an write lock. Waits indefinitely.
            </summary>
            <param name="theLock">The lock object.</param>
        </member>
        <member name="M:Epicor.Concurrency.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
            Attempts to acquire an write lock.
            </summary>
            <param name="theLock">The lock object.</param>
            <param name="msWait">Timeout in milliseconds.</param>
        </member>
        <member name="M:Epicor.Concurrency.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim,System.TimeSpan)">
            <summary>
            Attempts to acquire a write lock.
            </summary>
            <param name="theLock">The lock object.</param>
            <param name="tsWait">A TimeSpan representing the how long to wait for the lock to be acquired.</param>
        </member>
        <member name="M:Epicor.Concurrency.WriteLock.Dispose(System.Boolean)">
            <summary>
            Releases any locks held on the <see cref="T:System.Threading.ReaderWriterLockSlim"/> object.
            </summary>
        </member>
        <member name="T:Epicor.Data.BufferCompare">
            <summary>
            Used to execute shallow comparison of 2 objects using public property values with matching or convertible types.
            </summary>
        </member>
        <member name="M:Epicor.Data.BufferCompare.Compare``2(``0,``1)">
            <summary>
            Compares (public) property values of two objects
            </summary>
            <typeparam name="TTypeFrom">The type of the source object</typeparam>
            <typeparam name="TTypeTo">The type of the target object</typeparam>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.CompareUsing``2(``0,``1,System.String[])">
            <summary>
            Compares specified (public) properties of two objects
            </summary>
            <typeparam name="TTypeFrom">The type of the source object</typeparam>
            <typeparam name="TTypeTo">The type of the target object</typeparam>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <returns><c>true</c> if the properties listed in <paramref name="usingList"/> of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.CompareExceptFor``2(``0,``1,System.String[])">
            <summary>
            Compares (public) properties of 2 objects excluding specified properties
            </summary>
            <typeparam name="TTypeFrom">The type of the source object</typeparam>
            <typeparam name="TTypeTo">The type of the target object</typeparam>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="exceptForList">list of properties excluded from compare</param>
            <returns><c>true</c> if the properties except those in <paramref name="exceptForList"/> of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.Compare``2(``0,``1,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Compares (public) properties of two objects
            </summary>
            <typeparam name="TTypeFrom">The type of the source object</typeparam>
            <typeparam name="TTypeTo">The type of the target object</typeparam>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <param name="exceptForList">A list of properties to exclude from compare</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.Compare(System.Object,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Compares (public) properties of two objects
            </summary>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <param name="exceptForList">A list of properties to exclude from compare</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.CompareExceptFor(System.Object,System.Object,System.String[])">
            <summary>
            Compares (public) properties of two objects excluding specified properties
            </summary>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="exceptForList">A list of properties to exclude from compare</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.CompareUsing(System.Object,System.Object,System.String[])">
            <summary>
            Compares specified (public) properties of two objects
            </summary>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.Compare``2(``0,``1,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Compares (public) properties of two objects
            </summary>
            <typeparam name="TTypeFrom">The type of the source object</typeparam>
            <typeparam name="TTypeTo">The type of the target object</typeparam>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <param name="exceptForList">A list of properties to exclude when comparing</param>
            <param name="resultsList">A list of properties which were different during compare</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.Compare(System.Object,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Compares (public) properties of two objects
            </summary>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <param name="exceptForList">A list of properties to exclude when comparing</param>
            <param name="resultsList">A list of properties which were different during compare</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.Compare``2(``0,``1,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.StringComparer)">
            <summary>
            Compares (public) properties of two objects
            </summary>
            <typeparam name="TypeFrom">The type of the source object</typeparam>
            <typeparam name="TypeTo">The type of the target object</typeparam>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <param name="exceptForList">A list of properties to exclude when comparing</param>
            <param name="resultsList">A list of properties which were different during compare</param>
            <param name="strComparer">The <see cref="T:System.StringComparer"/> to use to compare text values.</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.Compare(System.Object,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.StringComparer)">
            <summary>
            Compares (public) properties from one object to another
            </summary>
            <param name="fromItem">The source object</param>
            <param name="toItem">The target object</param>
            <param name="usingList">A list of properties to compare</param>
            <param name="exceptForList">A list of properties to exclude when comparing</param>
            <param name="resultsList">A list of properties which were different during compare</param>
            <param name="strComparer">The <see cref="T:System.StringComparer"/> to use to compare text values.</param>
            <returns><c>true</c> if the properties of the two object have the same values.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.GetCachedDelegate``2">
            <summary>
            Fetches a compatible compare delegate for the source and target types (creating it if necessary)
            </summary>
            <typeparam name="TTypeFrom">The type of the source object</typeparam>
            <typeparam name="TTypeTo">The type of the target object</typeparam>
            <returns>A compare delegate for the source and target types.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompare.GetCachedDelegate(System.Type,System.Type)">
            <summary>
            Fetches a compatible compare delegate for the source and target types (creating it if necessary)
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns></returns>
        </member>
        <member name="T:Epicor.Data.BufferCompareDelegateCreator">
            <summary>
            Creates delegates to compare buffers.
            </summary>
        </member>
        <member name="M:Epicor.Data.BufferCompareDelegateCreator.GenerateDelegate``2">
            <summary>
            Creates the delegate that compares property values of two objects
            </summary>
            <typeparam name="TypeFrom">The type of the source object</typeparam>
            <typeparam name="TypeTo">The type of the target object</typeparam>
            <returns>The compare delegate</returns>
        </member>
        <member name="M:Epicor.Data.BufferCompareDelegateCreator.GenerateDelegate(System.Type,System.Type)">
            <summary>
            Creates the delegate that Compares property values of two objects
            </summary>
            <returns>The compare delegate</returns>
        </member>
        <member name="T:Epicor.Data.BufferCopy">
            <summary>
            Used to execute shallow copies between objects using public property values with matching types.
            </summary>
        </member>
        <member name="M:Epicor.Data.BufferCopy.Copy``2(``0,``1,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
            <param name="usingList">A list of properties to copy.</param>
            <param name="exceptForList">A list of properties to exclude when copying.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.Copy(System.Object,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
            <param name="usingList">A list of properties to copy.</param>
            <param name="exceptForList">A list of properties to exclude when copying.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.Clone``1(``0)">
            <summary>
            Clones the column values from the item.
            </summary>
            <typeparam name="TType">The type of the source object</typeparam>
            <param name="item">The source of the clone.</param>
            <returns>
            The clone of the item.
            </returns>
        </member>
        <member name="M:Epicor.Data.BufferCopy.Copy(System.Object,System.Object)">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.Copy(System.Object,System.Object,System.Boolean)">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
            <param name="includeSysRowID"><c>true</c> if the SysRowID should be copied.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.Copy``1(System.Object)">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <typeparam name="TTypeTo">The type of the target object.</typeparam>
            <param name="fromItem">The source object.</param>
            <returns>
            The copy of the item.
            </returns>
        </member>
        <member name="M:Epicor.Data.BufferCopy.Copy``1(System.Object,``0@)">
            <summary>
            Copies the column values from the specified items. If <paramref name="toItem" /> is <c>null</c> then a new row object is created.
            </summary>
            <typeparam name="TTypeTo">The type of the target object.</typeparam>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object passed by reference</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.CopyExceptFor(System.Object,System.Object,System.String[])">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
            <param name="exceptForList">The list of columns to exclude.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.CopyExceptFor(System.Object,System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
            <param name="exceptForList">The list of columns to exclude.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.CopyUsing(System.Object,System.Object,System.String[])">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
            <param name="usingList">A list of columns to copy.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.CopyUsing(System.Object,System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Copies the column values from the specified items.
            </summary>
            <param name="fromItem">The source object.</param>
            <param name="toItem">The target object.</param>
            <param name="usingList">A list of columns to copy.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopy.GetCopyColumnPredicate(System.Object,System.Boolean)">
            <summary>
            Gets the copy column predicate.
            </summary>
            <param name="toItem">To item.</param>
            <param name="includeSysRowID"><c>true</c> if the SysRowID should be copied.</param>
            <returns>The predicate that determines which columns should be copied.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCopy.GetCopyExceptForColumnPredicate(System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Gets the copy column predicate.
            </summary>
            <param name="toItem">To item to copy.</param>
            <param name="exceptForList">The list of columns not to copy.</param>
            <returns>The predicate that determines which columns should be copied.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCopy.GetCopyUsingColumnPredicate(System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Gets the copy column predicate.
            </summary>
            <param name="toItem">To item to copy.</param>
            <param name="usingList">The list of columns to copy.</param>
            <returns>
            The predicate that determines which columns should be copied.
            </returns>
        </member>
        <member name="M:Epicor.Data.BufferCopy.GetRowCopier(System.Object,System.Object)">
            <summary>
            Gets a delegate that will copy data from one row to another.
            </summary>
            <param name="fromItem">From item.</param>
            <param name="toItem">To item.</param>
            <returns>A delegate that will copy data from one row to another.</returns>
            <remarks>
            If you are going to copy multiple rows than it is more efficient to get the copier delegate once and use it
            multiple times rather than calling BufferCopy.Copy multiple time.
            </remarks>
        </member>
        <member name="M:Epicor.Data.BufferCopy.GetDelegate(System.Type,System.Type)">
            <summary>
            Gets a method to use for copying data from the source to target type.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns>The copy delegate.</returns>
        </member>
        <member name="M:Epicor.Data.BufferCopy.IsLinqRow(System.Object)">
            <summary>
            Determines whether row is a LinqRow.
            </summary>
            <param name="row">The row to test.</param>
            <returns>
              <c>true</c> if the row is a LinqRow.
            </returns>
        </member>
        <member name="T:Epicor.Data.BufferCopyDelegateCreator">
            <summary>
            Creates delegates to copy buffers.
            </summary>
            <remarks>
            For internal use only.
            </remarks>
        </member>
        <member name="M:Epicor.Data.BufferCopyDelegateCreator.#ctor(System.Type,System.Type)">
            <summary>
            Prevents a default instance of the <see cref="T:Epicor.Data.BufferCopyDelegateCreator" /> class from being created.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Epicor.Data.BufferCopyDelegateCreator.GenerateDelegate(System.Type,System.Type)">
            <summary>
            Creates the delegate that copies property values from one type to another.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns>
            The copy delegate.
            </returns>
        </member>
        <member name="M:Epicor.Data.BufferCopyDelegateCreator.GenerateDelegate(System.Type,System.Type,Ice.IceColumnCollection,Ice.IceColumnCollection)">
            <summary>
            Creates the delegate that copies property values from one type to another.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="sourceColumns">From columns.</param>
            <param name="targetColumns">To columns.</param>
            <returns>
            The copy delegate.
            </returns>
            <remarks>
            Use this overload if your <paramref name="sourceType"/> or <paramref name="targetType"/>
            have different columns than <see cref="M:Ice.IceColumnCollection.GetColumns(System.Type)"/> would return.
            </remarks>
        </member>
        <member name="M:Epicor.Data.BufferCopyDelegateCreator.BuildExpressionsForCopyDynamicColumnValues">
            <summary>
            Create an expression to copy Dynamic Column Values from source to target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Epicor.Data.IRowExtensions.UDField(Epicor.Data.IRow,System.String,System.Boolean)">
            <summary>
            UDs the field.
            </summary>
            <param name="row">The row.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="throwIfNull">if set to <c>true</c> [throw on null].</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Epicor.Data.IRowExtensions.UDField``1(Epicor.Data.IRow,System.String,System.Boolean)">
            <summary>
            UDs the field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">The row.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="throwIfNull">if set to <c>true</c> [throw on null].</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Data.IRowExtensions.SetUDField``1(Epicor.Data.IRow,System.String,``0)">
            <summary>
            Sets the UD field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">The row.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Epicor.Data.StringCastNativeType">
            <summary>
            Used for some edge cases where we need to convert types (mapping Guid properties to string and
            Int32/64 values mapped to byte arrays for timestamps)
            </summary>
        </member>
        <member name="T:Epicor.Data.TempRowBase">
            <summary>
            The base class for all data rows in Tablesets.
            </summary>
        </member>
        <member name="M:Epicor.Data.TempRowBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Data.TempRowBase" /> class.
            </summary>
        </member>
        <member name="P:Epicor.Data.TempRowBase.Item(System.String)">
            <summary>
            Gets or sets the data stored in the column specified by name.
            </summary>
            <param name="columnName">The name of the column.</param>
            <value>An <see cref="T:System.Object"/> that contains the data.</value>
        </member>
        <member name="T:Epicor.Data.TempRowBaseVisualizationSerializer">
            <summary>
            Creates data to serialize to the Visual Studio Debugger Visualizers.
            </summary>
        </member>
        <member name="T:Epicor.Data.TempTableBase`1">
            <summary>
            The base class for all Tableset tables.
            </summary>
            <typeparam name="TRow">The type of the row.</typeparam>
        </member>
        <member name="M:Epicor.Data.TempTableBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Data.TempTableBase`1" /> class.
            </summary>
        </member>
        <member name="T:Epicor.Data.TempTableBaseVisualizationSerializer">
            <summary>
            Creates data to serialize to the Visual Studio Debugger Visualizers.
            </summary>
        </member>
        <member name="M:Epicor.Data.TempTableBaseVisualizationSerializer.Serialize(System.Object)">
            <summary>
            Converts the <see cref="T:Epicor.Data.TempTableBase`1"/> to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="tempTable">The table to convert.</param>
            <returns>The table or a string representing the reason the table couldn't be converted.</returns>
        </member>
        <member name="T:Epicor.Data.TwoTypeKeyedCache`1">
            <summary>
            Caches items based on two <see cref="T:System.Type"/>s.
            </summary>
            <typeparam name="TItem">The type of the item to cache.</typeparam>
        </member>
        <member name="M:Epicor.Data.TwoTypeKeyedCache`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Data.TwoTypeKeyedCache`1"/> class.
            </summary>
        </member>
        <member name="M:Epicor.Data.TwoTypeKeyedCache`1.GetOrAddItem(System.Type,System.Type,System.Func{System.Type,System.Type,`0})">
            <summary>
            Gets the cache item.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
            <param name="itemFactory">Used to create the item if it isn't already in the cache.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="M:Epicor.Data.TwoTypeKeyedCache`1.GetOrAddItem(System.Type,System.Type,System.Collections.Generic.IList{System.String},System.Func{System.Type,System.Type,`0})">
            <summary>
            Gets the cache item.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
            <param name="additionalKeyData">Extra information to add to the key.</param>
            <param name="itemFactory">Used to create the item if it isn't already in the cache.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="T:Epicor.Data.TypeHelper">
            <summary>
            A utility class that formats type names for display.
            </summary>
        </member>
        <member name="M:Epicor.Data.TypeHelper.FormatTypeName(System.Type)">
            <summary>
            Formats the name of the type.
            </summary>
            <param name="type">The type.</param>
            <returns>The formatted type name.</returns>
        </member>
        <member name="M:Epicor.Data.TypeHelper.GetTypeFromNullableType(System.Type)">
            <summary>
            Gets the struct part of the nullable type.
            </summary>
            <param name="nullableType">The nullable type.</param>
            <returns>The struct part of the nullable type.</returns>
        </member>
        <member name="M:Epicor.Data.TypeHelper.IsNullableValueType(System.Type)">
            <summary>
            Determines whether type is a nullable value type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type is a nullable value type.</returns>
        </member>
        <member name="T:Epicor.Hashing.ByteBuffer">
            <summary>
            Holds a byte buffer of data that gets overwritten each time it is filled up.
            </summary>
            <remarks>
            This is only intended to be used by the <see cref="T:Epicor.Hashing.MurmurHash3Writer"/>.
            </remarks>
        </member>
        <member name="M:Epicor.Hashing.ByteBuffer.#ctor(System.Int32,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Hashing.ByteBuffer" /> class.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="bufferFullCallback">The buffer full callback.</param>
        </member>
        <member name="P:Epicor.Hashing.ByteBuffer.BufferSize">
            <summary>
            Gets the size of the buffer.
            </summary>
            <value>
            The size of the buffer.
            </value>
        </member>
        <member name="P:Epicor.Hashing.ByteBuffer.Length">
            <summary>
            Gets the current number of bytes in the buffer.
            </summary>
            <value>
            The current number of bytes in the buffer.
            </value>
        </member>
        <member name="P:Epicor.Hashing.ByteBuffer.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
            <remarks>
            <para>This is the "live" buffer. Do not make any changes to it. The value changes as items are added to it.</para>
            <para>Use the <see cref="P:Epicor.Hashing.ByteBuffer.Length"/> property to determine how many of the bytes are valid. If you are getting
            a partial buffer then the end bytes are left over from the previous buffer.</para>
            </remarks>
        </member>
        <member name="M:Epicor.Hashing.ByteBuffer.Write(System.Byte)">
            <summary>
            Writes the byte to the buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Epicor.Hashing.ByteBuffer.Write(System.Byte[])">
            <summary>
            Writes the bytes to the buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Epicor.Hashing.ByteBuffer.Write(System.Int32)">
            <summary>
            Writes the integer to the buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Epicor.Hashing.ByteBuffer.Write(System.String)">
            <summary>
            Writes the string to the buffer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Epicor.Hashing.ByteContainer">
            <summary>
            Utility class for routines to collect byte representation of data for hash calculation
            </summary>
        </member>
        <member name="M:Epicor.Hashing.ByteContainer.Add(System.Byte)">
            <summary>
            Adds a single byte value to the buffer
            </summary>
            <param name="theByte">The byte value</param>
        </member>
        <member name="M:Epicor.Hashing.ByteContainer.Add(System.String)">
            <summary>
            Adds a string (with marker) to the byte buffer as UTF-8
            </summary>
            <param name="str">The string value</param>
        </member>
        <member name="M:Epicor.Hashing.ByteContainer.AddRaw(System.String)">
            <summary>
            Adds a string to the byte buffer as Unicode with no string marker
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Epicor.Hashing.ByteContainer.Add(System.Byte[])">
            <summary>
            Adds the byte array to the byte buffer
            </summary>
            <param name="theBytes">The bytes to copy</param>
        </member>
        <member name="M:Epicor.Hashing.ByteContainer.Add(System.Int32)">
            <summary>
            Adds an integer value to the byte buffer
            </summary>
            <param name="theValue">The integer value</param>
        </member>
        <member name="M:Epicor.Hashing.ByteContainer.GetBuffer(System.Int32@)">
            <summary>
            Returns the byte buffer and the buffer length
            </summary>
            <param name="length">The length of the buffer</param>
            <returns>The byte buffer</returns>
        </member>
        <member name="M:Epicor.Hashing.ByteContainer.GrowIfNeeded(System.Int32)">
            <summary>
            Adds blocks to the buffer based on the growth expectation
            </summary>
            <param name="growthSize">The required byte count. The buffer will grow in blocks regardless of this value.</param>
        </member>
        <member name="T:Epicor.Hashing.MurmurHash3">
            <summary>
            Implementation of the MurmurHash3 algorithm
            </summary>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt32(Epicor.Hashing.ByteContainer,System.UInt32)">
            <summary>
            Calculates an integer hash
            </summary>
            <param name="bc">The ByteContainer object containing the source data</param>
            <param name="seed">An optional seed</param>
            <returns>An integer hash</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt32(Epicor.Hashing.ByteContainer,System.UInt32)">
            <summary>
            Calculates an unsigned integer hash
            </summary>
            <param name="bc">The ByteContainer object containing the source data</param>
            <param name="seed">An optional seed</param>
            <returns>An unsigned integer hash</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt64(Epicor.Hashing.ByteContainer,System.UInt32)">
            <summary>
            Calculates a long hash
            </summary>
            <param name="bc">The ByteContainer object containing the source data</param>
            <param name="seed">An optional seed</param>
            <returns>A long hash</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt64(Epicor.Hashing.ByteContainer,System.UInt32)">
            <summary>
            Calculates an unsigned long hash
            </summary>
            <param name="bc">The ByteContainer object containing the source data</param>
            <param name="seed">An optional seed</param>
            <returns>An unsigned long hash</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt128(Epicor.Hashing.ByteContainer,System.UInt32)">
            <summary>
            Calculates an unsigned 128-bit (2xUInt64) hash
            </summary>
            <param name="bc">The ByteContainer object containing the source data</param>
            <param name="seed">An optional seed</param>
            <returns>An unsigned 128-bit (2xUInt64) hash</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt32(System.String[],System.UInt32)">
            <summary>
            Calculates an integer hash from a list of strings
            </summary>
            <param name="strList">The list of strings</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt32(System.Collections.Generic.IList{System.String},System.UInt32)">
            <summary>
            Calculates an integer hash from a list of strings
            </summary>
            <param name="strList">The list of strings</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt32(System.String,System.UInt32)">
            <summary>
            Calculates an integer hash from a string
            </summary>
            <param name="str">The input string</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt32(System.String,System.UInt32)">
            <summary>
            Calculates an integer hash from a string
            </summary>
            <param name="str">The input string</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt64(System.String,System.UInt32)">
            <summary>
            Calculates an integer hash from a string
            </summary>
            <param name="str">The input string</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt64(System.Int32[],System.UInt32)">
            <summary>
            Calculates an integer hash from list if integers
            </summary>
            <param name="intList">Array of integers</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt64(System.String,System.UInt32)">
            <summary>
            Calculates an integer hash from a string
            </summary>
            <param name="str">The input string</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt128(System.String,System.UInt32)">
            <summary>
            Calculates an integer hash from a string
            </summary>
            <param name="str">The input string</param>
            <param name="seed">An optional seed value</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt32(System.Int32[],System.UInt32)">
            <summary>
            Creates an integer hash value from a list of integers
            </summary>
            <param name="intList">The list of integers</param>
            <param name="seed">An optional seed</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt32(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Calculates an unsigned integer hash
            </summary>
            <param name="key">The bytes containing data to be hashed</param>
            <param name="len">The number of bytes to include in the hash</param>
            <param name="seed">An optional seed</param>
            <returns>A hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashInt64(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Calculates a long hash
            </summary>
            <param name="key">The bytes containing data to be hashed</param>
            <param name="len">The number of bytes to include in the hash</param>
            <param name="seed">An optional seed</param>
            <returns>A hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt64(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Calculates an unsigned long hash
            </summary>
            <param name="key">The bytes containing data to be hashed</param>
            <param name="len">The number of bytes to include in the hash</param>
            <param name="seed">An optional seed</param>
            <returns>A hash value</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt128(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Hashes the input bytes into an unsigned 128-bit value (2x UInt64)
            </summary>
            <param name="key">The bytes to hash</param>
            <param name="len">The length of the byte array</param>
            <param name="seed">A seed value</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3.HashUInt128Unsafe(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Hashes the input bytes into an unsigned 128-bit value (2x UInt64)
            </summary>
            <param name="key">The bytes to hash</param>
            <param name="len">The length of the byte array</param>
            <param name="seed">A seed value</param>
            <returns></returns>
            
        </member>
        <member name="T:Epicor.Hashing.MurmurHash3Writer">
            <summary>
            Computes a MurmurHash3 hash using the data written to it.
            </summary>
            <remarks>
            Use the <see cref="P:Epicor.Hashing.MurmurHash3Writer.BufferWriter"/> to write data to be hashed. Use the appropriate Compute method to compute the hash.
            </remarks>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3Writer.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Hashing.MurmurHash3Writer" /> class.
            </summary>
        </member>
        <member name="P:Epicor.Hashing.MurmurHash3Writer.BufferWriter">
            <summary>
            Gets the buffer writer.
            </summary>
            <value>
            The buffer writer.
            </value>
            <remarks>All data to be hashed is written through the <see cref="T:Epicor.Hashing.ByteBuffer"/>.</remarks>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3Writer.ComputeInt32">
            <summary>
            Computes the hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3Writer.ComputeUInt32">
            <summary>
            Computes the hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3Writer.ComputeInt64">
            <summary>
            Computes the hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3Writer.ComputeUInt64">
            <summary>
            Computes the hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Epicor.Hashing.MurmurHash3Writer.ComputeUInt128">
            <summary>
            Computes the hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="T:Epicor.Hosting.AuthTokenHeader">
            <summary>
            
            </summary>
        </member>
        <member name="T:Epicor.Hosting.CallerInfo">
            <summary>
            Used for tracing activities by caller machine or IP address
            </summary>
        </member>
        <member name="T:Epicor.Hosting.CallSettings">
            <summary>
            Contains call-specific settings received from the caller.  These values *override* whatever defaults
            the server would otherwise use (from UserFile, for example).
            </summary>
        </member>
        <member name="M:Epicor.Hosting.CallSettings.#cctor">
            <summary>
            For test/debug purposes, the current company can be fixed on the server.  The appsetting "DefaultCallSettings"
            can contain name/value pairs (name=value;name=value).  At this time, only the company can be set.
            </summary>
        </member>
        <member name="M:Epicor.Hosting.CallSettings.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new instance of the CallSettings Header
            </summary>
            <param name="company">Current Company</param>
            <param name="plant">Current Plant</param>
            <param name="language">Current Language</param>
            <param name="formatCulture">Current Culture</param>
        </member>
        <member name="T:Epicor.Hosting.License">
            <summary>
            A header used to indicate a claimed license.  Not yet used in Ice 3.
            </summary>
        </member>
        <member name="M:Epicor.Hosting.License.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Hosting.License" /> class.
            </summary>
        </member>
        <member name="M:Epicor.Hosting.License.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Hosting.License" /> class.
            </summary>
            <param name="licenseType">Type of the license.</param>
        </member>
        <member name="M:Epicor.Hosting.License.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Hosting.License" /> class.
            </summary>
            <param name="licenseType">Type of the license.</param>
        </member>
        <member name="M:Epicor.Hosting.License.SetSessionOnLicenseHeader(System.Collections.Generic.KeyedByTypeCollection{Epicor.ServiceModel.Headers.ICallHeader},System.Guid)">
            <summary>
            Set the SessionID Guid onto the License header
            </summary>
            <param name="Headers">The Collection of Headers</param>
            <param name="SessionID">The SessionID Guid</param>
            <returns>The License Header</returns>
        </member>
        <member name="T:Epicor.Hosting.OnBehalfOfToken">
            <summary>
            Used to indicate the call is impersonating another user.
            </summary>
        </member>
        <member name="T:Epicor.Hosting.SessionInfo">
            <summary>
            A header used to indicate a claimed license.  Not yet used in Ice 3.
            </summary>
        </member>
        <member name="T:Epicor.Hosting.TaskCaller.SubTaskParameter">
            <summary>
            Class used to pass parameters from a parent task process to a child sub-process.
            </summary>
        </member>
        <member name="T:Epicor.Hosting.TaskCaller.SubTaskParameterDataType">
            <summary>
            SubTaskParameter data types.
            </summary>
        </member>
        <member name="M:Epicor.Security.Cryptography.Encryptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Security.Cryptography.Encryptor"/> class.
            </summary>
        </member>
        <member name="T:Epicor.TransientFaults.Properties.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.ArgumentCannotBeDefault">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be initialized with its default value..
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.ArgumentCannotBeGreaterThanBaseline">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be greater than its ceiling value of {1}..
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.ArgumentCannotBeNegative">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be initialized with a negative value..
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.ArgumentCannotBeZeroOrNegative">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be initialized with a zero or negative value..
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value of the argument {0} provided for the enumeration {1} is invalid..
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.RetryLimitExceeded">
            <summary>
              Looks up a localized string similar to The action has exceeded its defined retry limit..
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The specified string argument {0} must not be empty..
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.Properties.ExceptionMessages.TypeNotCompatible">
            <summary>
              Looks up a localized string similar to The specified type {0} is not compatible with {1}..
            </summary>
        </member>
        <member name="T:Epicor.TransientFaults.ExponentialBackoff">
            <summary>
            A retry strategy with back-off parameters for calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.ExponentialBackoff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.ExponentialBackoff"/> class. 
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.ExponentialBackoff.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.ExponentialBackoff"/> class. 
            </summary>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.ExponentialBackoff"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.ExponentialBackoff"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
            <param name="firstFastRetry">
            Indicates whether or not the very first retry attempt will be made immediately 
            whereas the subsequent retries will remain subject to retry interval.
            </param>
        </member>
        <member name="M:Epicor.TransientFaults.ExponentialBackoff.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Epicor.TransientFaults.FixedInterval">
            <summary>
            A RetryPolicy with a specified number of retry attempts and a default fixed time interval between retries.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.FixedInterval.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.FixedInterval"/> class. 
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.FixedInterval.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.FixedInterval"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Epicor.TransientFaults.FixedInterval.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.FixedInterval"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.FixedInterval"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.FixedInterval"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Epicor.TransientFaults.FixedInterval.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Epicor.TransientFaults.Guard">
            <summary>
            Implements the common guard methods.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>The return value should be ignored. It is intended to be used only when validating arguments during instance creation (e.g. when calling base constructor).</returns>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            /// <returns>The return value should be ignored. It is intended to be used only when validating arguments during instance creation (e.g. when calling base constructor).</returns>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.ArgumentNotDefaultValue``1(``0,System.String)">
            <summary>
            Checks an argument to ensure that its value is not the default value for its type.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argumentValue">The value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.ArgumentNotZeroOrNegativeValue(System.Int32,System.String)">
            <summary>
            Checks an argument to ensure that its value is not zero or negative.
            </summary>
            <param name="argumentValue">The value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.ArgumentNotNegativeValue(System.Int32,System.String)">
            <summary>
            Checks an argument to ensure that its value is not negative.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Int32"/> value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.ArgumentNotNegativeValue(System.Int64,System.String)">
            <summary>
            Checks an argument to ensure that its value is not negative.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Int64"/> value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.ArgumentNotGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Checks an argument to ensure that its value doesn't exceed the specified ceiling baseline.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Double"/> value of the argument.</param>
            <param name="ceilingValue">The <see cref="T:System.Double"/> ceiling value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.EnumValueIsDefined(System.Type,System.Object,System.String)">
            <summary>
            Checks an Enum argument to ensure that its value is defined by the specified Enum type.
            </summary>
            <param name="enumType">The Enum type the value should correspond to.</param>
            <param name="value">The value to check for.</param>
            <param name="argumentName">The name of the argument holding the value.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.TypeIsAssignableFromType(System.Type,System.Type,System.String)">
            <summary>
            Verifies that an argument type is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy).
            </summary>
            <param name="assignee">The argument type.</param>
            <param name="providedType">The type it must be assignable from.</param>
            <param name="argumentName">The argument name.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Guard.IsValueDefined``1(``0)">
            <summary>
            Checks the specified value to ensure that its value is defined, i.e. not null and not default value.
            </summary>
            <typeparam name="T">The type of the value to be checked.</typeparam>
            <param name="value">The value to be checked.</param>
            <returns>True if the value is defined or false if it's null or represents a default value for its type.</returns>
        </member>
        <member name="T:Epicor.TransientFaults.Incremental">
            <summary>
            A RetryPolicy with a specified number of retry attempts and an incremental time interval between retries.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.Incremental.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.Incremental"/> class. 
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.Incremental.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.Incremental"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.Incremental"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.Incremental"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Epicor.TransientFaults.Incremental.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Epicor.TransientFaults.ITransientErrorDetectionStrategy">
            <summary>
            Defines an interface which must be implemented by custom components responsible for detecting specific transient conditions.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.ITransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as transient, otherwise false.</returns>
        </member>
        <member name="T:Epicor.TransientFaults.RetryingEventArgs">
            <summary>
            Contains information required for the <see cref="E:Epicor.TransientFaults.RetryPolicy.Retrying"/> event.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.RetryingEventArgs"/> class.
            </summary>
            <param name="currentRetryCount">The current retry attempt count.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
        </member>
        <member name="P:Epicor.TransientFaults.RetryingEventArgs.CurrentRetryCount">
            <summary>
            Gets the current retry count.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.RetryingEventArgs.Delay">
            <summary>
            Gets the delay indicating how long the current thread will be suspended for before the next iteration will be invoked.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.RetryingEventArgs.LastException">
            <summary>
            Gets the exception which caused the retry conditions to occur.
            </summary>
        </member>
        <member name="T:Epicor.TransientFaults.RetryLimitExceededException">
            <summary>
            The special type of exception that provides managed exit from a retry loop. The user code can use this
            exception to notify the retry policy that no further retry attempts are required.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.RetryLimitExceededException"/> class with a default error message.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.RetryLimitExceededException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryLimitExceededException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.RetryLimitExceededException"/> class with a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.RetryLimitExceededException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.RetryLimitExceededException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Epicor.TransientFaults.RetryPolicy">
            <summary>
            Provides the base implementation of the retry mechanism for unreliable actions and transient conditions.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryPolicy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryPolicy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with the default <see cref="T:Epicor.TransientFaults.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryPolicy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with the default <see cref="T:Epicor.TransientFaults.Incremental"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryPolicy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with the default <see cref="T:Epicor.TransientFaults.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.#ctor(Epicor.TransientFaults.ITransientErrorDetectionStrategy,Epicor.TransientFaults.RetryStrategy)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Epicor.TransientFaults.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryStrategy">The retry strategy to use for this retry policy.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.#ctor(Epicor.TransientFaults.ITransientErrorDetectionStrategy,System.Int32)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Epicor.TransientFaults.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.#ctor(Epicor.TransientFaults.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Epicor.TransientFaults.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The interval between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.#ctor(Epicor.TransientFaults.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and back-off parameters for calculating the exponential delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Epicor.TransientFaults.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time.</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The time value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.#ctor(Epicor.TransientFaults.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Epicor.TransientFaults.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="E:Epicor.TransientFaults.RetryPolicy.Retrying">
            <summary>
            An instance of a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.RetryPolicy.RetryStrategy">
            <summary>
            Gets the retry strategy.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.RetryPolicy.ErrorDetectionStrategy">
            <summary>
            Gets the instance of the error detection strategy.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.ExecuteAction(System.Action)">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.ExecuteAction``1(System.Func{``0})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})">
            <summary>
            Repetitively executes the specified asynchronous action while it satisfies the current retry policy.
            </summary>
            <param name="beginAction">The begin method of the async pattern.</param>
            <param name="endAction">The end method of the async pattern.</param>
            <param name="successHandler">The action to perform when the async operation is done.</param>
            <param name="faultHandler">The fault handler delegate that will be triggered if the operation cannot be successfully invoked despite retry attempts.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Repetitively executes the specified asynchronous action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of the object returned by the async operation.</typeparam>
            <param name="beginAction">The begin method of the async pattern.</param>
            <param name="endAction">The end method of the async pattern.</param>
            <param name="successHandler">The action to perform when the async operation is done.</param>
            <param name="faultHandler">The fault handler delegate that will be triggered if the operation cannot be successfully invoked despite retry attempts.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)">
            <summary>
            Notifies the subscribers whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastError">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
        </member>
        <member name="T:Epicor.TransientFaults.RetryPolicy.TransientErrorIgnoreStrategy">
            <summary>
            Implements a strategy that ignores any transient errors.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.TransientErrorIgnoreStrategy.IsTransient(System.Exception)">
            <summary>
            Always return false.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="T:Epicor.TransientFaults.RetryPolicy.TransientErrorCatchAllStrategy">
            <summary>
            Implements a strategy that treats all exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy.TransientErrorCatchAllStrategy.IsTransient(System.Exception)">
            <summary>
            Always return true.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="T:Epicor.TransientFaults.RetryPolicy`1">
            <summary>
            Provides a generic version of the <see cref="T:Epicor.TransientFaults.RetryPolicy"/> class.
            </summary>
            <typeparam name="T">The type implementing the <see cref="T:Epicor.TransientFaults.ITransientErrorDetectionStrategy"/> interface that is responsible for detecting transient conditions.</typeparam>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy`1.#ctor(Epicor.TransientFaults.RetryStrategy)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="retryStrategy">The retry strategy to use for this retry policy.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed time interval between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time interval between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The interval between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy`1.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and back-off parameters for calculating the exponential delay between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time.</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The time value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Epicor.TransientFaults.RetryPolicy`1.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="T:Epicor.TransientFaults.ShouldRetry">
            <summary>
            Defines a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <returns>Returns a callback delegate that will be invoked whenever to retry should be attempt.</returns>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultClientRetryCount">
            <summary>
            The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultClientBackoff">
            <summary>
            The default amount of time used when calculating a random delta in the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultMaxBackoff">
            <summary>
            The default maximum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultMinBackoff">
            <summary>
            The default minimum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultRetryInterval">
            <summary>
            The default amount of time defining an interval between retries.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultRetryIncrement">
            <summary>
            The default amount of time defining a time increment between retry attempts in the progressive delay policy.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultFirstFastRetry">
            <summary>
            The default flag indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultClientRetryCount"/> and <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultRetryInterval"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultRetryInterval"/> and <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultRetryIncrement"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Epicor.TransientFaults.RetryStrategy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultMinBackoff"/>, <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultMaxBackoff"/> and <see cref="F:Epicor.TransientFaults.RetryStrategy.DefaultClientBackoff"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryStrategy.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.TransientFaults.RetryStrategy"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="P:Epicor.TransientFaults.RetryStrategy.FastFirstRetry">
            <summary>
            Gets or sets a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="P:Epicor.TransientFaults.RetryStrategy.Name">
            <summary>
            Gets the name of the retry strategy.
            </summary>
        </member>
        <member name="M:Epicor.TransientFaults.RetryStrategy.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Epicor.Utilities.CachingEnumerableExtensions">
            <summary>
            The extension methods for <see cref="T:Epicor.Utilities.CachingEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Epicor.Utilities.CachingEnumerableExtensions.Cached``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a cached enumerable for the specified enumerable.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="source">The source.</param>
            <returns>A cached enumerable for the specified enumerable.</returns>
        </member>
        <member name="T:Epicor.Utilities.CachingEnumerable`1">
            <summary>
            Caches a specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <remarks>
            <para><see cref="M:Epicor.Utilities.CachingEnumerable`1.GetEnumerator"/> can be called multiple times but will only query the
            specified enumerator once for a specific item. For example, if <see cref="M:Epicor.Utilities.CachingEnumerable`1.GetEnumerator"/>
            is called twice and the first calls <c>MoveNext</c> once then the first time the second
            calls <c>MoveNext</c>, it will return the value already retrieved. This can make working
            with LINQ much more efficient. For example, imagine you need to get a list of items. You
            need to do some up front processing to see if there are any items in the list. After that
            you will walk through all the items in the enumeration. If what you are enumerating is a
            Entity Framework query to a SQL Server database, then the query will be run once to determine
            if there are any matching rows. It will be ran again to pull down the individual rows.
            Obviously, it is very inefficient to query the SQL Server twice.</para>
            <para>Use <see cref="M:Epicor.Utilities.CachingEnumerable`1.GetConsumingEnumerable"/> to read through any cached values and
            finish reading through the source enumerable.</para>
            <para>The current implementation is NOT thread safe.</para>
            </remarks>
        </member>
        <member name="M:Epicor.Utilities.CachingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Utilities.CachingEnumerable`1" /> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Epicor.Utilities.CachingEnumerable`1.GetConsumingEnumerable">
            <summary>
            Gets the consuming enumerable.
            </summary>
            <returns>The consuming enumerable.</returns>
            <remarks>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that removes and returns items from the collection.
            </remarks>
        </member>
        <member name="M:Epicor.Utilities.CachingEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Epicor.Utilities.DataSetWrapper">
            <summary>
            Utility to convert between System.Data.DataSet and standard .NET collection
              The MSFT DataContractJsonSerializer cannot serialize DataSets to JSON (or back).
              This utility can be used to first convert a DataSet to .NET collections, which
                in turn can be converted to JSON by the MSFT DataContractJsonSerializer.
            </summary>
        </member>
        <member name="M:Epicor.Utilities.DataSetWrapper.ConvertDataSetNoColumnNames(System.Data.DataSet)">
            <summary>
            Converts a System.Data.DataSet to a .NET collection
              This version can be used if the resulting JSON should not have column names.
              The resulting Dictionary has the table name as the key, and the value is a list of list of objects
                (the first list is a list of rows, and the list of objects in each row are the column values).
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.DataSetWrapper.ConvertDataTableNoColumnNames(System.Data.DataTable)">
            <summary>
            Converts a System.Data.DataTable to a .NET collection
              This version can be used if the resulting JSON should not have column names.
              The resulting collection is a list of list of objects
                (the first list is a list of rows, and the list of objects in each row are the column values).
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.DataSetWrapper.ConvertDataSet(System.Data.DataSet)">
            <summary>
            Converts a DataSet  into a collections based representation
              Required for JSON serialization of DataSet
              Use this version to include the column headers in the resulting JSON.
                The resulting Dictionary has the key as the name of the table, the values being the table content.
                The table content is a list for the rows, and the inside Dictionary are the column headers and values
            </summary>
            <param name="input">the DataSet to convert</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.DataSetWrapper.ConvertDataTable(System.Data.DataTable)">
            <summary>
            Converts a DataTable into a collections based representation
              Required for JSON serialization of DataSet
                The resulting table content is a list for the rows, and the Dictionary are the column headers and values
            </summary>
            <param name="table">the DataTable to convert</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.DataSetWrapper.ToDataSet``2(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}})">
            <summary>
            Converts a Tableset, represented by collections, into a DataSet
            </summary>
            <typeparam name="DType"></typeparam>
            <typeparam name="TType"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.DataSetWrapper.ToDataTable``1(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Converts a Table, represented by collections, into a DataTable
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="tableName"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:Epicor.Utilities.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Epicor.Utilities.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Epicor.Utilities.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>
            The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="T:Epicor.Utilities.FileHelper">
            <summary>
            A utility class for working with files.
            </summary>
        </member>
        <member name="M:Epicor.Utilities.FileHelper.ReplaceInvalidFileNameCharacters(System.String,System.String)">
            <summary>
            Replaces the invalid file name characters.
            </summary>
            <param name="filename">The filename.</param>
            <param name="replacementValue">The string to replace each invalid character with.</param>
            <returns>The valid filename.</returns>
            <remarks>
            Do not use this on a file path since the path separators will be removed.
            </remarks>
        </member>
        <member name="T:Epicor.Utilities.ImmutableBaseList`1">
            <summary>
            Holds the original base list until the user tries to modify the list.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <remarks>
            For performance and scalability, it is sometimes nice to be able to reuse the same
            list multiple times. Unfortunately, that means that a user could modify the list and
            those modifications would show up for all users of the list. This class tries to
            mitigate those issues by keeping the original list until the user tries to modify it.
            At that point the original list is copied and the user can modify their instance of
            the list. This should be a good balance between performance and usability.
            </remarks>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Epicor.Utilities.ImmutableBaseList`1" /> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Epicor.Utilities.ImmutableBaseList`1.Count">
            <summary>
            Gets the number of elements contained in the data.
            </summary>
            <returns>The number of elements contained in the data.</returns>
        </member>
        <member name="P:Epicor.Utilities.ImmutableBaseList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the data is read-only.
            </summary>
            <returns>Always returns <c>true</c>.</returns>
            <remarks>
            The only reason to use this class is to allow users to modify a copy of the original list.
            Therefore, we already return <c>true</c>.
            </remarks>
        </member>
        <member name="P:Epicor.Utilities.ImmutableBaseList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="TItem"/> at the specified index.
            </summary>
            <value>
            The <typeparamref name="TItem"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The data at the index.</returns>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.Add(`0)">
            <summary>
            Adds an item to the data.
            </summary>
            <param name="item">The object to add to the data.</param>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.Clear">
            <summary>
            Removes all items from the data.
            </summary>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.Contains(`0)">
            <summary>
            Determines whether the data contains a specific value.
            </summary>
            <param name="item">The object to locate in the data.</param>
            <returns>
            <c>true</c> if item is found in the data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the data to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from data. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the data.
            </summary>
            <param name="item">The object to locate in the data.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the data at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the data.</param>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the data.
            </summary>
            <param name="item">The object to remove from the data.</param>
            <returns>
            true if item was successfully removed from the data; otherwise, false. This method also returns false if item is not found in the original data.
            </returns>
        </member>
        <member name="M:Epicor.Utilities.ImmutableBaseList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the data item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="T:Epicor.Utilities.JsonSerializer">
            <summary>
            Wrapper class for the MSFT DataContractJsonSerializer
            </summary>
        </member>
        <member name="M:Epicor.Utilities.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object to JSON, in byte array form
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.JsonSerializer.SerializeAsString(System.Object)">
            <summary>
            Serialize an object to JSON, in string form
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.JsonSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Convert a JSON object in byte array form to its .NET T Type 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Convert a JSON object in string form to its .NET T Type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.JsonSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Convert a JSON object in string form to its .NET type Type
            </summary>
            <param name="type"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.JsonSerializer.Base64Serialize(System.Object)">
            <summary>
            Serializes an object into a Base64 string.
              First converts object to byte [].
              Then converts to Base64 string.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.JsonSerializer.Base64Deserialize``1(System.String)">
            <summary>
            Deserializes a string value following below convention into object.
              Goes from Base64 string to byte[].
              Then deserializes the byte[] into object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="encodedText"></param>
            <returns></returns>
        </member>
        <member name="T:Epicor.Utilities.Memoizer">
            <summary>
            Wraps a function so that for each unique argument, the function is only called once.
            </summary>
            <remarks>
            Basically the results of the function calls are cached.
            </remarks>
        </member>
        <member name="M:Epicor.Utilities.Memoizer.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Caches the function calls with the same arguments. This is NOT thread-safe.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="comparer">The comparer.</param>
            <returns>A memoized version of the function.</returns>
        </member>
        <member name="M:Epicor.Utilities.Memoizer.MemoizeConcurrent``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Caches the function calls with the same arguments.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="comparer">The comparer.</param>
            <returns>A memoized version of the function.</returns>
        </member>
        <member name="T:Epicor.Utilities.StringExtensions">
            <summary>
            Contains utility functions for strings.
            </summary>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.FwdBackSlash(System.String)">
            <summary>
            Converts forward slashes to backslashes after the first 2 characters.
            </summary>
            <param name="str">The input string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.SubString(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a substring of the input string up to the end of the string or the character count, which ever comes first.
            </summary>
            <param name="str">The input string.</param>
            <param name="start">The start position (zero based).</param>
            <param name="count">The number of characters to include.</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.NumEntries(System.String,System.String)">
            <summary>
            Returns the number of items in a delimited list.
            </summary>
            <param name="srcString">The input string.</param>
            <param name="delimiter">Delimiter.</param>
            <returns>The number of items in the delimited string.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.NumEntries(System.String,System.Char)">
            <summary>
            Returns the number of items in a delimited list.
            </summary>
            <param name="srcString">The input string.</param>
            <param name="delimiter">Delimiter.</param>
            <returns>The number of items in the delimited string.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Entry(System.String,System.Int32,System.String)">
            <summary>
            Returns a string item from a delimited list.
            </summary>
            <param name="srcString">The input string.</param>
            <param name="index">The index of the delimited item.</param>
            <param name="delimiter">The delimiting character.</param>
            <returns>The string item parsed from the delimited list.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Entry(System.String,System.Int32,System.Char)">
            <summary>
            Returns a string item from a delimited list.
            </summary>
            <param name="sourceString">The input string.</param>
            <param name="index">The index of the delimited item.</param>
            <param name="delimiter">The delimiting character.</param>
            <returns>The string item parsed from the delimited list.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Entry(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns a string item from a delimited list.
            </summary>
            <param name="sourceString">The input string.</param>
            <param name="newValue"></param>
            <param name="index">The index of the delimited item.</param>
            <param name="delimiter">The delimiting character.</param>
            <returns>The string item parsed from the delimited list.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Entry(System.String,System.String,System.Int32,System.Char)">
            <summary>
            Replaces the value in the delimited string at the position requested.
            </summary>
            <param name="sourceString">The full delimited string that will be parsed and newValue place into.</param>
            <param name="newValue">The value replaced or inserted.</param>
            <param name="index">The 0-based position the new value is being placed.</param>
            <param name="delimiter">The character that delimits the string.</param>
            <returns>The source string updated with newValue placed within it.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Lookup(System.String,System.String,System.String)">
            <summary>
            Returns the zero based position of the search text in delimiter list.
            </summary>
            <param name="list">The delimited list to search.</param>
            <param name="search">The value to search for.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>The position of search text in the list or -1 if not found.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Lookup(System.String,System.String,System.Char)">
            <summary>
            Returns the zero based position of the search text in delimiter list.
            </summary>
            <param name="list">The delimited list to search.</param>
            <param name="search">The value to search for.</param>
            <param name="delimiter">The delimiter character.</param>
            <returns>The position of search text in the list or -1 if not found.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Case-insensitive string comparison (trims trailing spaces).
            NOT to be used to compare user entered or key data strings. For comparing user entered string use str1.KeyEquals(str2).
            </summary>
            <param name="thisString">One string.</param>
            <param name="str">Another string.</param>
            <param name="caseSensitive">true if comparison should be case sensitive; otherwise false.</param>
            <returns>-1, 0, or 1 depending on the comparison result.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.StringEqual(System.String,System.String)">
            <summary>
            Does a case insensitive string compare.
            </summary>
            <param name="match1">The first string to match.</param>
            <param name="match2">The second string to match.</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.KeyEquals(System.String,System.String)">
            <summary>
            This method sould be used to compare user entered data strings. For example, to compare CustomerID, CustomerName etc.
            NOT to be used when comparing ordinal strings such as fixed types or static text (use str1.Equals(str2, StringComparison.OrdinalIgnoreCase)).
            </summary>
            <param name="str1">First string to compare.</param>
            <param name="str2">Second string to compare.</param>
            <returns>True if str1 and str2 are equal.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.KeyCompare(System.String,System.String)">
            <summary>
            This method sould be used to compare user entered data strings. For example, to compare CustomerID, CustomerName etc.
            NOT to be used when comparing ordinal strings such as fixed types or static text (use str1.Equals(str2, StringComparison.OrdinalIgnoreCase)).
            </summary>
            <param name="str1">First string to compare.</param>
            <param name="str2">Second string to compare.</param>
            <returns></returns>
        </member>
        <member name="P:Epicor.Utilities.StringExtensions.KeyCompareCulture">
            <summary>
            Culture used for KeyEquals() comparisons.
            </summary>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.SubstringReplace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Replaces a substring.
            </summary>
            <param name="string1">First string.</param>
            <param name="string2">Second string.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Matches(System.String,System.String,System.Boolean)">
            <summary>
            Tests if current string matches the passed pattern string. * and ? wildcards are expected.
            </summary>
            <param name="str">String to test.</param>
            <param name="pattern">Pattern to match.</param>
            <param name="caseSensitive">true if comparison should be case sensitive; otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Utilities.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <remarks>
            For some reason, .NET does not include an overload of Contains that takes a StringComparison
            parameter. They likely eventually will but in the meantime, we have our own.
            </remarks>
        </member>
        <member name="T:Erp.License.ErpLicensableUserCounts">
            <summary>
            Licensable User Counts are types of sessions that are restricted in some way.
            </summary>
        </member>
    </members>
</doc>
