<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.IF.IPOApvMsg</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.POApvMsgDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.POApvMsgDataSet.POApvMsgDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.POApvMsgDataSet.POApvMsgRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.POApvMsgDataSet.POApvMsgRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.IF.IPOApvMsg">
            <summary>
            Purchase Order Approval Message queue.
            This table contains two record types.
            One to notifiy the approver about PO's which have exceed the buyers limit and need to be reviewed.
            The other to notify the buyer when the approver responds.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetNewPOApvMsg(Epicor.Mfg.BO.POApvMsgDataSet)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.DeleteByID(System.Int32)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetByID(System.Int32)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetRows(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.Update(Epicor.Mfg.BO.POApvMsgDataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.UpdateExt(Epicor.Mfg.BO.UpdExtPOApvMsgDataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetCodeDescList(System.String,System.String)">
            <summary>
            To return the CodeDescriptionList values of a given table.field.
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.CheckApprovalLimit(System.Int32,System.Decimal,System.String,System.String@)">
            <summary>
            This method determines whether the Approval needs to be passed on to a manager
            To be run before the update method
            </summary>
            <param name="vPONum">PO Number</param>
            <param name="vAprvAmt">Amount being Approved</param>
            <param name="vApproved">Approver Response</param>
            <param name="vMessage">If approval is needed, this message will ask the user if they want to continue</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetAllRows(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            GetAllRows displays all the rows from POApvMsg table just like GetRows.
            Except - no filtering of POApvMsg records based on PurAuth will be
            performed in afterGetRows.
            </summary>
            <param name="whereClausePOApvMsg">Where Clause for POApvMsg table.</param>
            <returns type="Epicor.Mfg.BO.POApvMsgDataSet">Returns the new POApvMsg DataSet</returns>
            <param name="pageSize">Page Size</param>
            <param name="absolutePage">absolutePage</param>
            <param name="morePages">morePages</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetApprovalActivity(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            GetApprovalActivity displays all the rows from POApvMsg table just like GetRows.
            Except - no filtering of POApvMsg records based on PurAuth will be
            performed in afterGetRows.
            </summary>
            <param name="whereClausePOApvMsg">Where Clause for POApvMsg table.</param>
            <returns type="Epicor.Mfg.BO.POApvMsgDataSet">Returns the new POApvMsg DataSet</returns>
            <param name="pageSize">Page Size</param>
            <param name="absolutePage">absolutePage</param>
            <param name="morePages">morePages</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IPOApvMsg.GetDateUser(System.String,System.String@)">
            <summary>
            This method puts a date/time/user stamp in the MsgText box for the user
            </summary>
            <param name="ipBuyerID">Buyer ID</param>
            <param name="opName">Buyer Name</param>
        </member>
        <member name="T:Epicor.Mfg.BO.POApvMsgListDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.POApvMsgListDataSet.POApvMsgListDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.POApvMsgListDataSet.POApvMsgListRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.POApvMsgListDataSet.POApvMsgListRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtPOApvMsgDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtPOApvMsgDataSet.POApvMsgDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtPOApvMsgDataSet.POApvMsgRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtPOApvMsgDataSet.POApvMsgRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
    </members>
</doc>
