<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.BO.SalesOrder</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.SalesOrder">
            <summary>
            Client side business object for SalesOrder.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.Proxy.SalesOrderImpl">
            <summary>
            The Sales order main object
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.#ctor(Epicor.Mfg.Core.BLConnectionPool)">
            <summary>
            Proxy constructor
            </summary>
            <param name="connPool">Connection pool</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderHed(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderHedAttch(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOHOrderMsc(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderDtl(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderDtlAttch(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderMsc(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderRel(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderRelTax(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewOrderHedUPS(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.DeleteByID(System.Int32)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetByID(System.Int32)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetRows(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.Update(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.UpdateExt(Epicor.Mfg.BO.UpdExtSalesOrderDataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetCodeDescList(System.String,System.String)">
            <summary>
            To return the CodeDescriptionList values of a given table.field.
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.NegativeInventoryTest(System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.String@,System.String@)">
            <summary>
            To test on hand quantity of the bin - i.e. whether it will go negative.
            Call this method on change of Quantity.
            </summary>
            <param name="pcPartNum">Part Number</param>
            <param name="pcWhseCode">Warehouse Code</param>
            <param name="pcBinNum">Bin Number</param>
            <param name="pcLotNum">Lot Number</param>
            <param name="pcDimCode">From UNIT OF MEASURE (old Dimension Code)</param>
            <param name="pdDimConvFactor">Obsolete Dimension Conversion Factor</param>
            <param name="pdTranQty">Quantity (in stocking uom)</param>
            <param name="pcNeqQtyAction">Valid values are STOP, NONE or ASK User. If Ask User, the user can decide to go ahead with the update even if the qty is negative</param>
            <param name="pcMessage">Error message passed back from the business logic.</param>
            <returns>pcNeqQtyAction</returns>
            <returns>pcMessage</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ApplyOrderBasedDiscounts(System.Int32)">
            <summary>
            Apply order based discounts to an order.
            </summary>
            <param name="iOrderNum">The order to apply the discounts to</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CCClear(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>Procedure to Clear the Credit Card Information</summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>">
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CCLoadTranData(Epicor.Mfg.BO.SalesOrderDataSet,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>Procedure to be called when selecting a record in the Transaction
            history grid, the data selected is loaded in the OrderHed table</summary>
            <param name="inTranDate">TranDate from the CreditTran table</param>
            <param name="inTranTime">TranTime from the CreditTran table</param>
            <param name="inTranNum">TranNum from the CreditTran table</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>">
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CCProcessCard(System.String,System.String@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>Procedure to attempt to process transaction for the amount specified in
            the "Total" field.</summary>
            <param name="inTranType">The transaction type to apply to the credit card.
            Valid transaction types : D (Deposit), S (Sale), A (Authorize),
            C (Credit - 803), V (Void).</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>">
            <param name="opMessage">opMessage</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeBTCustIDMaster(System.String,System.Boolean,System.Int32,System.String@,System.Boolean@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method returns the Bill To customer info.
            </summary>
            <param name="newBillToCustID">Proposed bill to custid</param>
            <param name="lchkCustCredHold">flag to determine if we run CheckCustomerCreditHold</param>
            <param name="iOrderNum">The Order Number - optional</param>
            <param name="cCreditLimitMessage">The over credit limit message text</param>
            <param name="lCustomerAllowed">Flag to indicate if using the customer on the order is valid</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeCardNumber(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Procedure to validate the Credit Card Number. Validations to be performed:
            MOD10, Lenght and Prefix (according to the credit card type)
            </summary>
            <param name="inCardNumber">Proposed Card Number</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeCCAmounts(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>This procedure should be called when any of the Credit Card
            amounts change (from the Column Changed event in the UI) to calculate the
            total to be charged to the credit card </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeCommissionable(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail commission information when the Commissionable
            flag is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeContractNum(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the contract is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeContractNumMaster(System.Int32,System.Int32,System.Int32,System.String@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Validates the entered ContractNum value.
            </summary>
            <param name="iOrderNum">Order number whose field is getting modified</param>
            <param name="iOrderLine">Order Line number that is getting modified</param>
            <param name="iContractNum">Proposed Contract Number</param>
            <param name="outMsg">contains warning messages for UI</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeCounterSale(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header information when the counter sale flag changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeCreditExp(System.Int32,System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Procedure to validate Credit Card Expiration Date
            </summary>
            <param name="ipExpMonth"> Expiration Month </param>
            <param name="ipExpYear"> Expiration Year </param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The Sales Order data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeCurrencyCode(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header Exchange Rate when the currency code changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeCustomer(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header Credit Card Customer information when the Customer is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangedCardNumber(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Procedure to encrypt and mask the Credit Card Number. This method should be
            called in the Column Changed event, assuming that the validation
            performed in ChangeCardNumber was successful.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The Sales Order data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeDiscBreakListCode(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Change the DiscBreakListCode
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeDiscountAmount(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the price discount percent is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeDiscountPercent(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the price discount percent is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeERSOrder(System.Boolean,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header information when the ERS Order changes.
            </summary>
            <param name="proposedERSOrder">The proposed ERS Order</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeGroup(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the Group is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeHedUseOTS(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Method to call when changing the OrderHed.UseOTS field.
            Refreshes the address list and contact info
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder Dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeKitPricing(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Recalculates the parent line's unit price when the kit pricing is set to "P", if the kit pricing is set to "C"
            the price will be calculated on the AfterUpdate procedure.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder Dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeKitQtyPer(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Used to recalculate the SellingQty of the component kit line using the parent's SellingQuantity
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeMake(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release information when the Make value is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeManualTaxCalc(System.Int32,System.Int32,System.Int32,System.String,System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <param name="ipOrderNum">Order Number.</param>
            <param name="ipLineNum">Order line number.</param>
            <param name="ipRelNum">Order Rel number.</param>
            <param name="ipTaxCode">Release tax code.</param>
            <param name="ipRateCode">Release rate code.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">Sales Order data set.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeMiscAmount(Epicor.Mfg.BO.SalesOrderDataSet,System.String)">
            <summary>
            Update Order Miscellaneous information when the amount changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="tableName">name of table being passed in</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeMiscCode(Epicor.Mfg.BO.SalesOrderDataSet,System.String)">
            <summary>
            This method returns default information for the MiscChrg. Method must use
            parameters instead of the dataset due to the problem with changing the primary key field.
            Also allows OrderMsc and OHOrderMsc to use the same code
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="tableName">name of table being passed in</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeMiscPercent(Epicor.Mfg.BO.SalesOrderDataSet,System.String)">
            <summary>
            Update Order Miscellaneous information when the percentage changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="tableName">name of table being passed in</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeNeedByDate(Epicor.Mfg.BO.SalesOrderDataSet,System.String)">
            <summary>
            Update Order Header information based on the NeedByDate changing.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="cTableName">The table that is changed: OrderHed,OrderDtl, or OrderRel</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeNewNeedByDate(Epicor.Mfg.BO.GlbSugPOChgDataSet)">
            <summary>
            Update Global PO information based on the New Need By Date changing.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.GlbSugPOChgDataSet">The GlbSugPOChgDataSet data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeNewSellingQuantity(Epicor.Mfg.BO.GlbSugPOChgDataSet)">
            <summary>
            Update Global PO information based on the New Selling Quantity changing.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.GlbSugPOChgDataSet">The GlbSugPOChgDataSet data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeODtlWarehouse(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the Warehouse changes. This needs to be
            called only for Counter Sales.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelBuyToOrder(System.Boolean,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release information when the Buy To Order value is changed.
            </summary>
            <param name="ipBuyToOrder">The new Buy To Order value.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelDropShip(System.Boolean,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release information when the Buy To Order value is changed.
            </summary>
            <param name="ipDropShip">The new DropShip value.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelMarkForNum(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update OrderRel information with values from the Mark For when the Mark For is changed.
            </summary>
            <param name="proposedMarkForNum">The Proposed ShipToNum </param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The Sales Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelMFCustID(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Method to call when changing the Mark For Customer ID on the OrderRel record.
            Validates the Mark For Customer ID and ressets the ShipToNum to the Customer default.
            </summary>
            <param name="ipMFCustID">The proposed Mark For Customer ID</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The Sales Order data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelShipTo(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release information with values from the Ship To when the Ship To is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelShipToContact(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release ship to contact information when the Release Ship To Contact is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelShipToCustID(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Rel information with values from the Third Party Ship To when the Ship To is changed.
            </summary>
            <param name="iShipToCustID">Proposed Third-Party Ship To</param>
            <param name="ds">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelUseOTMF(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Method to call when changing the UseOTMF field the OrderRel record.
            Refreshes the address list and contact info
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The Sales Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOrderRelVendorID(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release information when the Vendor ID is changed.
            </summary>
            <param name="ipVendorID">The new Vendor ID value.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeORelWarehouse(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release information when the Warehouse changes. This needs to be
            called only for Counter Sales.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOverrideDiscPriceList(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Rerun the price break calculation if the override price list flag is changed from
            true to false.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeOverridePriceList(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Rerun the price break calculation if the override price list flag is changed from
            true to false.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangePartNum(Epicor.Mfg.BO.SalesOrderDataSet,System.Boolean,System.String)">
            <summary>
            Update Order Detail information when the Part Number is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="lSubstitutePartsExist">Flag to indicate if a substitute part exists</param>
            <param name="uomCode"> UOM Code (only used for Product Codes)</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangePartNumMaster(System.String@,System.Boolean@,System.Boolean@,System.String@,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,System.String@,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            </summary>
            <param name="partNum">proposed PartNum</param>
            <param name="lSubstitutePartExist">bool which identifies whether a substitute part exists. set in 'checkPartRevisionChange' logic</param>
            <param name="lIsPhantom">bool which identifies whether this is a phantom part. set in 'getPartXRefInfo' logic</param>
            <param name="uomCode">associated uomCode for this part. maybe overwritten in chkPartXRefInfo</param>
            <param name="sysRowID">sysRowID for current row</param>
            <param name="rowType">current rowType</param>
            <param name="salesKitView">flag to identify whether this OrderDtl record is from salesKitView (or OrderDtlView)</param>
            <param name="removeKitComponents">flag (set by user unless suppressUserPrompts is true) to ok removing kit components if kit parent changes</param>
            <param name="suppressUserPrompts">flag to determine is user wants to be able to respond to messages and return to UI</param>
            <param name="getPartXRefInfo">flag to determine whether a particular part of validation logic is run</param>
            <param name="checkPartRevisionChange">flag to determine whether a particular part of validation logic is run</param>
            <param name="checkChangeKitParent">flag to determine whether a particular part of validation logic is run</param>
            <param name="cDeleteComponentsMessage">message to display to the user</param>
            <param name="questionString">message to display to user</param>
            <param name="cWarningMessage">message to display to user</param>
            <param name="multipleMatch">indicates there are multiple matches for this part</param>
            <param name="promptToExplodeBOM">request input from user - display message</param>
            <param name="cConfigPartMessage">message to display to user</param>
            <param name="cSubPartMessage">message to display to user</param>
            <param name="explodeBOMerrMessage">message to display to user</param>
            <param name="cMsgType">type of message...warning, question, error</param>
            <param name="multiSubsAvail">indicates if there are multiple substitutes available for this part</param>
            <param name="runOutQtyAvail">indicates if there is enough run out available for this part to fulfill order</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangePlant(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Release information when the Plant is changed.
            </summary>
            <param name="proposedPlant">The proposed plant</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangePriceList(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the price list is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangePricePerCode(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the price per code is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeQuickEntryOption(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail Quick Entry options. This method is called whenever the
            CreateNewJob, GetDtls, or SchedJob option is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeQuoteLine(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when selecting a quote line.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeQuoteQtyNum(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update the Order Detail line with values from the selected QuoteQty record.
            This method should be called whenever the action to select a quote quantity
            occurs.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeRelUseOTS(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Method to call when changing the OrderRel.UseOTS field.
            Refreshes the address list and contact info
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder Dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeRenewalNbr(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the renewalnbr is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeRenewalNbrMaster(System.Int32,System.Int32,System.Int32,System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Validates the entered RenewalNbr value.
            </summary>
            <param name="iOrderNum">Order number whose field is getting modified</param>
            <param name="iOrderLine">Order Line number that is getting modified</param>
            <param name="iContractNum">Contract Number</param>
            <param name="iRenewalNbr">Proposed Renewal Number</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeRevisionNum(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the Part Revision Number is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeRevNumMaster(System.Boolean,System.Boolean,System.String,System.String@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the Part Revision Number is changed.
            </summary>
            <param name="checkPartRevChange">bool to determine whether we run the CheckPartRevChange logic</param>
            <param name="suppressUserPrompts">flag to determine is user wants to be able to respond to messages and return to UI</param>
            <param name="proposedRev">proposed RevisionNum</param>
            <param name="cConfigPartMessage">message to display to user</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeRMANum(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail RMALine field when the RMA Number is changed. This method
            needs to be called only if the RMA Number was not selected via a lookup.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeSalesRep(System.String,System.Decimal@,System.Int32@,System.String@)">
            <summary>
            Update rep rate and rep split when the salesrep changes.
            </summary>
            <param name="cSalesRepCode">The SalesRep code</param>
            <param name="dRepRate">The Sales Rep commission rate</param>
            <param name="iRepSplit">The Sales Rep split percentage</param>
            <param name="cRepName">The Sales Rep name</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeSalesUOM(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the SalesUM changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeSellingQtyMaster(Epicor.Mfg.BO.SalesOrderDataSet,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Update Order Detail information when the selling quantity is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="ipSellingQuantity">New value for SellingQuantity</param>
            <param name="chkSellQty">flag to determine if we run checkSellingQuantityChange logic</param>
            <param name="negInvTest">flag to determine if we run negativeInventoryTest logic</param>
            <param name="chgSellQty">flag to determine if we run changeSellingQuantity logic</param>
            <param name="chgDiscPer">flag to determine if we run changeDiscountPercent logic</param>
            <param name="suppressUserPrompts">flag to determine if we suppress any user input</param>
            <param name="lKeepUnitPrice">Keep the current unit price even if it will be recalcuated based on the new quantity</param>
            <param name="pcPartNum">partNum for negativeInventoryTest</param>
            <param name="pcWhseCode">whseCode for negativeInventoryTest</param>
            <param name="pcBinNum">binNum for negativeInventoryTest</param>
            <param name="pcLotNum">lotNum for negativeInventoryTest</param>
            <param name="pcDimCode">dimcode for negativeInventoryTest</param>
            <param name="pdDimConvFactor">dimConvFactor for negativeInventoryTest</param>
            <param name="pcMessage">pcMessage for negativeInventoryTest</param>
            <param name="pcNeqQtyAction">pcNegQtyAction for negativeInventoryTest</param>
            <param name="opWarningMsg">Warning message for BTO releases</param>
            <param name="cSellingQuantityChangedMsgText">message to be displayed to user regarding quantity change</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeSellingQuantity(Epicor.Mfg.BO.SalesOrderDataSet,System.Boolean,System.Decimal,System.String@)">
            <summary>
            Update Order Detail information when the selling quantity is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="lKeepUnitPrice">Keep the current unit price even if it will be recalcuated based on the new quantity</param>
            <param name="ipSellingQuantity">New value for SellingReqQty</param>
            <param name="opWarningMsg">Warning message for BTO releases</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeSellingReqQty(Epicor.Mfg.BO.SalesOrderDataSet,System.Decimal,System.String@)">
            <summary>
            Update Order Release information when the selling quantity is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="ipSellingReqQty">New value for SellingReqQty</param>
            <param name="opWarningMsg">Warning message for BTO releases</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeShipToContact(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header ship to contact information when the Ship To Contact is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeShipToCustID(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header information with values from the Third Party Ship To when the Ship To is changed.
            </summary>
            <param name="iShipToCustID">Proposed Third-Party Ship To</param>
            <param name="ds">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeShipToID(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header information with values from the Ship To when the Ship To is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeSoldToContact(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header sold to contact information when the Sold To Contact is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeSoldToID(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Header information with values from the Sold To when the Sold To is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeUnitPrice(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the unit price changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeVendorChange(Epicor.Mfg.BO.GlbSugPOChgDataSet)">
            <summary>
            Update the suggestion status when the "Ready to Send" box is checked or unchecked.
            In the GlbSugPOChg dataset, this is field VendorChange.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.GlbSugPOChgDataSet">The GlbSugPOChgDataSet data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeWhseCodeMaster(Epicor.Mfg.BO.SalesOrderDataSet,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.String@,System.String@)">
            <summary>
            Update Order Detail information when the selling quantity is changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="negInvTest">flag to determine if we run negativeInventoryTest logic</param>
            <param name="chgDtlWhse">flag to determine if we run changeODtlWarehouse logic</param>
            <param name="suppressUserPrompts">flag to determine if we suppress any user input</param>
            <param name="pcPartNum">partNum for negativeInventoryTest</param>
            <param name="pcWhseCode">whseCode for negativeInventoryTest</param>
            <param name="pcBinNum">binNum for negativeInventoryTest</param>
            <param name="pcLotNum">lotNum for negativeInventoryTest</param>
            <param name="pcDimCode">dimcode for negativeInventoryTest</param>
            <param name="pdDimConvFactor">dimConvFactor for negativeInventoryTest</param>
            <param name="pdSellingQuantity">sellingQty for negativeInventoryTest</param>
            <param name="pcMessage">pcMessage for negativeInventoryTest</param>
            <param name="pcNeqQtyAction">pcNegQtyAction for negativeInventoryTest</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ChangeXPartNum(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Order Detail information when the xpart changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckComplianceFail(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Check for every line of the Pack if it requires if it is compliant.
            </summary>
            <param name="orderNum">Current Order Number.</param>
            <param name="orderLine">Current Order Line.</param>
            <param name="orderRelNum">Current Order Release.</param>
            <param name="compliant">Indicates if the current Order is compliant.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckComplianceOrderFail(System.Int32,System.String@)">
            <summary>
            Check for every line of the Order if it is compliant.
            </summary>
            <param name="orderNum">Current Order Number</param>
            <param name="compliantMsg">Indicates if the current Order is compliant.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckConfiguration(System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean@,System.Boolean@,System.String@,System.String@)">
            <summary>
            Checks is part should be configured on a given OrderLine
            </summary>
            <param name="orderNum">Order number to be searched</param>
            <param name="orderLine">Order Line to be checked</param>
            <param name="sourcePart">Part Num to get details from (populated when sourceFile = "Method")</param>
            <param name="sourceRev">Revision number to get details from (populated when sourceFile = "Method")</param>
            <param name="findRevision">If true the revision number will be looked up rather than using the sourceRev</param>
            <param name="canGetDetails">If false, GetDtls will fail for a configuration reason that can't be resolve by reconfiguring now</param>
            <param name="needsConfiguration">If true the configurator should be run on the Job for the Part/Rev</param>
            <param name="configureRevision">The revision that should be configured (if configuration is needed)</param>
            <param name="reasonMessage">The reason or for the failure or need for configuration. This should be displayed to the user.</param>
            <returns>Part Dataset</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckContractNum(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates the entered ContractNum value.
            </summary>
            <param name="iOrderNum">Order number whose field is getting modified</param>
            <param name="iOrderLine">Order Line number that is getting modified</param>
            <param name="iContractNum">Proposed Contract Number</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckCustomerCreditLimit(System.Int32,System.Int32,System.String@,System.Boolean@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called before the Update method is called for a detail record.
            The method returns a character string if the customer will go over their credit limit
            and the user is given the choice of continuing or not.
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="iCustNum">The Customer Number</param>
            <param name="cCreditLimitMessage">The over credit limit message text</param>
            <param name="lContinue">Indicates if the user is allowed to continue with processing</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckCustomerCreditRelease(System.Int32,System.Int32,System.Int32,System.String@,System.Boolean@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called before the Update method is called for a release record.
            The method returns a character string if the customer will go over their credit limit
            and the user is given the choice of continuing or not.
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="iOrderDtlNum">The line number.</param>
            <param name="iCustNum">The Customer Number</param>
            <param name="cCreditLimitMessage">The over credit limit message text</param>
            <param name="lContinue">Indicates if the user is allowed to continue with processing</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckCustOnCreditHold(System.Int32,System.String,System.String@,System.Boolean@)">
            <summary>
            On selection of an order or customer, checks to see if the customer is on credit hold
            and returns a message string if they are. iOrderNum and cCustID are optional, but
            one or the other should be passed.
            </summary>
            <param name="iOrderNum">The Order Number - optional</param>
            <param name="cCustID">The Customer ID - optional</param>
            <param name="cCreditLimitMessage">The over credit limit message text</param>
            <param name="lCustomerAllowed">Flag to indicate if using the customer on the order is valid</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckICPO(System.Boolean@)">
            <summary>
            Method to call when trying to determine whether there are any incoming ICPO entries.
            This method will return true or false. .
            </summary>
            <param name="icpoFound">Indicates if there are any incoming ICPO records.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckICPOReadyToSend(System.Int32,System.String@)">
            <summary>
            Checks to see if there are any Intercompany PO's not ready to send for the order. If
            there are, returns message text that should be presented to the user asking if they
            would like to continue or not. This method should be called before
            calling the VerifySendICPOSugg and SendICPOSuggestions methods.
            </summary>
            <param name="iOrderNum">The order number to check against</param>
            <param name="cReadyToSendMsgText">The message text</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckKitRevision(System.String,System.String,System.String@)">
            <summary>
            Checks the current selected revision of a kit parent line to see if it has any components
            to be generated. If no revision is selected, or there are no mfg details then a return message
            will be returned to notify the user about it.
            </summary>
            <param name="iPartNum">Part number</param>
            <param name="iRevisionNum">Revision number</param>
            <param name="outMsg">Output message</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckLtrOfCrdt(System.Int32,System.String,System.Decimal,System.String@)">
             <summary>
            
            
            
             </summary>
             <param name="iOrderNum">Sales Order number</param>
             <param name="cARLOCID">Letter of Credit ID</param>
             <param name="dTotalCharges">OrderHed.TotalCharges</param>
             <param name="outMsg">Output message</param>
             <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckMakeDirectReleases(System.Int32,System.Boolean@)">
            <summary>
            Validate whether all make direct releases have jobs if and OrderDtl is checked.
            </summary>
            <param name="ipOrderNum">Order Number</param>
            <param name="opIssueWarning">Flag to indicate if make direct releases exist without job link</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckOrderHedChanges(Epicor.Mfg.BO.SalesOrderDataSet,System.String@)">
            <summary>
            Checks to see if certain fields changed on the order header. If they did,
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="cOrderChangedMsgText">The message text</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckOrderLinkToInterCompanyPO(System.Int32,System.String@)">
            <summary>
            Checks to see if the order is linked to a PO. If it is, an informational message is presented
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="cICPOLinkMessage">The message text</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckPartRevisionChange(System.Int32,System.Int32,System.String,System.String@,System.String@,System.String@,System.Boolean@,System.String@)">
            <summary>
            The method is to be run on leave of the PartNum and Revision fields
            before the ChangePart, ChangeRevision, or Update methods are run.
            When run before CreateOrderFromQuote, the Part Number expected is the part number
            from the quote.
            This returns all the questions that need to be asked before a part can be changed.
            </summary>
            <param name="iOrderNum">The current OrderHed.OrderNum field</param>
            <param name="iOrderLine">The current OrderDtl.OrderLine field</param>
            <param name="cFieldName">The name of the field you are leaving</param>
            <param name="cPartNum">The new PartNum if a substitute part is found, partNum will be the substitute part</param>
            <param name="cConfigPartMessage">If the part is configured, asks if it's okay to delete the configuration inputs. No means the part cannot be changed</param>
            <param name="cSubPartMessage">Asks if the user wants to use a substitute part</param>
            <param name="lSubAvail">Indicates other substitute parts besides the default exist</param>
            <param name="cMsgType">Type of message returned.
            Values can be; "Question" (asking if they want to use the substitute part)
            "Warning" (Warns them that a part is onhold or runout).
            "Error" (Part in Inactive, or Onhold/Runout parts are not accepted in this case).
            "Question" is asking if they want to use the substitute part.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckProjectID(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Validate Projec ID value
            </summary>
            <param name="ipProjectID">The Project ID value</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckQuoteLinesNoQuantity(System.Int32,System.String@)">
            <summary>
            The method is to be run after a Quote Number is obtained for creating an order
            from a quote, but before the CreateOrderFromQuote method is executed. This
            method returns the text of the question to be asked to the user if quote lines are found
            without an order quantity.
            </summary>
            <param name="iQuoteNum">The Quote Number</param>
            <param name="cQuoteLineWOQtyMsgText">The message text</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckRateGrpCode(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Update Check if Rate Group Code entered is valid.
            </summary>
            <param name="ipRateGrpCode">Currency Rate Group Code </param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">Quote dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckRenewalNbr(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates the entered RenewalNbr value.
            </summary>
            <param name="iOrderNum">Order number whose field is getting modified</param>
            <param name="iOrderLine">Order Line number that is getting modified</param>
            <param name="iContractNum">Contract Number</param>
            <param name="iRenewalNbr">Proposed Renewal Number</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckSellingFactorDirection(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            OBSOLETE METHOD..... Validate Selling Factor Direction value
            </summary>
            <param name="ipSellingFactorDirection">The Selling Factor Direction value</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckSellingQuantityChange(Epicor.Mfg.BO.SalesOrderDataSet,System.Decimal,System.String@)">
            <summary>
            The method is to be run on leave of the SellingQuantity field before the
            ChangeSellingQuantity or Update methods are run. If the unit price will be different
            based on the new quantity, this returns the question asking if user would like to
            use the new unit price or keep the current one.
            Calling this method is necessary only if the Quote Number on the detail
            record is not zero.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="dSellingQuantity">The proposed selling quantity</param>
            <param name="cSellingQuantityChangedMsgText">The message text</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CheckSONum(System.Int32,System.Boolean@,System.String@)">
            <summary>
            Method to call when entering proposed Sales Order Number. This method will return
            two output variables. One is a logical field to indicate if the SO number
            entered is existing or not. The other variable is for the error message
            in case the proposed SO number is invalid.
            </summary>
            <param name="proposedSONum">The proposed SO Number</param>
            <param name="opFoundSO">Indicates if the proposed SO number is already existing.</param>
            <param name="opMessage">Error message for the user to see.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CloseOrder(System.Int32)">
            <summary>
            Checks to see if the order can be closed and closes it if it is allowed.
            </summary>
            <param name="iOrderNum">The Order Number to close</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CloseOrderLine(System.Int32,System.Int32)">
            <summary>
            Checks to see if the order can be closed and closes it if it is allowed.
            </summary>
            <param name="iOrderNum">The Order Number of the Order Line to close</param>
            <param name="iOrderLine">The Order Line Number to close</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CloseRelease(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks to see if the order release can be closed and closes it if it is allowed.
            </summary>
            <param name="iOrderNum">The Order Number of the Order Release to close</param>
            <param name="iOrderLine">The Order Line of the Release to close</param>
            <param name="iOrderRelNum">The Order Release Number of the release to close</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CopyOrder(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32@,System.String@)">
            <summary>
            Copy an order.
            </summary>
            <param name="orderNum">The order to apply the discounts to</param>
            <param name="ipPONum"></param>
            <param name="ipOpenRel"></param>
            <param name="ipReNbr"></param>
            <param name="ipPreserve"></param>
            <param name="ipCalc"></param>
            <param name="newOrderNum"></param>
            <param name="outMessage"></param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CreateGlbSugPOChg(Epicor.Mfg.BO.GlbSugPOChgDataSet,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new ttGlbSugPOChg record for processing.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.GlbSugPOChgDataSet">The GlbSugPOChgDataSet data set</param>
            <param name="iOrderNum">The Order Number</param>
            <param name="iOrderLine">The Order Line Number</param>
            <param name="iOrderRel">The Order Release Number</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CreateLineMiscChargesFromQuote(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Method to call to create Line Misc Charges when adding a new OrderDtl record from a quote
            </summary>
            <param name="ipOrderNum">The Order Number</param>
            <param name="ipOrderLine">The Line Number</param>
            <param name="ipQuoteNum">The Quote Number</param>
            <param name="ipQuoteLine">The Quote Line</param>
            <param name="ipQtyNum">The Quote Quantity</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CreateLinesFromHistory(System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Create new lines for every Order Lines selected from History,
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="ds">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CreateOrderDtlComplements(System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Create new lines for every complement selected for a given Line,
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="ds">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CreateOrderFromQuote(System.Int32)">
            <summary>
            Creates an order from a quote.
            </summary>
            <param name="iQuoteNum">The Quote Number with which to create the order</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.CreateOrderFromQuoteSaveOTS(System.Int32,Epicor.Mfg.BO.SaveOTSParamsDataSet)">
            <summary>
            Creates an order from a quote and saves the OTS.
            </summary>
            <param name="iQuoteNum">The Quote Number with which to create the order</param>
            <param name="ds">Save OTS parameters DataSet</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ETCValidateAddress(System.Int32,System.Int32,System.Int32,System.Boolean@,System.Boolean@,System.String@,System.Boolean@)">
            <summary>
            Call tax integration and loads temp tables from the results.
            </summary>
            <param name="orderNum">OrderHed.OrderNum</param>
            <param name="orderLine">OrderDtl.OrderLine</param>
            <param name="orderRelNum">OrderRel.OrderRelNum</param>
            <param name="statusFlag">Set to true if the integration is up, false if down.</param>
            <param name="errorFlag">If true, an error occured.</param>
            <param name="errorMsg">If Error Flag is true, this is the associated message.</param>
            <param name="exceptionFlag">This parameter is only used by the UI, it should not be modified here.</param>
            <returns type="Epicor.Mfg.BO.ETCAddrValidationDataSet">The ETCAddrValidationDataSet data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetByIDLinkedOrder(System.Int32)">
            <summary>
            Update Order Header information with values from the Ship To when the Ship To is changed.
            </summary>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
            <param name="iOrderNum">The Order Number of the order to get</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetCalcQtyPref(System.Boolean@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetGlbSugPOChg(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Get the GlbSugPOChg records for an Order Release.
            </summary>
            <returns type="Epicor.Mfg.BO.GlbSugPOChgDataSet">The GlbSugPOChgDataSet data set</returns>
            <param name="iOrderNum">The Order Number</param>
            <param name="iOrderLine">The Order Line Number</param>
            <param name="iOrderRelNum">The Order Release Number</param>
            <param name="pageSize">The Page Size</param>
            <param name="absolutePage">The absolute page</param>
            <param name="morePages">More Pages</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetJobProd(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Get the JobProd records for an Order Release.
            </summary>
            <returns type="Epicor.Mfg.BO.OrdRelJobProdDataSet">The OrdRelJobProdDataSet data set</returns>
            <param name="iOrderNum">The Order Number</param>
            <param name="iOrderLine">The Order Line Number</param>
            <param name="iOrderRelNum">The Order Release Number</param>
            <param name="pageSize">The Page Size</param>
            <param name="absolutePage">The absolute page</param>
            <param name="morePages">More Pages</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetKitComponents(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String@,System.Int32@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Calls GetKitComponents from SalesKitting.p, which creates a list of OrderDtl records
            that will be treated as kit components of the given OrderLine.
            </summary>
            <param name="iPartNum">Part Number of the given OrderLine</param>
            <param name="iRevisionNum">Revision Number selected for the given PartNum</param>
            <param name="iAltMethod">Aletrnate Method of the given Part number</param>
            <param name="iTargetAsm">Target assembly to be exploded (usually asm 0)</param>
            <param name="orderNum">Order number to be exploded</param>
            <param name="orderLine">Order line which will be the Kit Parent</param>
            <param name="iUseMethodForParts">-</param>
            <param name="regenerateKit">If true this will cause the previous loaded components to be deleted</param>
            <param name="errorMsg">Text message returned in case an error/warning was found</param>
            <param name="errorType">1 = No components on Revision, 2 = Cannot Get Details, 3 = Missing configuration</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The sales order data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetNewSalesKit(System.Int32,System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Creates a new OrderDtl and sets it as a kit component for the given OrderLine
            </summary>
            <param name="orderNum">Order number where the Kit Parent resides</param>
            <param name="orderLine">Order line that has the SalesKit and to which the kit component will be added</param>
            <param name="ds">Order Dataset with the new OrderDtl record as a Sales Kit</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetPayBTFlagDefaults(Epicor.Mfg.BO.SalesOrderDataSet)">
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The sales order data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetPlantConfCtrlInfo(System.Boolean@)">
            <summary>
            Retrieves specific data from PlantConfCtrl for sale order form
            </summary>
            <param name="opSuppressWarning">The message text</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetQuoteQty(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Get the QuoteQty records for an Order Release.
            </summary>
            <returns type="Epicor.Mfg.BO.OrdDtlQuoteQtyDataSet">The OrdDtlQuoteQtyDataSet data set</returns>
            <param name="iQuoteNum">The Quote Number</param>
            <param name="iQuoteLine">The Quote Line Number</param>
            <param name="pageSize">The Page Size</param>
            <param name="absolutePage">The absolute page</param>
            <param name="morePages">More Pages?</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetRowsCustomerTracker(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Calls the normal GetRows method and then constructs a custom data set combining Hed/Dtl fields for the customer tracker.
            </summary>
            <param name="whereClauseOrderHed">Whereclause for OrderHed table.</param>
            <param name="whereClauseOrderHedAttch">Whereclause for OrderHedAttch table.</param>
            <param name="whereClauseOHOrderMsc">Whereclause for OHOrderMsc table.</param>
            <param name="whereClauseOrderDtl">Whereclause for OrderDtl table.</param>
            <param name="whereClauseOrderDtlAttch">Whereclause for OrderDtlAttch table.</param>
            <param name="whereClauseOrderMsc">Whereclause for OrderMsc table.</param>
            <param name="whereClauseOrderRel">Whereclause for OrderRel table.</param>
            <param name="whereClauseOrderRepComm">Whereclause for RepComm table.</param>
            <param name="whereClauseSelectedSerialNumbers">Whereclause for SelectedSerialNumbers table.</param>
            <param name="whereClauseSerialNumberSearch">Whereclause for SerialNumberSearch table.</param>
            <param name="whereClauseSNFormat">Whereclause for SNFormat table.</param>
            <returns type="Epicor.Mfg.BO.OrderCustTrkDataSet">The OrderCustTrkDataSet data set</returns>
            <param name="pageSize">Page size.</param>
            <param name="absolutePage">Absolute page.</param>
            <param name="morePages">More pages.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetSelectSerialNumbersParams(System.String,System.String,System.String,System.Decimal,System.String,System.String)">
            <param name="ipPartNum">ipPartNum</param>
            <param name="ipWhseCode">ipWhseCode</param>
            <param name="ipBinNum">ipBinNum</param>
            <param name="ipQuantity">ipQuantity</param>
            <param name="ipTranType">ipTranType</param>
            <param name="ipRowID">ipRowID</param>
            <returns type="Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetSmartString(System.Int32,System.Int32,System.String,System.String,System.String@,System.Boolean@,System.Boolean@,System.Boolean@,System.String@,System.Boolean@,System.Boolean@,System.String@,System.Boolean@)">
            <summary>
            </summary>
            <param name="orderNum">Kit component order number</param>
            <param name="orderLine">Kit component order line</param>
            <param name="partNum">The part being configured</param>
            <param name="revisionNum">The revision being configured</param>
            <param name="smartString">The generated smartstring of the configuration</param>
            <param name="createPart">True if a new part should be created</param>
            <param name="promptForPartNum">True if the user should be prompted for the part number</param>
            <param name="notifyOfExistingPart">If true the user should be warned if the new part number already exists</param>
            <param name="newPartNum">The generated portion of the new part number</param>
            <param name="createCustPart">If true the user should be asked if they want the Customer Part Number assigned</param>
            <param name="promptForCustPartNum">If true the user should be prompted to update the new Customer Part Number</param>
            <param name="newCustPartNum">The generated customer part number</param>
            <param name="promptForAutoCreatePart">True if the user should be prompted to create part</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GetUIParams">
            <summary>
            Get the parameters needed for the UI on startup.
            </summary>
            <returns type="Epicor.Mfg.BO.SOEntryUIParamsDataSet">The SO entry UI Params data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GlbSugPOChgDelete(System.String)">
            <summary>
            Delete a new GlbSugPOChg record.
            </summary>
            <returns type="Epicor.Mfg.BO.GlbSugPOChgDataSet">The GlbSugPOChgDataSet data set</returns>
            <param name="cRowIdent">The row ident of the record to delete</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.GlbSugPOChgUpdate(Epicor.Mfg.BO.GlbSugPOChgDataSet)">
            <summary>
            Update/Add a new GlbSugPOChg record.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.GlbSugPOChgDataSet">The GlbSugPOChgDataSet data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.JobProdDelete(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Delete JobProd records.
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="iOrderLine">The Order Line Number</param>
            <param name="iOrderRelNum">The Order Release Number</param>
            <param name="cJobNum">Job Number</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.KitCompPartCreate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            </summary>
            <param name="orderNum">Kit component order number</param>
            <param name="orderLine">Kit component order line</param>
            <param name="partNum">The part being configured</param>
            <param name="revisionNum">The revision being configured</param>
            <param name="smartString">The generated smartstring of the configuration</param>
            <param name="newPartNum">The Part Number to be used for a new part creation. If blank, a part will not be created.</param>
            <param name="newCustPartNum">The Customer Part Number to stored on the order line.</param>
            <param name="responseAutoCrtPart">Answer to the question presented to user about auto creating a part.</param>
            <param name="newPartAlreadyExists">Returns true a new part was not created because it already exists.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.MasterUpdate(System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean@,System.String@,System.String@,System.String@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            </summary>
            <param name="lcheckForResponse">bool to determine whether to run code that may require user input</param>
            <param name="cTableName">identifies which table was modified</param>
            <param name="iCustNum">The current custNum</param>
            <param name="iOrderNum">The current orderNum</param>
            <param name="lweLicensed">whether the WE module is licensed</param>
            <param name="lContinue">Return bool to identify whether a stop condition was reached</param>
            <param name="cResponseMsg">Return message which requires a user response</param>
            <param name="cDisplayMsg">Return message to display to user from ChkLtrOfCrdt routine</param>
            <param name="cCompliantMsg">Return check compliance message to display to user</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeARLOCID(System.String,System.String@,System.String@,System.String@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Validate ARLOCID value
            </summary>
            <param name="ipARLOCID">The Letter of Credit ID value</param>
            <param name="opOverwriteValue">The value to put in the field</param>
            <param name="opFieldName">The name of the field that the overwrite value goes in</param>
            <param name="opMsg">Message to the user</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeCreditCardOrder(System.Boolean,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method validates field CreditCardOrder
            </summary>
            <param name="ipCreditCardOrder">Proposed CreditCardOrder value</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeofBTConNum(System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method returns the Bill To Contact info.
            </summary>
            <param name="newBillToConNum">Proposed bill to custid</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeofBTCustID(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method returns the Bill To customer info.
            </summary>
            <param name="newBillToCustID">Proposed bill to custid</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeOfFixedAmount(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Decimal,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called when the taxable amount on the invoice tax
            record is changed.
            </summary>
            <param name="orderNum">Order Number.</param>
            <param name="orderLine">Order line number.</param>
            <param name="orderRel">Order Rel number.</param>
            <param name="taxCode">Release tax code.</param>
            <param name="rateCode">Release rate code.</param>
            <param name="newFixedAmount">Proposed Fixed AMount.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeOfMktgCampaign(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called when MktgCampaign changes. It will validate to select an Active
            MktgCampaign. This method defaults the Marketing Event field
            </summary>
            <param name="mktgCampaignID">The MktgCampaign Id</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeOfMktgEvnt(System.String,System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called when MktgEvent changes. It will validate to select an Active
            MktgEvent.
            </summary>
            <param name="mktgCampaignID">The MktgCampaign Id</param>
            <param name="mktgEvntSeq">The MktgCampaign Id</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeofPhaseID(System.String,System.Boolean,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Check new phase and return phase info.
            </summary>
            <param name="ipPhaseID">Proposed Phase ID.</param>
            <param name="ipIsChanging">Is called from column_changing.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeofSoldToCreditCheck(System.Int32,System.String,System.String@,System.Boolean@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called when the sold to customer changes. It will validate the default
            bill to customer credit.
            The method returns a character string if the customer will go over their credit limit
            and the user is given the choice of continuing or not.
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="iCustID">The Sold To Customer ID</param>
            <param name="cCreditLimitMessage">The over credit limit message text</param>
            <param name="lContinue">Indicates if the user is allowed to continue with processing</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeOfTaxAmt(System.Int32,System.Int32,System.Int32,System.String,System.Decimal,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called when the taxable amount on the invoice tax
            record is changed.
            </summary>
            <param name="orderNum">Order Number.</param>
            <param name="orderLine">Order line number.</param>
            <param name="orderRel">Order Rel number.</param>
            <param name="taxCode">Release tax code.</param>
            <param name="newTaxAmt">Proposed Taxable amount.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeOfTaxPercent(System.Int32,System.Int32,System.Int32,System.String,System.Decimal,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called when the taxable amount on the invoice tax
            record is changed.
            </summary>
            <param name="orderNum">Order Number.</param>
            <param name="orderLine">Order line number.</param>
            <param name="orderRel">Order Rel number.</param>
            <param name="taxCode">Release tax code.</param>
            <param name="newPercent">Proposed Percent.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeofTaxRgn(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Validate Tax Region Code entered by the user.
            </summary>
            <param name="iTaxRegionCode">Proposed tax region code.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">Sales Order data set.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeRateCode(System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <param name="proposedRateCode">Release tax rate code.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">Sales Order data set.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeTaxableAmt(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Decimal,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            This method should be called when the taxable amount on the invoice tax
            record is changed.
            </summary>
            <param name="orderNum">Order Number.</param>
            <param name="orderLine">Order line number.</param>
            <param name="orderRel">Order Rel number.</param>
            <param name="taxCode">Release tax code.</param>
            <param name="rateCode">Release rate code.</param>
            <param name="newTaxableAmt">Proposed Taxable amount.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">SalesOrder dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OnChangeTaxCode(System.Int32,System.Int32,System.Int32,System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <param name="ipOrderNum">Order Number.</param>
            <param name="ipLineNum">Order line number.</param>
            <param name="ipRelNum">Order Rel number.</param>
            <param name="ipTaxCode">Release tax code.</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">Sales Order data set.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OrderDtlGetNewContracts(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32)">
            <summary>
            Method to call when adding a new OrderDtl record for a Contract or a Service Contract
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="iOrderNum">The order number to add the line to</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OrderDtlGetNewCounterSale(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32)">
            <summary>
            Method to call when adding a new OrderDtl record for a counter sale
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="iOrderNum">The order number to add the line to</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OrderDtlGetNewFromQuote(Epicor.Mfg.BO.SalesOrderDataSet,System.Int32)">
            <summary>
            Method to call when adding a new OrderDtl record from a quote
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
            <param name="iOrderNum">The order number to add the line to</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.OverCreditLimitUpdateAllowed(System.Int32,System.Boolean@)">
            <summary>
            This should be called whenever the user selects an order either by typing the
            order number on the screen or picking it via a lookup. This method checks to
            see if the order is over the credit limit, and if it is it then checks a system
            setting to see if orders over the credit limit can be updated. If they cannot,
            it returns a value of false and updates cannot occur.
            </summary>
            <param name="iOrderNum">The Order Number</param>
            <param name="lUpdateAllowed">Update allowed flag; true if update allowed, false if not.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.phantomComponents(System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            This procedure will explode the BOM of a part set as Phantom
            </summary>
            <param name="phPartNum">The phantom part number</param>
            <param name="orderNum">Order number where the lines will be saved</param>
            <param name="orderLine">Order line of the parent line</param>
            <param name="errMessage">Returns any error messages found during the process</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ProcessCounterSale(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String@,System.Int32@,System.String@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Process the counter sale by generating the packing slip and/or the invoice
            for the order.
            </summary>
            <param name="iOrderNum">The Order Number of the counter sale order to process</param>
            <param name="lGeneratePackingSlip">Flag to indicate if the packing slip should be generated</param>
            <param name="lGenerateInvoice">Flag to indicate if the invoice should be generated</param>
            <param name="lReadyToShip">Indicates if the packing slip should be marked as ready to ship</param>
            <param name="cPackNum">The number of the packing slip that was generated</param>
            <param name="iInvoiceNum">The number of the invoice that was generated</param>
            <param name="opMessage">Message to display to user when processing is done</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ProcessQuickEntry(System.Int32,System.Boolean@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Process the Quick Entry job options on the order detail lines.
            </summary>
            <param name="iOrderNum">The Order Number of the order to process</param>
            <param name="lProcessComplete">Indicates if the process completed without error</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.RebuildShipUPS(System.Int32,System.String,Epicor.Mfg.BO.SalesOrderDataSet)">
            <param name="ipCustNum">Customer to update</param>
            <param name="ipShipToNum">Ship To Num</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The Order Entry dataSet</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.RecalcKitPriceAfterConfig(System.Int32,System.Int32)">
            <summary>
            <summary>
            When configuring a part, the OrderDtl unit price may change during the configuration
            process. This method is to be called after running product configurator to recalculate
            the kit pricing.
            </summary>
            </summary>
            <param name="iOrderNum">Sales Order Number for configured part</param>
            <param name="iOrderLine">Sales Order Line for configured part</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.RemoveICPOLink(System.Int32)">
            <summary>
            Removes a PO Link from this order.
            </summary>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
            <param name="iOrderNum">The Order Number of the Order to remove the link from</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ReopenOrder(System.Int32)">
            <summary>
            Reopens an order.
            </summary>
            <param name="iOrderNum">The Order Number of the Order to reopen</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ReopenOrderLine(System.Int32,System.Int32)">
            <summary>
            Reopens an order line.
            </summary>
            <param name="iOrderNum">The Order Number of the Order Line to reopen</param>
            <param name="iOrderLine">The Order Line Number to close</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ReopenRelease(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reopens an order release.
            </summary>
            <param name="iOrderNum">The Order Number of the Order Release to reopen</param>
            <param name="iOrderLine">The Order Line Number of the Release to close</param>
            <param name="iOrderRelNum">The Release Number of the Release to close</param>
            <returns type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.SendLinkedICPOSuggestion">
            <summary>
            Send a linked IC PO Suggestion.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.SetCalcQtysPref(System.Boolean)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.SetReadyToCalc(System.Int32,Epicor.Mfg.BO.SalesOrderDataSet)">
            <param name="ipOrderNum">The Order Number of the Order to remove the link from</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">ARInvoice dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.SetUPSQVEnable(System.Boolean,Epicor.Mfg.BO.SalesOrderDataSet)">
            <param name="ipQVEnable">logical indicating if the quantum view is to enabled/disabled</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The sales order data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ValidateInvQty(System.Int32,System.String@,System.String@,Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Validate that the order detail line transaction does not cause the part
            to result in negative onhand quantity.
            </summary>
            <param name="ipOrderNum">The Order Number of the counter sale order to process</param>
            <param name="opNegInvMessage">pcMessage for negativeInventoryTest</param>
            <param name="opNegQtyAction">pcNegQtyAction for negativeInventoryTest</param>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.ValidateSNs(Epicor.Mfg.BO.SalesOrderDataSet)">
            <summary>
            Validate serial numbers are entered for each part before calling generatepackslip.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SalesOrderDataSet">The SalesOrder data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.VerifySendICPOSugg(System.String@)">
            <summary>
            Returns the text of the message to be presented to the user asking if they
            are sure they want to continue with the SendICPOSuggestions process or not.
            This method should be called after CheckICPOReadyToSend if the user chose to continue
            and before the SendICPOSuggestions method.
            </summary>
            <param name="cVerifySendMsgText">The message text</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.hasMultipleSubs(System.String)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.SalesOrderImpl.isRunOutOnHand(System.String)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="P:Epicor.Mfg.Proxy.SalesOrderImpl.CallContext">
            <summary>
            Call context dataset
            </summary>
        </member>
        <member name="M:Epicor.Mfg.BO.SalesOrder.#ctor(Epicor.Mfg.Core.BLConnectionPool)">
            <summary>
            Constructor
            </summary>
            <param name="connPool">Connection pool</param>
        </member>
    </members>
</doc>
